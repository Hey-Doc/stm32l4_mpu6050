
accel_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af0c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800b0d0  0800b0d0  0001b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b428  0800b428  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b428  0800b428  0001b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b430  0800b430  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b430  0800b430  0001b430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b434  0800b434  0001b434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001e0  0800b618  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800b618  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7c3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f10  00000000  00000000  0003b9d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a8  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001530  00000000  00000000  0003ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed7b  00000000  00000000  000414c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011adb  00000000  00000000  0007023b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011e2ed  00000000  00000000  00081d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a0003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa4  00000000  00000000  001a0080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b0b4 	.word	0x0800b0b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800b0b4 	.word	0x0800b0b4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <MX_I2C1_Init+0x78>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <MX_I2C1_Init+0x7c>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f14:	f003 f8c3 	bl	800409e <HAL_I2C_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f1e:	f001 f8ef 	bl	8002100 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f26:	f003 fd93 	bl	8004a50 <HAL_I2CEx_ConfigAnalogFilter>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f001 f8e6 	bl	8002100 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f38:	f003 fdd5 	bl	8004ae6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f001 f8dd 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000230 	.word	0x20000230
 8000f50:	40005400 	.word	0x40005400
 8000f54:	307075b1 	.word	0x307075b1

08000f58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_I2C_MspInit+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d129      	bne.n	8000fce <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f98:	2312      	movs	r3, #18
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4823      	ldr	r0, [pc, #140]	; (800103c <HAL_I2C_MspInit+0xe4>)
 8000fb0:	f002 fea8 	bl	8003d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fcc:	e02d      	b.n	800102a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_I2C_MspInit+0xe8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d128      	bne.n	800102a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ff0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001002:	2304      	movs	r3, #4
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <HAL_I2C_MspInit+0xe4>)
 800100e:	f002 fe79 	bl	8003d04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8001018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_I2C_MspInit+0xe0>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	; 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40005400 	.word	0x40005400
 8001038:	40021000 	.word	0x40021000
 800103c:	48000400 	.word	0x48000400
 8001040:	40005800 	.word	0x40005800

08001044 <__io_putchar>:
#else
 #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 800104c:	1d39      	adds	r1, r7, #4
 800104e:	2301      	movs	r3, #1
 8001050:	2201      	movs	r2, #1
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <__io_putchar+0x20>)
 8001054:	f006 f83f 	bl	80070d6 <HAL_UART_Transmit>
 return ch;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200004cc 	.word	0x200004cc

08001068 <magnitude>:


float magnitude(float *vec)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return sqrt(pow(vec[0],2) + pow(vec[1],2) + pow(vec[2],2));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa2f 	bl	80004d8 <__aeabi_f2d>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001118 <magnitude+0xb0>
 8001082:	ec44 3b10 	vmov	d0, r3, r4
 8001086:	f008 ff71 	bl	8009f6c <pow>
 800108a:	ec55 4b10 	vmov	r4, r5, d0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa1f 	bl	80004d8 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001118 <magnitude+0xb0>
 80010a2:	ec43 2b10 	vmov	d0, r2, r3
 80010a6:	f008 ff61 	bl	8009f6c <pow>
 80010aa:	ec53 2b10 	vmov	r2, r3, d0
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff f8b3 	bl	800021c <__adddf3>
 80010b6:	4603      	mov	r3, r0
 80010b8:	460c      	mov	r4, r1
 80010ba:	4625      	mov	r5, r4
 80010bc:	461c      	mov	r4, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa07 	bl	80004d8 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001118 <magnitude+0xb0>
 80010d2:	ec43 2b10 	vmov	d0, r2, r3
 80010d6:	f008 ff49 	bl	8009f6c <pow>
 80010da:	ec53 2b10 	vmov	r2, r3, d0
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff f89b 	bl	800021c <__adddf3>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	ec44 3b17 	vmov	d7, r3, r4
 80010ee:	eeb0 0a47 	vmov.f32	s0, s14
 80010f2:	eef0 0a67 	vmov.f32	s1, s15
 80010f6:	f009 f8a9 	bl	800a24c <sqrt>
 80010fa:	ec54 3b10 	vmov	r3, r4, d0
 80010fe:	4618      	mov	r0, r3
 8001100:	4621      	mov	r1, r4
 8001102:	f7ff fd19 	bl	8000b38 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	ee07 3a90 	vmov	s15, r3
}
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bdb0      	pop	{r4, r5, r7, pc}
 8001116:	bf00      	nop
 8001118:	00000000 	.word	0x00000000
 800111c:	40000000 	.word	0x40000000

08001120 <mean>:
float mean(float *vec)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  int sum=0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  for (int i=0;i<10;i++){sum+=vec[i];}
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	e014      	b.n	800115c <mean+0x3c>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b09      	cmp	r3, #9
 8001160:	dde7      	ble.n	8001132 <mean+0x12>
  return sum/10;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <mean+0x68>)
 8001166:	fb82 1203 	smull	r1, r2, r2, r3
 800116a:	1092      	asrs	r2, r2, #2
 800116c:	17db      	asrs	r3, r3, #31
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	66666667 	.word	0x66666667
 800118c:	00000000 	.word	0x00000000

08001190 <stnd>:
float stnd(float *vec)
{
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  int s=0;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  int m=mean(vec);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffbf 	bl	8001120 <mean>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	60fb      	str	r3, [r7, #12]
  for (int i=0;i<10;i++){s+=pow((vec[i]-m),2);}
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	e030      	b.n	8001218 <stnd+0x88>
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d0:	ee17 0a90 	vmov	r0, s15
 80011d4:	f7ff f980 	bl	80004d8 <__aeabi_f2d>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001260 <stnd+0xd0>
 80011e0:	ec44 3b10 	vmov	d0, r3, r4
 80011e4:	f008 fec2 	bl	8009f6c <pow>
 80011e8:	ec56 5b10 	vmov	r5, r6, d0
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff f961 	bl	80004b4 <__aeabi_i2d>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	461a      	mov	r2, r3
 80011f8:	4623      	mov	r3, r4
 80011fa:	4628      	mov	r0, r5
 80011fc:	4631      	mov	r1, r6
 80011fe:	f7ff f80d 	bl	800021c <__adddf3>
 8001202:	4603      	mov	r3, r0
 8001204:	460c      	mov	r4, r1
 8001206:	4618      	mov	r0, r3
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fc6d 	bl	8000ae8 <__aeabi_d2iz>
 800120e:	4603      	mov	r3, r0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3301      	adds	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b09      	cmp	r3, #9
 800121c:	ddcb      	ble.n	80011b6 <stnd+0x26>
  return sqrt(s/10);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <stnd+0xd8>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1092      	asrs	r2, r2, #2
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f941 	bl	80004b4 <__aeabi_i2d>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	ec44 3b10 	vmov	d0, r3, r4
 800123a:	f009 f807 	bl	800a24c <sqrt>
 800123e:	ec54 3b10 	vmov	r3, r4, d0
 8001242:	4618      	mov	r0, r3
 8001244:	4621      	mov	r1, r4
 8001246:	f7ff fc77 	bl	8000b38 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	ee07 3a90 	vmov	s15, r3
}
 8001250:	eeb0 0a67 	vmov.f32	s0, s15
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	40000000 	.word	0x40000000
 8001268:	66666667 	.word	0x66666667
 800126c:	00000000 	.word	0x00000000

08001270 <detect>:
void detect(float stdv, float meanv, float stdm, float meanm)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	ed87 0a03 	vstr	s0, [r7, #12]
 800127a:	edc7 0a02 	vstr	s1, [r7, #8]
 800127e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001282:	edc7 1a00 	vstr	s3, [r7]
	if(meanv<=-10.5){
 8001286:	edd7 7a02 	vldr	s15, [r7, #8]
 800128a:	eeba 7a05 	vmov.f32	s14, #165	; 0xc1280000 -10.5
 800128e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	d812      	bhi.n	80012be <detect+0x4e>
		if(stdm<=4.4){
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff f91d 	bl	80004d8 <__aeabi_f2d>
 800129e:	a315      	add	r3, pc, #84	; (adr r3, 80012f4 <detect+0x84>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff fbec 	bl	8000a80 <__aeabi_dcmple>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <detect+0x46>
			printf("notfall\n");
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <detect+0x78>)
 80012b0:	f007 f8da 	bl	8008468 <puts>
		}
		else{
			printf("notfall\n");
		}
	}
}
 80012b4:	e013      	b.n	80012de <detect+0x6e>
			printf("fall\n");
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <detect+0x7c>)
 80012b8:	f007 f8d6 	bl	8008468 <puts>
}
 80012bc:	e00f      	b.n	80012de <detect+0x6e>
		if(meanm<=89){
 80012be:	edd7 7a00 	vldr	s15, [r7]
 80012c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80012f0 <detect+0x80>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d803      	bhi.n	80012d8 <detect+0x68>
			printf("fall\n");
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <detect+0x7c>)
 80012d2:	f007 f8c9 	bl	8008468 <puts>
}
 80012d6:	e002      	b.n	80012de <detect+0x6e>
			printf("notfall\n");
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <detect+0x78>)
 80012da:	f007 f8c5 	bl	8008468 <puts>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	0800b0d0 	.word	0x0800b0d0
 80012ec:	0800b0d8 	.word	0x0800b0d8
 80012f0:	42b20000 	.word	0x42b20000
 80012f4:	9999999a 	.word	0x9999999a
 80012f8:	40119999 	.word	0x40119999

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float buffer_a[buflen][3]={};
 8001304:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001308:	4618      	mov	r0, r3
 800130a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800130e:	461a      	mov	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f006 fcfb 	bl	8007d0c <memset>
	float Axyz[3]={0,0,0};
 8001316:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
	float V[3]={0,0,0};
 8001334:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
	float pastAxyz[3]={0,0,0};
 8001352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	float magV[10]={};
 8001370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001374:	4618      	mov	r0, r3
 8001376:	2328      	movs	r3, #40	; 0x28
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	f006 fcc6 	bl	8007d0c <memset>
	float magM[10]={};
 8001380:	463b      	mov	r3, r7
 8001382:	4618      	mov	r0, r3
 8001384:	2328      	movs	r3, #40	; 0x28
 8001386:	461a      	mov	r2, r3
 8001388:	2100      	movs	r1, #0
 800138a:	f006 fcbf 	bl	8007d0c <memset>
	float meanV=0.0;
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001396:	6013      	str	r3, [r2, #0]
	float stdV=0.0;
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f507 62a6 	add.w	r2, r7, #1328	; 0x530
 80013a0:	6013      	str	r3, [r2, #0]
	float meanM=0.0;
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 80013aa:	6013      	str	r3, [r2, #0]
	float stdM=0.0;
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 80013b4:	6013      	str	r3, [r2, #0]
	float sizV=0.0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	f207 5224 	addw	r2, r7, #1316	; 0x524
 80013be:	6013      	str	r3, [r2, #0]
	int cyc = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
	int CycTrue = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013cc:	f001 fb01 	bl	80029d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f9be 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f000 fd54 	bl	8001e80 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013d8:	f000 fa6a 	bl	80018b0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80013dc:	f000 facc 	bl	8001978 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80013e0:	f7ff fd7a 	bl	8000ed8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013e4:	f000 fb00 	bl	80019e8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80013e8:	f000 fb3e 	bl	8001a68 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80013ec:	f000 fb92 	bl	8001b14 <MX_SPI1_Init>
  MX_SPI3_Init();
 80013f0:	f000 fbce 	bl	8001b90 <MX_SPI3_Init>
  MX_UART4_Init();
 80013f4:	f000 fc0a 	bl	8001c0c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80013f8:	f000 fc54 	bl	8001ca4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013fc:	f000 fc9e 	bl	8001d3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001400:	f000 fcea 	bl	8001dd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001404:	f000 fd34 	bl	8001e70 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001408:	bf00      	nop
 800140a:	48cb      	ldr	r0, [pc, #812]	; (8001738 <main+0x43c>)
 800140c:	f000 fe7c 	bl	8002108 <MPU6050_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d0f9      	beq.n	800140a <main+0x10e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001416:	49c9      	ldr	r1, [pc, #804]	; (800173c <main+0x440>)
 8001418:	48c7      	ldr	r0, [pc, #796]	; (8001738 <main+0x43c>)
 800141a:	f000 fecd 	bl	80021b8 <MPU6050_Read_Accel>
	Axyz[0]=100*(MPU6050.Ax);
 800141e:	4bc7      	ldr	r3, [pc, #796]	; (800173c <main+0x440>)
 8001420:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4bc5      	ldr	r3, [pc, #788]	; (8001740 <main+0x444>)
 800142a:	f7ff f8ad 	bl	8000588 <__aeabi_dmul>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	4618      	mov	r0, r3
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff fb7f 	bl	8000b38 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001440:	601a      	str	r2, [r3, #0]
	Axyz[1]=100*(MPU6050.Ay);
 8001442:	4bbe      	ldr	r3, [pc, #760]	; (800173c <main+0x440>)
 8001444:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4bbc      	ldr	r3, [pc, #752]	; (8001740 <main+0x444>)
 800144e:	f7ff f89b 	bl	8000588 <__aeabi_dmul>
 8001452:	4603      	mov	r3, r0
 8001454:	460c      	mov	r4, r1
 8001456:	4618      	mov	r0, r3
 8001458:	4621      	mov	r1, r4
 800145a:	f7ff fb6d 	bl	8000b38 <__aeabi_d2f>
 800145e:	4602      	mov	r2, r0
 8001460:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001464:	605a      	str	r2, [r3, #4]
	Axyz[2]=100*(MPU6050.Az);
 8001466:	4bb5      	ldr	r3, [pc, #724]	; (800173c <main+0x440>)
 8001468:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4bb3      	ldr	r3, [pc, #716]	; (8001740 <main+0x444>)
 8001472:	f7ff f889 	bl	8000588 <__aeabi_dmul>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fb5b 	bl	8000b38 <__aeabi_d2f>
 8001482:	4602      	mov	r2, r0
 8001484:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001488:	609a      	str	r2, [r3, #8]
    //sensor processing//
	pastAxyz[0]=buffer_a[cyc][0];
 800148a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800148e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014a2:	601a      	str	r2, [r3, #0]
	pastAxyz[1]=buffer_a[cyc][1];
 80014a4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80014a8:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3304      	adds	r3, #4
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014be:	605a      	str	r2, [r3, #4]
	pastAxyz[2]=buffer_a[cyc][2];
 80014c0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80014c4:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3308      	adds	r3, #8
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014da:	609a      	str	r2, [r3, #8]

	buffer_a[cyc][0]=Axyz[0];
 80014dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80014e6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4403      	add	r3, r0
 80014f4:	6019      	str	r1, [r3, #0]
	buffer_a[cyc][1]=Axyz[1];
 80014f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001500:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4403      	add	r3, r0
 800150e:	3304      	adds	r3, #4
 8001510:	6019      	str	r1, [r3, #0]
	buffer_a[cyc][2]=Axyz[2];
 8001512:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800151c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4403      	add	r3, r0
 800152a:	3308      	adds	r3, #8
 800152c:	6019      	str	r1, [r3, #0]
	magM[cyc%10]=magnitude(Axyz);
 800152e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8001532:	4b84      	ldr	r3, [pc, #528]	; (8001744 <main+0x448>)
 8001534:	fb83 1302 	smull	r1, r3, r3, r2
 8001538:	1099      	asrs	r1, r3, #2
 800153a:	17d3      	asrs	r3, r2, #31
 800153c:	1acc      	subs	r4, r1, r3
 800153e:	4623      	mov	r3, r4
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4423      	add	r3, r4
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	1ad4      	subs	r4, r2, r3
 8001548:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fd8b 	bl	8001068 <magnitude>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	463a      	mov	r2, r7
 8001558:	00a3      	lsls	r3, r4, #2
 800155a:	4413      	add	r3, r2
 800155c:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0;i<3;i++){
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8001566:	e02c      	b.n	80015c2 <main+0x2c6>
		V[i]+=(Axyz[i]-pastAxyz[i])/buflen;
 8001568:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800156c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800157c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	edd3 6a00 	vldr	s13, [r3]
 8001588:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800158c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800159c:	ed9f 6a6a 	vldr	s12, [pc, #424]	; 8001748 <main+0x44c>
 80015a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015ac:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0;i<3;i++){
 80015b8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80015bc:	3301      	adds	r3, #1
 80015be:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80015c2:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	ddce      	ble.n	8001568 <main+0x26c>
	}
	sizV=magnitude(V);
 80015ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd4a 	bl	8001068 <magnitude>
 80015d4:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80015d8:	ed83 0a00 	vstr	s0, [r3]
	magV[cyc%10]=0;
 80015dc:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <main+0x448>)
 80015e2:	fb83 2301 	smull	r2, r3, r3, r1
 80015e6:	109a      	asrs	r2, r3, #2
 80015e8:	17cb      	asrs	r3, r1, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	1aca      	subs	r2, r1, r3
 80015f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015fa:	0093      	lsls	r3, r2, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
	for (int i=0;i<3;i++){
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800160a:	e037      	b.n	800167c <main+0x380>
		magV[cyc%10]+=Axyz[i]*V[i]/sizV;
 800160c:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <main+0x448>)
 8001612:	fb83 2301 	smull	r2, r3, r3, r1
 8001616:	109a      	asrs	r2, r3, #2
 8001618:	17cb      	asrs	r3, r1, #31
 800161a:	1ad2      	subs	r2, r2, r3
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	1aca      	subs	r2, r1, r3
 8001626:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800162a:	0093      	lsls	r3, r2, #2
 800162c:	440b      	add	r3, r1
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001636:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	edd3 6a00 	vldr	s13, [r3]
 8001642:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001646:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001656:	f207 5324 	addw	r3, r7, #1316	; 0x524
 800165a:	edd3 6a00 	vldr	s13, [r3]
 800165e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800166a:	0093      	lsls	r3, r2, #2
 800166c:	440b      	add	r3, r1
 800166e:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0;i<3;i++){
 8001672:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800167c:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8001680:	2b02      	cmp	r3, #2
 8001682:	ddc3      	ble.n	800160c <main+0x310>
	}

	meanM=mean(magM);
 8001684:	463b      	mov	r3, r7
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd4a 	bl	8001120 <mean>
 800168c:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8001690:	ed83 0a00 	vstr	s0, [r3]
	stdM=stnd(magM);
 8001694:	463b      	mov	r3, r7
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd7a 	bl	8001190 <stnd>
 800169c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80016a0:	ed83 0a00 	vstr	s0, [r3]
	meanV=mean(magV);
 80016a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd39 	bl	8001120 <mean>
 80016ae:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80016b2:	ed83 0a00 	vstr	s0, [r3]
	stdV=stnd(magV);
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fd68 	bl	8001190 <stnd>
 80016c0:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80016c4:	ed83 0a00 	vstr	s0, [r3]

	cyc++;
 80016c8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
	if(cyc==buflen && !CycTrue){CycTrue=1;}
 80016d2:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d106      	bne.n	80016e8 <main+0x3ec>
 80016da:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <main+0x3ec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	cyc=cyc%buflen;
 80016e8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <main+0x450>)
 80016ee:	fb82 1203 	smull	r1, r2, r2, r3
 80016f2:	1151      	asrs	r1, r2, #5
 80016f4:	17da      	asrs	r2, r3, #31
 80016f6:	1a8a      	subs	r2, r1, r2
 80016f8:	2164      	movs	r1, #100	; 0x64
 80016fa:	fb01 f202 	mul.w	r2, r1, r2
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544

	if(CycTrue){
 8001704:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8001708:	2b00      	cmp	r3, #0
 800170a:	d011      	beq.n	8001730 <main+0x434>
		detect(stdV, meanV, stdM, meanM);
 800170c:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8001710:	edd3 1a00 	vldr	s3, [r3]
 8001714:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8001718:	ed93 1a00 	vldr	s2, [r3]
 800171c:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001720:	edd3 0a00 	vldr	s1, [r3]
 8001724:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8001728:	ed93 0a00 	vldr	s0, [r3]
 800172c:	f7ff fda0 	bl	8001270 <detect>
	}
	HAL_Delay(100);
 8001730:	2064      	movs	r0, #100	; 0x64
 8001732:	f001 f9c3 	bl	8002abc <HAL_Delay>
	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 8001736:	e66e      	b.n	8001416 <main+0x11a>
 8001738:	20000230 	.word	0x20000230
 800173c:	200003a8 	.word	0x200003a8
 8001740:	40590000 	.word	0x40590000
 8001744:	66666667 	.word	0x66666667
 8001748:	42c80000 	.word	0x42c80000
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0bc      	sub	sp, #240	; 0xf0
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800175a:	2244      	movs	r2, #68	; 0x44
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fad4 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2294      	movs	r2, #148	; 0x94
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fac6 	bl	8007d0c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001780:	2000      	movs	r0, #0
 8001782:	f003 ff23 	bl	80055cc <HAL_PWREx_ControlVoltageScaling>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800178c:	f000 fcb8 	bl	8002100 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001790:	f003 feec 	bl	800556c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001794:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <SystemClock_Config+0x158>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a43      	ldr	r2, [pc, #268]	; (80018a8 <SystemClock_Config+0x158>)
 800179c:	f023 0318 	bic.w	r3, r3, #24
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017a4:	2314      	movs	r3, #20
 80017a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80017d4:	233c      	movs	r3, #60	; 0x3c
 80017d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 ff8f 	bl	8005714 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017fc:	f000 fc80 	bl	8002100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001800:	230f      	movs	r3, #15
 8001802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2303      	movs	r3, #3
 8001808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800181e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001822:	2105      	movs	r1, #5
 8001824:	4618      	mov	r0, r3
 8001826:	f004 fb9b 	bl	8005f60 <HAL_RCC_ClockConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001830:	f000 fc66 	bl	8002100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <SystemClock_Config+0x15c>)
 8001836:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001838:	2300      	movs	r3, #0
 800183a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001840:	2300      	movs	r3, #0
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001844:	2300      	movs	r3, #0
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001848:	2300      	movs	r3, #0
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001864:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001868:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001872:	2318      	movs	r3, #24
 8001874:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001876:	2302      	movs	r3, #2
 8001878:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001882:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001886:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fe18 	bl	80064c0 <HAL_RCCEx_PeriphCLKConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001896:	f000 fc33 	bl	8002100 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800189a:	f005 f939 	bl	8006b10 <HAL_RCCEx_EnableMSIPLLMode>
}
 800189e:	bf00      	nop
 80018a0:	37f0      	adds	r7, #240	; 0xf0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	010160cf 	.word	0x010160cf

080018b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_ADC1_Init+0xbc>)
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <MX_ADC1_Init+0xc0>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <MX_ADC1_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <MX_ADC1_Init+0xbc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <MX_ADC1_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_ADC1_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_ADC1_Init+0xbc>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_ADC1_Init+0xbc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_ADC1_Init+0xbc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_ADC1_Init+0xbc>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_ADC1_Init+0xbc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_ADC1_Init+0xbc>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_ADC1_Init+0xbc>)
 800190c:	2200      	movs	r2, #0
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_ADC1_Init+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_ADC1_Init+0xbc>)
 800191a:	2200      	movs	r2, #0
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <MX_ADC1_Init+0xbc>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_ADC1_Init+0xbc>)
 8001928:	f001 fa8a 	bl	8002e40 <HAL_ADC_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001932:	f000 fbe5 	bl	8002100 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_ADC1_Init+0xc4>)
 8001938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800193a:	2306      	movs	r3, #6
 800193c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001942:	237f      	movs	r3, #127	; 0x7f
 8001944:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001946:	2304      	movs	r3, #4
 8001948:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_ADC1_Init+0xbc>)
 8001954:	f001 fbbe 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800195e:	f000 fbcf 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000464 	.word	0x20000464
 8001970:	50040000 	.word	0x50040000
 8001974:	04300002 	.word	0x04300002

08001978 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 800197e:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <MX_DFSDM1_Init+0x6c>)
 8001980:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 8001984:	2201      	movs	r2, #1
 8001986:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 8001990:	2202      	movs	r2, #2
 8001992:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019ae:	2204      	movs	r2, #4
 80019b0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_DFSDM1_Init+0x68>)
 80019cc:	f002 f88e 	bl	8003aec <HAL_DFSDM_ChannelInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80019d6:	f000 fb93 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200006d4 	.word	0x200006d4
 80019e4:	40016040 	.word	0x40016040

080019e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C2_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C2_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C2_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a24:	f002 fb3b 	bl	800409e <HAL_I2C_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a2e:	f000 fb67 	bl	8002100 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a36:	f003 f80b 	bl	8004a50 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a40:	f000 fb5e 	bl	8002100 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_I2C2_Init+0x74>)
 8001a48:	f003 f84d 	bl	8004ae6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a52:	f000 fb55 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000035c 	.word	0x2000035c
 8001a60:	40005800 	.word	0x40005800
 8001a64:	307075b1 	.word	0x307075b1

08001a68 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <MX_OCTOSPI1_Init+0xa8>)
 8001a80:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a94:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a98:	2220      	movs	r2, #32
 8001a9a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001ac8:	2208      	movs	r2, #8
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001ace:	f003 f857 	bl	8004b80 <HAL_OSPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001ad8:	f000 fb12 	bl	8002100 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001ae4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ae8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_OCTOSPI1_Init+0xa4>)
 8001af4:	f003 f8fe 	bl	8004cf4 <HAL_OSPIM_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001afe:	f000 faff 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000030c 	.word	0x2000030c
 8001b10:	a0001000 	.word	0xa0001000

08001b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <MX_SPI1_Init+0x78>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b74:	f005 f9bc 	bl	8006ef0 <HAL_SPI_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b7e:	f000 fabf 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200005e4 	.word	0x200005e4
 8001b8c:	40013000 	.word	0x40013000

08001b90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_SPI3_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001baa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bde:	2207      	movs	r2, #7
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_SPI3_Init+0x74>)
 8001bf0:	f005 f97e 	bl	8006ef0 <HAL_SPI_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f000 fa81 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000400 	.word	0x20000400
 8001c08:	40003c00 	.word	0x40003c00

08001c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <MX_UART4_Init+0x94>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c56:	f005 f9ee 	bl	8007036 <HAL_UART_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c60:	f000 fa4e 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	480d      	ldr	r0, [pc, #52]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c68:	f005 ff41 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c72:	f000 fa45 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c7a:	f005 ff76 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 fa3c 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_UART4_Init+0x90>)
 8001c8a:	f005 fef7 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 fa34 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000558 	.word	0x20000558
 8001ca0:	40004c00 	.word	0x40004c00

08001ca4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <MX_USART1_UART_Init+0x94>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cec:	4811      	ldr	r0, [pc, #68]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cee:	f005 f9a2 	bl	8007036 <HAL_UART_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f000 fa02 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d00:	f005 fef5 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d0a:	f000 f9f9 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d12:	f005 ff2a 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f000 f9f0 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d22:	f005 feab 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d2c:	f000 f9e8 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200004cc 	.word	0x200004cc
 8001d38:	40013800 	.word	0x40013800

08001d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d42:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <MX_USART2_UART_Init+0x98>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d6c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d88:	f005 f955 	bl	8007036 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001d92:	f000 f9b5 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d96:	2100      	movs	r1, #0
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001d9a:	f005 fea8 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001da4:	f000 f9ac 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da8:	2100      	movs	r1, #0
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001dac:	f005 fedd 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001db6:	f000 f9a3 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_USART2_UART_Init+0x94>)
 8001dbc:	f005 fe5e 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001dc6:	f000 f99b 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000648 	.word	0x20000648
 8001dd4:	40004400 	.word	0x40004400

08001dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <MX_USART3_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e22:	f005 f908 	bl	8007036 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 f968 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e34:	f005 fe5b 	bl	8007aee <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 f95f 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e46:	f005 fe90 	bl	8007b6a <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 f956 	bl	8002100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_USART3_UART_Init+0x90>)
 8001e56:	f005 fe11 	bl	8007a7c <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f000 f94e 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000280 	.word	0x20000280
 8001e6c:	40004800 	.word	0x40004800

08001e70 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a93      	ldr	r2, [pc, #588]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a8d      	ldr	r2, [pc, #564]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a87      	ldr	r2, [pc, #540]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a81      	ldr	r2, [pc, #516]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a7b      	ldr	r2, [pc, #492]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <MX_GPIO_Init+0x268>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f240 1105 	movw	r1, #261	; 0x105
 8001f2c:	486f      	ldr	r0, [pc, #444]	; (80020ec <MX_GPIO_Init+0x26c>)
 8001f2e:	f002 f87b 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001f32:	2200      	movs	r2, #0
 8001f34:	f248 111c 	movw	r1, #33052	; 0x811c
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f002 f874 	bl	8004028 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001f40:	2200      	movs	r2, #0
 8001f42:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001f46:	486a      	ldr	r0, [pc, #424]	; (80020f0 <MX_GPIO_Init+0x270>)
 8001f48:	f002 f86e 	bl	8004028 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f242 0183 	movw	r1, #8323	; 0x2083
 8001f52:	4868      	ldr	r0, [pc, #416]	; (80020f4 <MX_GPIO_Init+0x274>)
 8001f54:	f002 f868 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001f5e:	4866      	ldr	r0, [pc, #408]	; (80020f8 <MX_GPIO_Init+0x278>)
 8001f60:	f002 f862 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001f64:	f240 1305 	movw	r3, #261	; 0x105
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	485b      	ldr	r0, [pc, #364]	; (80020ec <MX_GPIO_Init+0x26c>)
 8001f7e:	f001 fec1 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001f82:	237a      	movs	r3, #122	; 0x7a
 8001f84:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <MX_GPIO_Init+0x27c>)
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4855      	ldr	r0, [pc, #340]	; (80020ec <MX_GPIO_Init+0x26c>)
 8001f96:	f001 feb5 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001f9a:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <MX_GPIO_Init+0x27c>)
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4852      	ldr	r0, [pc, #328]	; (80020f8 <MX_GPIO_Init+0x278>)
 8001fb0:	f001 fea8 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001fb4:	f248 131c 	movw	r3, #33052	; 0x811c
 8001fb8:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f001 fe98 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <MX_GPIO_Init+0x27c>)
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4842      	ldr	r0, [pc, #264]	; (80020f0 <MX_GPIO_Init+0x270>)
 8001fe8:	f001 fe8c 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4619      	mov	r1, r3
 8002006:	483a      	ldr	r0, [pc, #232]	; (80020f0 <MX_GPIO_Init+0x270>)
 8002008:	f001 fe7c 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800200c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002010:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4832      	ldr	r0, [pc, #200]	; (80020f0 <MX_GPIO_Init+0x270>)
 8002026:	f001 fe6d 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800202a:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800202e:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <MX_GPIO_Init+0x27c>)
 8002032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4619      	mov	r1, r3
 800203e:	482d      	ldr	r0, [pc, #180]	; (80020f4 <MX_GPIO_Init+0x274>)
 8002040:	f001 fe60 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002044:	f242 0383 	movw	r3, #8323	; 0x2083
 8002048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204a:	2301      	movs	r3, #1
 800204c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	4825      	ldr	r0, [pc, #148]	; (80020f4 <MX_GPIO_Init+0x274>)
 800205e:	f001 fe51 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002062:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	481f      	ldr	r0, [pc, #124]	; (80020f8 <MX_GPIO_Init+0x278>)
 800207c:	f001 fe42 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002098:	f001 fe34 	bl	8003d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800209c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020ae:	230a      	movs	r3, #10
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020bc:	f001 fe22 	bl	8003d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2017      	movs	r0, #23
 80020c6:	f001 fcda 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ca:	2017      	movs	r0, #23
 80020cc:	f001 fcf3 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2028      	movs	r0, #40	; 0x28
 80020d6:	f001 fcd2 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020da:	2028      	movs	r0, #40	; 0x28
 80020dc:	f001 fceb 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 80020e0:	bf00      	nop
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48001000 	.word	0x48001000
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	48000800 	.word	0x48000800
 80020fc:	10110000 	.word	0x10110000

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002106:	e7fe      	b.n	8002106 <Error_Handler+0x6>

08002108 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af04      	add	r7, sp, #16
 800210e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002110:	2364      	movs	r3, #100	; 0x64
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	2301      	movs	r3, #1
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	f107 030f 	add.w	r3, r7, #15
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	2275      	movs	r2, #117	; 0x75
 8002122:	21d0      	movs	r1, #208	; 0xd0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f002 f95d 	bl	80043e4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b68      	cmp	r3, #104	; 0x68
 800212e:	d13d      	bne.n	80021ac <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	f107 030e 	add.w	r3, r7, #14
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	226b      	movs	r2, #107	; 0x6b
 8002146:	21d0      	movs	r1, #208	; 0xd0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f002 f837 	bl	80041bc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800214e:	2307      	movs	r3, #7
 8002150:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002152:	2364      	movs	r3, #100	; 0x64
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2301      	movs	r3, #1
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f107 030e 	add.w	r3, r7, #14
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2219      	movs	r2, #25
 8002164:	21d0      	movs	r1, #208	; 0xd0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f002 f828 	bl	80041bc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800216c:	2300      	movs	r3, #0
 800216e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002170:	2364      	movs	r3, #100	; 0x64
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	2301      	movs	r3, #1
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	f107 030e 	add.w	r3, r7, #14
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2301      	movs	r3, #1
 8002180:	221c      	movs	r2, #28
 8002182:	21d0      	movs	r1, #208	; 0xd0
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f002 f819 	bl	80041bc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800218a:	2300      	movs	r3, #0
 800218c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800218e:	2364      	movs	r3, #100	; 0x64
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	2301      	movs	r3, #1
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	f107 030e 	add.w	r3, r7, #14
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2301      	movs	r3, #1
 800219e:	221b      	movs	r2, #27
 80021a0:	21d0      	movs	r1, #208	; 0xd0
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f002 f80a 	bl	80041bc <HAL_I2C_Mem_Write>
        return 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <MPU6050_Init+0xa6>
    }
    return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80021c2:	2364      	movs	r3, #100	; 0x64
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	2306      	movs	r3, #6
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	223b      	movs	r2, #59	; 0x3b
 80021d4:	21d0      	movs	r1, #208	; 0xd0
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f002 f904 	bl	80043e4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80021dc:	7a3b      	ldrb	r3, [r7, #8]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	7a7b      	ldrb	r3, [r7, #9]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80021ee:	7abb      	ldrb	r3, [r7, #10]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002200:	7b3b      	ldrb	r3, [r7, #12]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	7b7b      	ldrb	r3, [r7, #13]
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21a      	sxth	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f94b 	bl	80004b4 <__aeabi_i2d>
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MPU6050_Read_Accel+0xd0>)
 8002224:	f7fe fada 	bl	80007dc <__aeabi_ddiv>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	e9c2 3402 	strd	r3, r4, [r2, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f93b 	bl	80004b4 <__aeabi_i2d>
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MPU6050_Read_Accel+0xd0>)
 8002244:	f7fe faca 	bl	80007dc <__aeabi_ddiv>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f92b 	bl	80004b4 <__aeabi_i2d>
 800225e:	a408      	add	r4, pc, #32	; (adr r4, 8002280 <MPU6050_Read_Accel+0xc8>)
 8002260:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002264:	461a      	mov	r2, r3
 8002266:	4623      	mov	r3, r4
 8002268:	f7fe fab8 	bl	80007dc <__aeabi_ddiv>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	00000000 	.word	0x00000000
 8002284:	40cc2900 	.word	0x40cc2900
 8002288:	40d00000 	.word	0x40d00000

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_MspInit+0x44>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_MspInit+0x44>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6613      	str	r3, [r2, #96]	; 0x60
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_MspInit+0x44>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_MspInit+0x44>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_MspInit+0x44>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_MspInit+0x44>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_ADC_MspInit+0x74>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d123      	bne.n	800233e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_ADC_MspInit+0x78>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <HAL_ADC_MspInit+0x78>)
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_ADC_MspInit+0x78>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_ADC_MspInit+0x78>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002326:	233f      	movs	r3, #63	; 0x3f
 8002328:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800232a:	230b      	movs	r3, #11
 800232c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_ADC_MspInit+0x7c>)
 800233a:	f001 fce3 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	50040000 	.word	0x50040000
 800234c:	40021000 	.word	0x40021000
 8002350:	48000800 	.word	0x48000800

08002354 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_DFSDM_ChannelMspInit+0x84>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d12d      	bne.n	80023d0 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 8002376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	6613      	str	r3, [r2, #96]	; 0x60
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 8002382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_DFSDM_ChannelMspInit+0x88>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80023a4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023b6:	2306      	movs	r3, #6
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80023c2:	f001 fc9f 	bl	8003d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a02      	ldr	r2, [pc, #8]	; (80023d8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80023ce:	6013      	str	r3, [r2, #0]
  }

}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200001fc 	.word	0x200001fc
 80023dc:	40021000 	.word	0x40021000
 80023e0:	48001000 	.word	0x48001000

080023e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_OSPI_MspInit+0x94>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d134      	bne.n	8002470 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <HAL_OSPI_MspInit+0x98>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6513      	str	r3, [r2, #80]	; 0x50
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_OSPI_MspInit+0x98>)
 800242c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_OSPI_MspInit+0x98>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_OSPI_MspInit+0x98>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800244e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002452:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002460:	230a      	movs	r3, #10
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_OSPI_MspInit+0x9c>)
 800246c:	f001 fc4a 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	a0001000 	.word	0xa0001000
 800247c:	40021000 	.word	0x40021000
 8002480:	48001000 	.word	0x48001000

08002484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_SPI_MspInit+0xdc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d129      	bne.n	80024fa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80024d6:	23e0      	movs	r3, #224	; 0xe0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e6:	2305      	movs	r3, #5
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f001 fc06 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024f8:	e02d      	b.n	8002556 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_SPI_MspInit+0xe4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d128      	bne.n	8002556 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_SPI_MspInit+0xe0>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002534:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002546:	2306      	movs	r3, #6
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <HAL_SPI_MspInit+0xe8>)
 8002552:	f001 fbd7 	bl	8003d04 <HAL_GPIO_Init>
}
 8002556:	bf00      	nop
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40013000 	.word	0x40013000
 8002564:	40021000 	.word	0x40021000
 8002568:	40003c00 	.word	0x40003c00
 800256c:	48000800 	.word	0x48000800

08002570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b090      	sub	sp, #64	; 0x40
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a5d      	ldr	r2, [pc, #372]	; (8002704 <HAL_UART_MspInit+0x194>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d129      	bne.n	80025e6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4a5c      	ldr	r2, [pc, #368]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800259c:	6593      	str	r3, [r2, #88]	; 0x58
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80025c2:	2303      	movs	r3, #3
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025d2:	2308      	movs	r3, #8
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f001 fb90 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025e4:	e089      	b.n	80026fa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_UART_MspInit+0x19c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d128      	bne.n	8002642 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f0:	4b45      	ldr	r3, [pc, #276]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	4a44      	ldr	r2, [pc, #272]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fa:	6613      	str	r3, [r2, #96]	; 0x60
 80025fc:	4b42      	ldr	r3, [pc, #264]	; (8002708 <HAL_UART_MspInit+0x198>)
 80025fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_UART_MspInit+0x198>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	4a3e      	ldr	r2, [pc, #248]	; (8002708 <HAL_UART_MspInit+0x198>)
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002614:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002630:	2307      	movs	r3, #7
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002638:	4619      	mov	r1, r3
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <HAL_UART_MspInit+0x1a0>)
 800263c:	f001 fb62 	bl	8003d04 <HAL_GPIO_Init>
}
 8002640:	e05b      	b.n	80026fa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <HAL_UART_MspInit+0x1a4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d128      	bne.n	800269e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_UART_MspInit+0x198>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	6593      	str	r3, [r2, #88]	; 0x58
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_UART_MspInit+0x198>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_UART_MspInit+0x198>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_UART_MspInit+0x198>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800267c:	2378      	movs	r3, #120	; 0x78
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800268c:	2307      	movs	r3, #7
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002694:	4619      	mov	r1, r3
 8002696:	4820      	ldr	r0, [pc, #128]	; (8002718 <HAL_UART_MspInit+0x1a8>)
 8002698:	f001 fb34 	bl	8003d04 <HAL_GPIO_Init>
}
 800269c:	e02d      	b.n	80026fa <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_UART_MspInit+0x1ac>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d128      	bne.n	80026fa <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b2:	6593      	str	r3, [r2, #88]	; 0x58
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	4a10      	ldr	r2, [pc, #64]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_UART_MspInit+0x198>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80026d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026ea:	2307      	movs	r3, #7
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f2:	4619      	mov	r1, r3
 80026f4:	4808      	ldr	r0, [pc, #32]	; (8002718 <HAL_UART_MspInit+0x1a8>)
 80026f6:	f001 fb05 	bl	8003d04 <HAL_GPIO_Init>
}
 80026fa:	bf00      	nop
 80026fc:	3740      	adds	r7, #64	; 0x40
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40004c00 	.word	0x40004c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013800 	.word	0x40013800
 8002710:	48000400 	.word	0x48000400
 8002714:	40004400 	.word	0x40004400
 8002718:	48000c00 	.word	0x48000c00
 800271c:	40004800 	.word	0x40004800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <NMI_Handler+0x4>

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler+0x4>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <UsageFault_Handler+0x4>

0800273e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f000 f986 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002778:	2020      	movs	r0, #32
 800277a:	f001 fc6d 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800277e:	2040      	movs	r0, #64	; 0x40
 8002780:	f001 fc6a 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002784:	2080      	movs	r0, #128	; 0x80
 8002786:	f001 fc67 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800278a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800278e:	f001 fc63 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}

08002796 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800279a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800279e:	f001 fc5b 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80027a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80027a6:	f001 fc57 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80027aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027ae:	f001 fc53 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027b6:	f001 fc4f 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80027ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027be:	f001 fc4b 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80027c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80027c6:	f001 fc47 	bl	8004058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e00a      	b.n	80027f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e0:	f3af 8000 	nop.w
 80027e4:	4601      	mov	r1, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	60ba      	str	r2, [r7, #8]
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dbf0      	blt.n	80027e0 <_read+0x12>
	}

return len;
 80027fe:	687b      	ldr	r3, [r7, #4]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e009      	b.n	800282e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc0e 	bl	8001044 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	dbf1      	blt.n	800281a <_write+0x12>
	}
	return len;
 8002836:	687b      	ldr	r3, [r7, #4]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_close>:

int _close(int file)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002868:	605a      	str	r2, [r3, #4]
	return 0;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_isatty>:

int _isatty(int file)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
	return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f005 f9ee 	bl	8007cb8 <__errno>
 80028dc:	4602      	mov	r2, r0
 80028de:	230c      	movs	r3, #12
 80028e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200a0000 	.word	0x200a0000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000200 	.word	0x20000200
 8002910:	20000718 	.word	0x20000718

08002914 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <SystemInit+0x64>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <SystemInit+0x64>)
 8002920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <SystemInit+0x68>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <SystemInit+0x68>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <SystemInit+0x68>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <SystemInit+0x68>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a0f      	ldr	r2, [pc, #60]	; (800297c <SystemInit+0x68>)
 8002940:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002944:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002948:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <SystemInit+0x68>)
 800294c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002950:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <SystemInit+0x68>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <SystemInit+0x68>)
 8002958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <SystemInit+0x68>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SystemInit+0x64>)
 8002966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800296a:	609a      	str	r2, [r3, #8]
#endif
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00
 800297c:	40021000 	.word	0x40021000

08002980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002984:	f7ff ffc6 	bl	8002914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002988:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800298a:	e003      	b.n	8002994 <LoopCopyDataInit>

0800298c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800298e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002990:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002992:	3104      	adds	r1, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002994:	480a      	ldr	r0, [pc, #40]	; (80029c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002998:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800299a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800299c:	d3f6      	bcc.n	800298c <CopyDataInit>
	ldr	r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029a0:	e002      	b.n	80029a8 <LoopFillZerobss>

080029a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029a4:	f842 3b04 	str.w	r3, [r2], #4

080029a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <LoopForever+0x16>)
	cmp	r2, r3
 80029aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029ac:	d3f9      	bcc.n	80029a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ae:	f005 f989 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029b2:	f7fe fca3 	bl	80012fc <main>

080029b6 <LoopForever>:

LoopForever:
    b LoopForever
 80029b6:	e7fe      	b.n	80029b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029b8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80029bc:	0800b438 	.word	0x0800b438
	ldr	r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029c4:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80029c8:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80029cc:	20000714 	.word	0x20000714

080029d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC1_IRQHandler>

080029d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f001 f843 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f80e 	bl	8002a04 <HAL_InitTick>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	71fb      	strb	r3, [r7, #7]
 80029f2:	e001      	b.n	80029f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029f4:	f7ff fc4a 	bl	800228c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f8:	79fb      	ldrb	r3, [r7, #7]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_InitTick+0x6c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_InitTick+0x70>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_InitTick+0x6c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f84f 	bl	8003ad2 <HAL_SYSTICK_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d809      	bhi.n	8002a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f001 f819 	bl	8003a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_InitTick+0x74>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e007      	b.n	8002a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e004      	b.n	8002a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e001      	b.n	8002a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000008 	.word	0x20000008
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	2000070c 	.word	0x2000070c

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	2000070c 	.word	0x2000070c

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_Delay+0x40>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000008 	.word	0x20000008

08002b00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3360      	adds	r3, #96	; 0x60
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <LL_ADC_SetOffset+0x44>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	03fff000 	.word	0x03fff000

08002bb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	615a      	str	r2, [r3, #20]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3330      	adds	r3, #48	; 0x30
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	4413      	add	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	211f      	movs	r1, #31
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 011f 	and.w	r1, r3, #31
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	0d1b      	lsrs	r3, r3, #20
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2107      	movs	r1, #7
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0d1b      	lsrs	r3, r3, #20
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0318 	and.w	r3, r3, #24
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d0c:	40d9      	lsrs	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	400b      	ands	r3, r1
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	0007ffff 	.word	0x0007ffff

08002d30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6093      	str	r3, [r2, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_IsEnabled+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_IsEnabled+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e12d      	b.n	80030b6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fa33 	bl	80022d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff67 	bl	8002d54 <LL_ADC_IsDeepPowerDownEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff4d 	bl	8002d30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff82 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff66 	bl	8002d7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002eb0:	4b83      	ldr	r3, [pc, #524]	; (80030c0 <HAL_ADC_Init+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a83      	ldr	r2, [pc, #524]	; (80030c4 <HAL_ADC_Init+0x284>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec0:	e002      	b.n	8002ec8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f9      	bne.n	8002ec2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff66 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff77 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 80c8 	bne.w	80030a4 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80c4 	bne.w	80030a4 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff4b 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	4862      	ldr	r0, [pc, #392]	; (80030c8 <HAL_ADC_Init+0x288>)
 8002f3e:	f7ff ff45 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	485f      	ldr	r0, [pc, #380]	; (80030cc <HAL_ADC_Init+0x28c>)
 8002f50:	f7ff fdd6 	bl	8002b00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7e5b      	ldrb	r3, [r3, #25]
 8002f58:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f5e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f64:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f6a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f72:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	3b01      	subs	r3, #1
 8002f88:	045b      	lsls	r3, r3, #17
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_ADC_Init+0x290>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff14 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002fca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff21 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 8002fd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d140      	bne.n	8003060 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13d      	bne.n	8003060 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7e1b      	ldrb	r3, [r3, #24]
 8002fec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003006:	f023 0306 	bic.w	r3, r3, #6
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	430b      	orrs	r3, r1
 8003012:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301a:	2b01      	cmp	r3, #1
 800301c:	d118      	bne.n	8003050 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003040:	430a      	orrs	r2, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e007      	b.n	8003060 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10c      	bne.n	8003082 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f023 010f 	bic.w	r1, r3, #15
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
 8003080:	e007      	b.n	8003092 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 020f 	bic.w	r2, r2, #15
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58
 80030a2:	e007      	b.n	80030b4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000
 80030c4:	053e2d63 	.word	0x053e2d63
 80030c8:	50040000 	.word	0x50040000
 80030cc:	50040300 	.word	0x50040300
 80030d0:	fff0c007 	.word	0xfff0c007

080030d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0b6      	sub	sp, #216	; 0xd8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x22>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e3d4      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x7cc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fe75 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 83b9 	bne.w	8003882 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d824      	bhi.n	8003162 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	3b02      	subs	r3, #2
 800311e:	2b03      	cmp	r3, #3
 8003120:	d81b      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x86>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_ADC_ConfigChannel+0x54>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003139 	.word	0x08003139
 800312c:	08003141 	.word	0x08003141
 8003130:	08003149 	.word	0x08003149
 8003134:	08003151 	.word	0x08003151
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	220c      	movs	r2, #12
 800313c:	605a      	str	r2, [r3, #4]
          break;
 800313e:	e011      	b.n	8003164 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2212      	movs	r2, #18
 8003144:	605a      	str	r2, [r3, #4]
          break;
 8003146:	e00d      	b.n	8003164 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2218      	movs	r2, #24
 800314c:	605a      	str	r2, [r3, #4]
          break;
 800314e:	e009      	b.n	8003164 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003156:	605a      	str	r2, [r3, #4]
          break;
 8003158:	e004      	b.n	8003164 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2206      	movs	r2, #6
 800315e:	605a      	str	r2, [r3, #4]
          break;
 8003160:	e000      	b.n	8003164 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003162:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	f7ff fd61 	bl	8002c38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe39 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8003180:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fe45 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 800318e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 81c1 	bne.w	800351e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800319c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 81bc 	bne.w	800351e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ae:	d10f      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7ff fd68 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fd22 	bl	8002c12 <LL_ADC_SetSamplingTimeCommonConfig>
 80031ce:	e00e      	b.n	80031ee <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	461a      	mov	r2, r3
 80031de:	f7ff fd57 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd12 	bl	8002c12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d00a      	beq.n	8003226 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6919      	ldr	r1, [r3, #16]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003220:	f7ff fca2 	bl	8002b68 <LL_ADC_SetOffset>
 8003224:	e17b      	b.n	800351e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fcbf 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x17e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fcb4 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	0e9b      	lsrs	r3, r3, #26
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	e01e      	b.n	8003290 <HAL_ADC_ConfigChannel+0x1bc>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fca9 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003274:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e004      	b.n	800328e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1d4>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	e018      	b.n	80032da <HAL_ADC_ConfigChannel+0x206>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e004      	b.n	80032da <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80032d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032da:	429a      	cmp	r2, r3
 80032dc:	d106      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fc78 	bl	8002bdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fc5c 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x244>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2101      	movs	r1, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fc51 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	f003 021f 	and.w	r2, r3, #31
 8003316:	e01e      	b.n	8003356 <HAL_ADC_ConfigChannel+0x282>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fc46 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800333a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800333e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e004      	b.n	8003354 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800334a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_ADC_ConfigChannel+0x29a>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	e018      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x2cc>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800338a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003392:	2320      	movs	r3, #32
 8003394:	e004      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fc15 	bl	8002bdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fbf9 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_ADC_ConfigChannel+0x30a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fbee 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	e01e      	b.n	800341c <HAL_ADC_ConfigChannel+0x348>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fbe3 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003404:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e004      	b.n	800341a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x360>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	e016      	b.n	8003462 <HAL_ADC_ConfigChannel+0x38e>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e004      	b.n	8003462 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003462:	429a      	cmp	r2, r3
 8003464:	d106      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fbb4 	bl	8002bdc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2103      	movs	r1, #3
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fb98 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x3cc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2103      	movs	r1, #3
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fb8d 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 021f 	and.w	r2, r3, #31
 800349e:	e017      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x3fc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2103      	movs	r1, #3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fb82 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80034c2:	2320      	movs	r3, #32
 80034c4:	e003      	b.n	80034ce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80034c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x414>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	e011      	b.n	800350c <HAL_ADC_ConfigChannel+0x438>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800350c:	429a      	cmp	r2, r3
 800350e:	d106      	bne.n	800351e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2200      	movs	r2, #0
 8003516:	2103      	movs	r1, #3
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fb5f 	bl	8002bdc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fc52 	bl	8002dcc <LL_ADC_IsEnabled>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 8140 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	461a      	mov	r2, r3
 800353e:	f7ff fbd3 	bl	8002ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a8f      	ldr	r2, [pc, #572]	; (8003784 <HAL_ADC_ConfigChannel+0x6b0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	f040 8131 	bne.w	80037b0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10b      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x4a2>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	3301      	adds	r3, #1
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b09      	cmp	r3, #9
 800356c:	bf94      	ite	ls
 800356e:	2301      	movls	r3, #1
 8003570:	2300      	movhi	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	e019      	b.n	80035aa <HAL_ADC_ConfigChannel+0x4d6>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e003      	b.n	800359a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d079      	beq.n	80036a2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x4f6>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	3301      	adds	r3, #1
 80035c2:	069b      	lsls	r3, r3, #26
 80035c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035c8:	e015      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x522>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e003      	b.n	80035ee <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80035e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	069b      	lsls	r3, r3, #26
 80035f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x542>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	3301      	adds	r3, #1
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	e017      	b.n	8003646 <HAL_ADC_ConfigChannel+0x572>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e003      	b.n	800363a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	ea42 0103 	orr.w	r1, r2, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_ADC_ConfigChannel+0x598>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	3301      	adds	r3, #1
 800365e:	f003 021f 	and.w	r2, r3, #31
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	051b      	lsls	r3, r3, #20
 800366a:	e018      	b.n	800369e <HAL_ADC_ConfigChannel+0x5ca>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800367a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369e:	430b      	orrs	r3, r1
 80036a0:	e081      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <HAL_ADC_ConfigChannel+0x5ea>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e9b      	lsrs	r3, r3, #26
 80036b4:	3301      	adds	r3, #1
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036bc:	e015      	b.n	80036ea <HAL_ADC_ConfigChannel+0x616>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	069b      	lsls	r3, r3, #26
 80036e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_ADC_ConfigChannel+0x636>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	0e9b      	lsrs	r3, r3, #26
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	e017      	b.n	800373a <HAL_ADC_ConfigChannel+0x666>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	61fb      	str	r3, [r7, #28]
  return result;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003722:	2320      	movs	r3, #32
 8003724:	e003      	b.n	800372e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	ea42 0103 	orr.w	r1, r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x692>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0e9b      	lsrs	r3, r3, #26
 8003750:	3301      	adds	r3, #1
 8003752:	f003 021f 	and.w	r2, r3, #31
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	3b1e      	subs	r3, #30
 800375e:	051b      	lsls	r3, r3, #20
 8003760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003764:	e01e      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x6d0>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	613b      	str	r3, [r7, #16]
  return result;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e006      	b.n	8003790 <HAL_ADC_ConfigChannel+0x6bc>
 8003782:	bf00      	nop
 8003784:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	3b1e      	subs	r3, #30
 800379e:	051b      	lsls	r3, r3, #20
 80037a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a4:	430b      	orrs	r3, r1
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6892      	ldr	r2, [r2, #8]
 80037aa:	4619      	mov	r1, r3
 80037ac:	f7ff fa70 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <HAL_ADC_ConfigChannel+0x7d4>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d06b      	beq.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037bc:	483b      	ldr	r0, [pc, #236]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 80037be:	f7ff f9c5 	bl	8002b4c <LL_ADC_GetCommonPathInternalCh>
 80037c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_ADC_ConfigChannel+0x7dc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d126      	bne.n	800381e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d120      	bne.n	800381e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <HAL_ADC_ConfigChannel+0x7e0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d156      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ee:	4619      	mov	r1, r3
 80037f0:	482e      	ldr	r0, [pc, #184]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 80037f2:	f7ff f998 	bl	8002b26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037f6:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_ADC_ConfigChannel+0x7e4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <HAL_ADC_ConfigChannel+0x7e8>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	099a      	lsrs	r2, r3, #6
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800380e:	e002      	b.n	8003816 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3b01      	subs	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f9      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800381c:	e03a      	b.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_ADC_ConfigChannel+0x7ec>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d113      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x77c>
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_ADC_ConfigChannel+0x7e0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12a      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003846:	4619      	mov	r1, r3
 8003848:	4818      	ldr	r0, [pc, #96]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 800384a:	f7ff f96c 	bl	8002b26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800384e:	e021      	b.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d11c      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800385a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <HAL_ADC_ConfigChannel+0x7e0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d111      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003878:	4619      	mov	r1, r3
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 800387c:	f7ff f953 	bl	8002b26 <LL_ADC_SetCommonPathInternalCh>
 8003880:	e008      	b.n	8003894 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800389c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	37d8      	adds	r7, #216	; 0xd8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	80080000 	.word	0x80080000
 80038ac:	50040300 	.word	0x50040300
 80038b0:	c7520000 	.word	0xc7520000
 80038b4:	50040000 	.word	0x50040000
 80038b8:	20000000 	.word	0x20000000
 80038bc:	053e2d63 	.word	0x053e2d63
 80038c0:	cb840000 	.word	0xcb840000
 80038c4:	80000001 	.word	0x80000001

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	; (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff3e 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff8e 	bl	80039bc <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff31 	bl	800392c <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa2 	bl	8003a24 <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0ac      	b.n	8003c58 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f8b2 	bl	8003c6c <DFSDM_GetChannelFromInstance>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_DFSDM_ChannelInit+0x174>)
 8003b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e09f      	b.n	8003c58 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fe fc1b 	bl	8002354 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <HAL_DFSDM_ChannelInit+0x178>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a4f      	ldr	r2, [pc, #316]	; (8003c64 <HAL_DFSDM_ChannelInit+0x178>)
 8003b26:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b28:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <HAL_DFSDM_ChannelInit+0x178>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d125      	bne.n	8003b7c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b30:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4c      	ldr	r2, [pc, #304]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b3a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4948      	ldr	r1, [pc, #288]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a46      	ldr	r2, [pc, #280]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b50:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003b54:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d108      	bne.n	8003b70 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b5e:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	493f      	ldr	r1, [pc, #252]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b8a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b9a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ba0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 020f 	bic.w	r2, r2, #15
 8003bb8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003be0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f002 0207 	and.w	r2, r2, #7
 8003c0c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f810 	bl	8003c6c <DFSDM_GetChannelFromInstance>
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_DFSDM_ChannelInit+0x174>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000208 	.word	0x20000208
 8003c64:	20000204 	.word	0x20000204
 8003c68:	40016000 	.word	0x40016000

08003c6c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d102      	bne.n	8003c82 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e02b      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <DFSDM_GetChannelFromInstance+0x80>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d102      	bne.n	8003c90 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e024      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <DFSDM_GetChannelFromInstance+0x84>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d102      	bne.n	8003c9e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e01d      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <DFSDM_GetChannelFromInstance+0x88>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d102      	bne.n	8003cac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e016      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d102      	bne.n	8003cba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003cb4:	2305      	movs	r3, #5
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e00f      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <DFSDM_GetChannelFromInstance+0x90>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d102      	bne.n	8003cc8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e008      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <DFSDM_GetChannelFromInstance+0x94>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d102      	bne.n	8003cd6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003cd0:	2307      	movs	r3, #7
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e001      	b.n	8003cda <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40016000 	.word	0x40016000
 8003cec:	40016020 	.word	0x40016020
 8003cf0:	40016040 	.word	0x40016040
 8003cf4:	40016080 	.word	0x40016080
 8003cf8:	400160a0 	.word	0x400160a0
 8003cfc:	400160c0 	.word	0x400160c0
 8003d00:	400160e0 	.word	0x400160e0

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d12:	e166      	b.n	8003fe2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8158 	beq.w	8003fdc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d00b      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d40:	2b11      	cmp	r3, #17
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d130      	bne.n	8003dae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d82:	2201      	movs	r2, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0201 	and.w	r2, r3, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0xea>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b12      	cmp	r3, #18
 8003dec:	d123      	bne.n	8003e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	6939      	ldr	r1, [r7, #16]
 8003e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80b2 	beq.w	8003fdc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e78:	4b61      	ldr	r3, [pc, #388]	; (8004000 <HAL_GPIO_Init+0x2fc>)
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	4a60      	ldr	r2, [pc, #384]	; (8004000 <HAL_GPIO_Init+0x2fc>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6613      	str	r3, [r2, #96]	; 0x60
 8003e84:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <HAL_GPIO_Init+0x2fc>)
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e90:	4a5c      	ldr	r2, [pc, #368]	; (8004004 <HAL_GPIO_Init+0x300>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eba:	d02b      	beq.n	8003f14 <HAL_GPIO_Init+0x210>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_GPIO_Init+0x304>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d025      	beq.n	8003f10 <HAL_GPIO_Init+0x20c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a51      	ldr	r2, [pc, #324]	; (800400c <HAL_GPIO_Init+0x308>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01f      	beq.n	8003f0c <HAL_GPIO_Init+0x208>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a50      	ldr	r2, [pc, #320]	; (8004010 <HAL_GPIO_Init+0x30c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d019      	beq.n	8003f08 <HAL_GPIO_Init+0x204>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a4f      	ldr	r2, [pc, #316]	; (8004014 <HAL_GPIO_Init+0x310>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_GPIO_Init+0x200>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <HAL_GPIO_Init+0x314>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00d      	beq.n	8003f00 <HAL_GPIO_Init+0x1fc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a4d      	ldr	r2, [pc, #308]	; (800401c <HAL_GPIO_Init+0x318>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <HAL_GPIO_Init+0x1f8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a4c      	ldr	r2, [pc, #304]	; (8004020 <HAL_GPIO_Init+0x31c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_GPIO_Init+0x1f4>
 8003ef4:	2307      	movs	r3, #7
 8003ef6:	e00e      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	e00c      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003efc:	2306      	movs	r3, #6
 8003efe:	e00a      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f00:	2305      	movs	r3, #5
 8003f02:	e008      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f04:	2304      	movs	r3, #4
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e004      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_GPIO_Init+0x212>
 8003f14:	2300      	movs	r3, #0
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	f002 0203 	and.w	r2, r2, #3
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	4093      	lsls	r3, r2
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f26:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_GPIO_Init+0x300>)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f34:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f58:	4a32      	ldr	r2, [pc, #200]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f82:	4a28      	ldr	r2, [pc, #160]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f88:	4b26      	ldr	r3, [pc, #152]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fd6:	4a13      	ldr	r2, [pc, #76]	; (8004024 <HAL_GPIO_Init+0x320>)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f ae91 	bne.w	8003d14 <HAL_GPIO_Init+0x10>
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	40010000 	.word	0x40010000
 8004008:	48000400 	.word	0x48000400
 800400c:	48000800 	.word	0x48000800
 8004010:	48000c00 	.word	0x48000c00
 8004014:	48001000 	.word	0x48001000
 8004018:	48001400 	.word	0x48001400
 800401c:	48001800 	.word	0x48001800
 8004020:	48001c00 	.word	0x48001c00
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004044:	e002      	b.n	800404c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800406e:	4a05      	ldr	r2, [pc, #20]	; (8004084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f806 	bl	8004088 <HAL_GPIO_EXTI_Callback>
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e081      	b.n	80041b4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fc ff47 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2224      	movs	r2, #36	; 0x24
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	e006      	b.n	8004126 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004124:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d104      	bne.n	8004138 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004136:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800415a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	ea42 0103 	orr.w	r1, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69d9      	ldr	r1, [r3, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1a      	ldr	r2, [r3, #32]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f040 80f9 	bne.w	80043d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x34>
 80041ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0ed      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_I2C_Mem_Write+0x4e>
 8004206:	2302      	movs	r3, #2
 8004208:	e0e6      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004212:	f7fe fc47 	bl	8002aa4 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2319      	movs	r3, #25
 800421e:	2201      	movs	r2, #1
 8004220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fac3 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d1      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	; 0x21
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425c:	88f8      	ldrh	r0, [r7, #6]
 800425e:	893a      	ldrh	r2, [r7, #8]
 8004260:	8979      	ldrh	r1, [r7, #10]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	4603      	mov	r3, r0
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f9d3 	bl	8004618 <I2C_RequestMemoryWrite>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0a9      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2bff      	cmp	r3, #255	; 0xff
 800428c:	d90e      	bls.n	80042ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	22ff      	movs	r2, #255	; 0xff
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	b2da      	uxtb	r2, r3
 800429a:	8979      	ldrh	r1, [r7, #10]
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fba5 	bl	80049f4 <I2C_TransferConfig>
 80042aa:	e00f      	b.n	80042cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	8979      	ldrh	r1, [r7, #10]
 80042be:	2300      	movs	r3, #0
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fb94 	bl	80049f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 faad 	bl	8004830 <I2C_WaitOnTXISFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e07b      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d034      	beq.n	8004384 <HAL_I2C_Mem_Write+0x1c8>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d130      	bne.n	8004384 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2200      	movs	r2, #0
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fa3f 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e04d      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	2bff      	cmp	r3, #255	; 0xff
 8004344:	d90e      	bls.n	8004364 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	22ff      	movs	r2, #255	; 0xff
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	b2da      	uxtb	r2, r3
 8004352:	8979      	ldrh	r1, [r7, #10]
 8004354:	2300      	movs	r3, #0
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fb49 	bl	80049f4 <I2C_TransferConfig>
 8004362:	e00f      	b.n	8004384 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004372:	b2da      	uxtb	r2, r3
 8004374:	8979      	ldrh	r1, [r7, #10]
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fb38 	bl	80049f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d19e      	bne.n	80042cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fa8c 	bl	80048b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e01a      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2220      	movs	r2, #32
 80043a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <HAL_I2C_Mem_Write+0x224>)
 80043b6:	400b      	ands	r3, r1
 80043b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	fe00e800 	.word	0xfe00e800

080043e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	460b      	mov	r3, r1
 80043f8:	813b      	strh	r3, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 80fd 	bne.w	8004606 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_I2C_Mem_Read+0x34>
 8004412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0f1      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_I2C_Mem_Read+0x4e>
 800442e:	2302      	movs	r3, #2
 8004430:	e0ea      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800443a:	f7fe fb33 	bl	8002aa4 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f9af 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0d5      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2222      	movs	r2, #34	; 0x22
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004484:	88f8      	ldrh	r0, [r7, #6]
 8004486:	893a      	ldrh	r2, [r7, #8]
 8004488:	8979      	ldrh	r1, [r7, #10]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	4603      	mov	r3, r0
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f913 	bl	80046c0 <I2C_RequestMemoryRead>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0ad      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2bff      	cmp	r3, #255	; 0xff
 80044b4:	d90e      	bls.n	80044d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	22ff      	movs	r2, #255	; 0xff
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	8979      	ldrh	r1, [r7, #10]
 80044c4:	4b52      	ldr	r3, [pc, #328]	; (8004610 <HAL_I2C_Mem_Read+0x22c>)
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fa91 	bl	80049f4 <I2C_TransferConfig>
 80044d2:	e00f      	b.n	80044f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	8979      	ldrh	r1, [r7, #10]
 80044e6:	4b4a      	ldr	r3, [pc, #296]	; (8004610 <HAL_I2C_Mem_Read+0x22c>)
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa80 	bl	80049f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2200      	movs	r2, #0
 80044fc:	2104      	movs	r1, #4
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f956 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07c      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d034      	beq.n	80045b4 <HAL_I2C_Mem_Read+0x1d0>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d130      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2200      	movs	r2, #0
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f927 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04d      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d90e      	bls.n	8004594 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	; 0xff
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	b2da      	uxtb	r2, r3
 8004582:	8979      	ldrh	r1, [r7, #10]
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fa31 	bl	80049f4 <I2C_TransferConfig>
 8004592:	e00f      	b.n	80045b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	8979      	ldrh	r1, [r7, #10]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa20 	bl	80049f4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d19a      	bne.n	80044f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f974 	bl	80048b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01a      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2220      	movs	r2, #32
 80045d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_I2C_Mem_Read+0x230>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	80002400 	.word	0x80002400
 8004614:	fe00e800 	.word	0xfe00e800

08004618 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4603      	mov	r3, r0
 8004628:	817b      	strh	r3, [r7, #10]
 800462a:	460b      	mov	r3, r1
 800462c:	813b      	strh	r3, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	8979      	ldrh	r1, [r7, #10]
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <I2C_RequestMemoryWrite+0xa4>)
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f9d7 	bl	80049f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f8f0 	bl	8004830 <I2C_WaitOnTXISFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e02c      	b.n	80046b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
 800466a:	e015      	b.n	8004698 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8d6 	bl	8004830 <I2C_WaitOnTXISFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e012      	b.n	80046b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800468e:	893b      	ldrh	r3, [r7, #8]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2200      	movs	r2, #0
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f884 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	80002000 	.word	0x80002000

080046c0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	4608      	mov	r0, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	461a      	mov	r2, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	817b      	strh	r3, [r7, #10]
 80046d2:	460b      	mov	r3, r1
 80046d4:	813b      	strh	r3, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	8979      	ldrh	r1, [r7, #10]
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <I2C_RequestMemoryRead+0xa4>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f984 	bl	80049f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	69b9      	ldr	r1, [r7, #24]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f89d 	bl	8004830 <I2C_WaitOnTXISFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e02c      	b.n	800475a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
 8004710:	e015      	b.n	800473e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	b29b      	uxth	r3, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f883 	bl	8004830 <I2C_WaitOnTXISFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e012      	b.n	800475a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2200      	movs	r2, #0
 8004746:	2140      	movs	r1, #64	; 0x40
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f831 	bl	80047b0 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	80002000 	.word	0x80002000

08004768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d103      	bne.n	8004786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d007      	beq.n	80047a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	619a      	str	r2, [r3, #24]
  }
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c0:	e022      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d01e      	beq.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fe f96b 	bl	8002aa4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d113      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e00f      	b.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d0cd      	beq.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800483c:	e02c      	b.n	8004898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f870 	bl	8004928 <I2C_IsAcknowledgeFailed>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e02a      	b.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d01e      	beq.n	8004898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe f923 	bl	8002aa4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e007      	b.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d1cb      	bne.n	800483e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048bc:	e028      	b.n	8004910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f830 	bl	8004928 <I2C_IsAcknowledgeFailed>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e026      	b.n	8004920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d2:	f7fe f8e7 	bl	8002aa4 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d302      	bcc.n	80048e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e007      	b.n	8004920 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d1cf      	bne.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b10      	cmp	r3, #16
 8004940:	d151      	bne.n	80049e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004942:	e022      	b.n	800498a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d01e      	beq.n	800498a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494c:	f7fe f8aa 	bl	8002aa4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <I2C_IsAcknowledgeFailed+0x3a>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d113      	bne.n	800498a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e02e      	b.n	80049e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b20      	cmp	r3, #32
 8004996:	d1d5      	bne.n	8004944 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2210      	movs	r2, #16
 800499e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2220      	movs	r2, #32
 80049a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fedd 	bl	8004768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80049ba:	400b      	ands	r3, r1
 80049bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f043 0204 	orr.w	r2, r3, #4
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	fe00e800 	.word	0xfe00e800

080049f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	4613      	mov	r3, r2
 8004a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	0d5b      	lsrs	r3, r3, #21
 8004a10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <I2C_TransferConfig+0x58>)
 8004a16:	430b      	orrs	r3, r1
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	ea02 0103 	and.w	r1, r2, r3
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a24:	7a7b      	ldrb	r3, [r7, #9]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	03ff63ff 	.word	0x03ff63ff

08004a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d138      	bne.n	8004ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e032      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d139      	bne.n	8004b70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e033      	b.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2224      	movs	r2, #36	; 0x24
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004b8c:	f7fd ff8a 	bl	8002aa4 <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	e092      	b.n	8004cc4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 808b 	bne.w	8004cc4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fc18 	bl	80023e4 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004bb4:	f241 3188 	movw	r1, #5000	; 0x1388
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f88b 	bl	8004cd4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <HAL_OSPI_Init+0x150>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68d1      	ldr	r1, [r2, #12]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6912      	ldr	r2, [r2, #16]
 8004bd0:	3a01      	subs	r2, #1
 8004bd2:	0412      	lsls	r2, r2, #16
 8004bd4:	4311      	orrs	r1, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6952      	ldr	r2, [r2, #20]
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	0212      	lsls	r2, r2, #8
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004be4:	4311      	orrs	r1, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	69d2      	ldr	r2, [r2, #28]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0412      	lsls	r2, r2, #16
 8004bfe:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2120      	movs	r1, #32
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fbb8 	bl	800539c <OSPI_WaitFlagStateUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d146      	bne.n	8004cc4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c6c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d107      	bne.n	8004cac <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0202 	orr.w	r2, r2, #2
 8004caa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb4:	d103      	bne.n	8004cbe <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
 8004cbc:	e002      	b.n	8004cc4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	f8e0f8f4 	.word	0xf8e0f8f4

08004cd4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b092      	sub	sp, #72	; 0x48
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_OSPIM_Config+0x40>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d105      	bne.n	8004d22 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004d20:	e004      	b.n	8004d2c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004d22:	2301      	movs	r3, #1
 8004d24:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d32:	e01f      	b.n	8004d74 <HAL_OSPIM_Config+0x80>
 8004d34:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b2d8      	uxtb	r0, r3
 8004d40:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004d44:	f107 0114 	add.w	r1, r7, #20
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	4619      	mov	r1, r3
 8004d54:	f000 fb5a 	bl	800540c <OSPIM_GetConfig>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2208      	movs	r2, #8
 8004d68:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d9dd      	bls.n	8004d38 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 82fe 	bne.w	8005382 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004d86:	4bcd      	ldr	r3, [pc, #820]	; (80050bc <HAL_OSPIM_Config+0x3c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004d92:	4bca      	ldr	r3, [pc, #808]	; (80050bc <HAL_OSPIM_Config+0x3c8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4ac9      	ldr	r2, [pc, #804]	; (80050bc <HAL_OSPIM_Config+0x3c8>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004d9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004daa:	4bc5      	ldr	r3, [pc, #788]	; (80050c0 <HAL_OSPIM_Config+0x3cc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004db6:	4bc2      	ldr	r3, [pc, #776]	; (80050c0 <HAL_OSPIM_Config+0x3cc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4ac1      	ldr	r2, [pc, #772]	; (80050c0 <HAL_OSPIM_Config+0x3cc>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004dc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004dce:	49bd      	ldr	r1, [pc, #756]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004dd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dde:	4413      	add	r3, r2
 8004de0:	3b2c      	subs	r3, #44	; 0x2c
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	48b5      	ldr	r0, [pc, #724]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3b2c      	subs	r3, #44	; 0x2c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4403      	add	r3, r0
 8004e0c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b34      	subs	r3, #52	; 0x34
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80ac 	beq.w	8004f80 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004e28:	49a6      	ldr	r1, [pc, #664]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e38:	4413      	add	r3, r2
 8004e3a:	3b34      	subs	r3, #52	; 0x34
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	489f      	ldr	r0, [pc, #636]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e56:	4413      	add	r3, r2
 8004e58:	3b34      	subs	r3, #52	; 0x34
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f021 0201 	bic.w	r2, r1, #1
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4403      	add	r3, r0
 8004e66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e76:	4413      	add	r3, r2
 8004e78:	3b30      	subs	r3, #48	; 0x30
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01f      	beq.n	8004ec0 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004e80:	4990      	ldr	r1, [pc, #576]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e90:	4413      	add	r3, r2
 8004e92:	3b30      	subs	r3, #48	; 0x30
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	4889      	ldr	r0, [pc, #548]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b30      	subs	r3, #48	; 0x30
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	f021 0210 	bic.w	r2, r1, #16
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4403      	add	r3, r0
 8004ebe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ece:	4413      	add	r3, r2
 8004ed0:	3b28      	subs	r3, #40	; 0x28
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d023      	beq.n	8004f20 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004ed8:	497a      	ldr	r1, [pc, #488]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ee8:	4413      	add	r3, r2
 8004eea:	3b28      	subs	r3, #40	; 0x28
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	4872      	ldr	r0, [pc, #456]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3b28      	subs	r3, #40	; 0x28
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4403      	add	r3, r0
 8004f1e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f2e:	4413      	add	r3, r2
 8004f30:	3b24      	subs	r3, #36	; 0x24
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d023      	beq.n	8004f80 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004f38:	4962      	ldr	r1, [pc, #392]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f48:	4413      	add	r3, r2
 8004f4a:	3b24      	subs	r3, #36	; 0x24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	6859      	ldr	r1, [r3, #4]
 8004f5a:	485a      	ldr	r0, [pc, #360]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8004f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3b24      	subs	r3, #36	; 0x24
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4403      	add	r3, r0
 8004f7e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004f94:	4413      	add	r3, r2
 8004f96:	3b34      	subs	r3, #52	; 0x34
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4299      	cmp	r1, r3
 8004f9c:	d03c      	beq.n	8005018 <HAL_OSPIM_Config+0x324>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b30      	subs	r3, #48	; 0x30
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4299      	cmp	r1, r3
 8004fba:	d02d      	beq.n	8005018 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6899      	ldr	r1, [r3, #8]
 8004fc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3b2c      	subs	r3, #44	; 0x2c
 8004fd4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	d01e      	beq.n	8005018 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	68d9      	ldr	r1, [r3, #12]
 8004fde:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004fee:	4413      	add	r3, r2
 8004ff0:	3b28      	subs	r3, #40	; 0x28
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	d00f      	beq.n	8005018 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6919      	ldr	r1, [r3, #16]
 8004ffc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800500c:	4413      	add	r3, r2
 800500e:	3b24      	subs	r3, #36	; 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005012:	4299      	cmp	r1, r3
 8005014:	f040 80e0 	bne.w	80051d8 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005018:	492a      	ldr	r1, [pc, #168]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 800501a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800502a:	4413      	add	r3, r2
 800502c:	3b34      	subs	r3, #52	; 0x34
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	4822      	ldr	r0, [pc, #136]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 800503a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800504a:	4413      	add	r3, r2
 800504c:	3b34      	subs	r3, #52	; 0x34
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3b01      	subs	r3, #1
 8005052:	f021 0201 	bic.w	r2, r1, #1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4403      	add	r3, r0
 800505a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800505c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800506c:	4413      	add	r3, r2
 800506e:	3b30      	subs	r3, #48	; 0x30
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d028      	beq.n	80050c8 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005076:	4913      	ldr	r1, [pc, #76]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8005078:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005088:	4413      	add	r3, r2
 800508a:	3b30      	subs	r3, #48	; 0x30
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3b01      	subs	r3, #1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	6859      	ldr	r1, [r3, #4]
 8005096:	480b      	ldr	r0, [pc, #44]	; (80050c4 <HAL_OSPIM_Config+0x3d0>)
 8005098:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050a8:	4413      	add	r3, r2
 80050aa:	3b30      	subs	r3, #48	; 0x30
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	f021 0210 	bic.w	r2, r1, #16
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e005      	b.n	80050c8 <HAL_OSPIM_Config+0x3d4>
 80050bc:	a0001000 	.word	0xa0001000
 80050c0:	a0001400 	.word	0xa0001400
 80050c4:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80050c8:	49b1      	ldr	r1, [pc, #708]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80050ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050da:	4413      	add	r3, r2
 80050dc:	3b2c      	subs	r3, #44	; 0x2c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	6859      	ldr	r1, [r3, #4]
 80050e8:	48a9      	ldr	r0, [pc, #676]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80050ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050fa:	4413      	add	r3, r2
 80050fc:	3b2c      	subs	r3, #44	; 0x2c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3b01      	subs	r3, #1
 8005102:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4403      	add	r3, r0
 800510a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800510c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800511c:	4413      	add	r3, r2
 800511e:	3b28      	subs	r3, #40	; 0x28
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d025      	beq.n	8005172 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005126:	499a      	ldr	r1, [pc, #616]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005128:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005138:	4413      	add	r3, r2
 800513a:	3b28      	subs	r3, #40	; 0x28
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	4891      	ldr	r0, [pc, #580]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800514c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800515c:	4413      	add	r3, r2
 800515e:	3b28      	subs	r3, #40	; 0x28
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3b01      	subs	r3, #1
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4403      	add	r3, r0
 8005170:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005172:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005182:	4413      	add	r3, r2
 8005184:	3b24      	subs	r3, #36	; 0x24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d025      	beq.n	80051d8 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800518c:	4980      	ldr	r1, [pc, #512]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800518e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800519e:	4413      	add	r3, r2
 80051a0:	3b24      	subs	r3, #36	; 0x24
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	4877      	ldr	r0, [pc, #476]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80051b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051c2:	4413      	add	r3, r2
 80051c4:	3b24      	subs	r3, #36	; 0x24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4403      	add	r3, r0
 80051d6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 80051d8:	4a6d      	ldr	r2, [pc, #436]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	3b01      	subs	r3, #1
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	431a      	orrs	r2, r3
 80051f0:	4967      	ldr	r1, [pc, #412]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8005202:	4a63      	ldr	r2, [pc, #396]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3b01      	subs	r3, #1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 0203 	bic.w	r2, r3, #3
 8005214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	431a      	orrs	r2, r3
 800521a:	495d      	ldr	r1, [pc, #372]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3b01      	subs	r3, #1
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8005234:	4a56      	ldr	r2, [pc, #344]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3b01      	subs	r3, #1
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	015b      	lsls	r3, r3, #5
 800524a:	431a      	orrs	r2, r3
 800524c:	4950      	ldr	r1, [pc, #320]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	f042 0210 	orr.w	r2, r2, #16
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800526a:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	3b01      	subs	r3, #1
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	049b      	lsls	r3, r3, #18
 8005284:	431a      	orrs	r2, r3
 8005286:	4942      	ldr	r1, [pc, #264]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	3b01      	subs	r3, #1
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	e01c      	b.n	80052d8 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80052a6:	4a3a      	ldr	r2, [pc, #232]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	069b      	lsls	r3, r3, #26
 80052c0:	431a      	orrs	r2, r3
 80052c2:	4933      	ldr	r1, [pc, #204]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d019      	beq.n	8005318 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	049b      	lsls	r3, r3, #18
 80052fe:	431a      	orrs	r2, r3
 8005300:	4923      	ldr	r1, [pc, #140]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	3b01      	subs	r3, #1
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	e01c      	b.n	8005352 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d018      	beq.n	8005352 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	3b01      	subs	r3, #1
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005338:	069b      	lsls	r3, r3, #26
 800533a:	431a      	orrs	r2, r3
 800533c:	4914      	ldr	r1, [pc, #80]	; (8005390 <HAL_OSPIM_Config+0x69c>)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	3b01      	subs	r3, #1
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005352:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800535e:	4b0d      	ldr	r3, [pc, #52]	; (8005394 <HAL_OSPIM_Config+0x6a0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <HAL_OSPIM_Config+0x6a0>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800536a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <HAL_OSPIM_Config+0x6a4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_OSPIM_Config+0x6a4>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005382:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005386:	4618      	mov	r0, r3
 8005388:	3748      	adds	r7, #72	; 0x48
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	50061c00 	.word	0x50061c00
 8005394:	a0001000 	.word	0xa0001000
 8005398:	a0001400 	.word	0xa0001400

0800539c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80053ac:	e01a      	b.n	80053e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d016      	beq.n	80053e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fd fb75 	bl	8002aa4 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <OSPI_WaitFlagStateUntilTimeout+0x30>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e00e      	b.n	8005402 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1d6      	bne.n	80053ae <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <OSPIM_GetConfig+0x26>
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d802      	bhi.n	8005432 <OSPIM_GetConfig+0x26>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
 8005436:	e08e      	b.n	8005556 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d101      	bne.n	8005460 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 800545c:	4b41      	ldr	r3, [pc, #260]	; (8005564 <OSPIM_GetConfig+0x158>)
 800545e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e074      	b.n	8005550 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005466:	4a40      	ldr	r2, [pc, #256]	; (8005568 <OSPIM_GetConfig+0x15c>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4053      	eors	r3, r2
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4053      	eors	r3, r2
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4053      	eors	r3, r2
 80054c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d018      	beq.n	800550e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4053      	eors	r3, r2
 80054e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d111      	bne.n	800550e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e005      	b.n	800550e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d018      	beq.n	800554a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4053      	eors	r3, r2
 800551e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d111      	bne.n	800554a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	611a      	str	r2, [r3, #16]
 800553c:	e005      	b.n	800554a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d987      	bls.n	8005466 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	04040222 	.word	0x04040222
 8005568:	50061c00 	.word	0x50061c00

0800556c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557a:	6013      	str	r3, [r2, #0]
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40007000 	.word	0x40007000

0800558c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559c:	d102      	bne.n	80055a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800559e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055a2:	e00b      	b.n	80055bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80055a4:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b2:	d102      	bne.n	80055ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80055b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b8:	e000      	b.n	80055bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80055ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40007000 	.word	0x40007000

080055cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d141      	bne.n	800565e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055da:	4b4b      	ldr	r3, [pc, #300]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e6:	d131      	bne.n	800564c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e8:	4b47      	ldr	r3, [pc, #284]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ee:	4a46      	ldr	r2, [pc, #280]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f8:	4b43      	ldr	r3, [pc, #268]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005600:	4a41      	ldr	r2, [pc, #260]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005608:	4b40      	ldr	r3, [pc, #256]	; (800570c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2232      	movs	r2, #50	; 0x32
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	4a3f      	ldr	r2, [pc, #252]	; (8005710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	0c9b      	lsrs	r3, r3, #18
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561e:	e002      	b.n	8005626 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005626:	4b38      	ldr	r3, [pc, #224]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d102      	bne.n	800563a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f2      	bne.n	8005620 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800563a:	4b33      	ldr	r3, [pc, #204]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d158      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e057      	b.n	80056fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800564c:	4b2e      	ldr	r3, [pc, #184]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800565c:	e04d      	b.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005664:	d141      	bne.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005666:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005672:	d131      	bne.n	80056d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567a:	4a23      	ldr	r2, [pc, #140]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005684:	4b20      	ldr	r3, [pc, #128]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800568c:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005694:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2232      	movs	r2, #50	; 0x32
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	0c9b      	lsrs	r3, r3, #18
 80056a6:	3301      	adds	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056aa:	e002      	b.n	80056b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d102      	bne.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f2      	bne.n	80056ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d112      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e011      	b.n	80056fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056de:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056e8:	e007      	b.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056f2:	4a05      	ldr	r2, [pc, #20]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40007000 	.word	0x40007000
 800570c:	20000000 	.word	0x20000000
 8005710:	431bde83 	.word	0x431bde83

08005714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f000 bc16 	b.w	8005f54 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005728:	4ba0      	ldr	r3, [pc, #640]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005732:	4b9e      	ldr	r3, [pc, #632]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80e4 	beq.w	8005912 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_RCC_OscConfig+0x4c>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	f040 808b 	bne.w	800586e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b01      	cmp	r3, #1
 800575c:	f040 8087 	bne.w	800586e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005760:	4b92      	ldr	r3, [pc, #584]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_OscConfig+0x64>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e3ed      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	4b8b      	ldr	r3, [pc, #556]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <HAL_RCC_OscConfig+0x7e>
 8005788:	4b88      	ldr	r3, [pc, #544]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005790:	e005      	b.n	800579e <HAL_RCC_OscConfig+0x8a>
 8005792:	4b86      	ldr	r3, [pc, #536]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579e:	4293      	cmp	r3, r2
 80057a0:	d223      	bcs.n	80057ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fdc8 	bl	800633c <RCC_SetFlashLatencyFromMSIRange>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e3ce      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057b6:	4b7d      	ldr	r3, [pc, #500]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a7c      	ldr	r2, [pc, #496]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057bc:	f043 0308 	orr.w	r3, r3, #8
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b7a      	ldr	r3, [pc, #488]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4977      	ldr	r1, [pc, #476]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057d4:	4b75      	ldr	r3, [pc, #468]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	4972      	ldr	r1, [pc, #456]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
 80057e8:	e025      	b.n	8005836 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ea:	4b70      	ldr	r3, [pc, #448]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6f      	ldr	r2, [pc, #444]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	496a      	ldr	r1, [pc, #424]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005808:	4b68      	ldr	r3, [pc, #416]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	4965      	ldr	r1, [pc, #404]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005818:	4313      	orrs	r3, r2
 800581a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fd88 	bl	800633c <RCC_SetFlashLatencyFromMSIRange>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e38e      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005836:	f000 fcbf 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800583a:	4601      	mov	r1, r0
 800583c:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	4a5a      	ldr	r2, [pc, #360]	; (80059b0 <HAL_RCC_OscConfig+0x29c>)
 8005848:	5cd3      	ldrb	r3, [r2, r3]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	fa21 f303 	lsr.w	r3, r1, r3
 8005852:	4a58      	ldr	r2, [pc, #352]	; (80059b4 <HAL_RCC_OscConfig+0x2a0>)
 8005854:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005856:	4b58      	ldr	r3, [pc, #352]	; (80059b8 <HAL_RCC_OscConfig+0x2a4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd f8d2 	bl	8002a04 <HAL_InitTick>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d052      	beq.n	8005910 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	e372      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d032      	beq.n	80058dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005876:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4c      	ldr	r2, [pc, #304]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005882:	f7fd f90f 	bl	8002aa4 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800588a:	f7fd f90b 	bl	8002aa4 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e35b      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800589c:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a8:	4b40      	ldr	r3, [pc, #256]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3f      	ldr	r2, [pc, #252]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058ae:	f043 0308 	orr.w	r3, r3, #8
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	493a      	ldr	r1, [pc, #232]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c6:	4b39      	ldr	r3, [pc, #228]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	4935      	ldr	r1, [pc, #212]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	604b      	str	r3, [r1, #4]
 80058da:	e01a      	b.n	8005912 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058dc:	4b33      	ldr	r3, [pc, #204]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a32      	ldr	r2, [pc, #200]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058e8:	f7fd f8dc 	bl	8002aa4 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058f0:	f7fd f8d8 	bl	8002aa4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e328      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005902:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x1dc>
 800590e:	e000      	b.n	8005912 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005910:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d073      	beq.n	8005a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d005      	beq.n	8005930 <HAL_RCC_OscConfig+0x21c>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d10e      	bne.n	8005948 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d10b      	bne.n	8005948 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d063      	beq.n	8005a04 <HAL_RCC_OscConfig+0x2f0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d15f      	bne.n	8005a04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e305      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x24c>
 8005952:	4b16      	ldr	r3, [pc, #88]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e01d      	b.n	800599c <HAL_RCC_OscConfig+0x288>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0x270>
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a0f      	ldr	r2, [pc, #60]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0c      	ldr	r2, [pc, #48]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e00b      	b.n	800599c <HAL_RCC_OscConfig+0x288>
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a05      	ldr	r2, [pc, #20]	; (80059ac <HAL_RCC_OscConfig+0x298>)
 8005996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd f87e 	bl	8002aa4 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059aa:	e010      	b.n	80059ce <HAL_RCC_OscConfig+0x2ba>
 80059ac:	40021000 	.word	0x40021000
 80059b0:	0800b0f0 	.word	0x0800b0f0
 80059b4:	20000000 	.word	0x20000000
 80059b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fd f872 	bl	8002aa4 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e2c2      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ce:	4baf      	ldr	r3, [pc, #700]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x2a8>
 80059da:	e014      	b.n	8005a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fd f862 	bl	8002aa4 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fd f85e 	bl	8002aa4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e2ae      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059f6:	4ba5      	ldr	r3, [pc, #660]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2d0>
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d060      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_OscConfig+0x310>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d119      	bne.n	8005a52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d116      	bne.n	8005a52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a24:	4b99      	ldr	r3, [pc, #612]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_OscConfig+0x328>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e28b      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b93      	ldr	r3, [pc, #588]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	4990      	ldr	r1, [pc, #576]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a50:	e040      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d023      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a5a:	4b8c      	ldr	r3, [pc, #560]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a8b      	ldr	r2, [pc, #556]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fd f81d 	bl	8002aa4 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6e:	f7fd f819 	bl	8002aa4 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e269      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a80:	4b82      	ldr	r3, [pc, #520]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8c:	4b7f      	ldr	r3, [pc, #508]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	497c      	ldr	r1, [pc, #496]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	e018      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aa2:	4b7a      	ldr	r3, [pc, #488]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fc fff9 	bl	8002aa4 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab6:	f7fc fff5 	bl	8002aa4 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e245      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac8:	4b70      	ldr	r3, [pc, #448]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d03c      	beq.n	8005b5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01c      	beq.n	8005b22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae8:	4b68      	ldr	r3, [pc, #416]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aee:	4a67      	ldr	r2, [pc, #412]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fc ffd4 	bl	8002aa4 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b00:	f7fc ffd0 	bl	8002aa4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e220      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b12:	4b5e      	ldr	r3, [pc, #376]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ef      	beq.n	8005b00 <HAL_RCC_OscConfig+0x3ec>
 8005b20:	e01b      	b.n	8005b5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b22:	4b5a      	ldr	r3, [pc, #360]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b28:	4a58      	ldr	r2, [pc, #352]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fc ffb7 	bl	8002aa4 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3a:	f7fc ffb3 	bl	8002aa4 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e203      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ef      	bne.n	8005b3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80a6 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b6c:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10d      	bne.n	8005b94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b78:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	4a43      	ldr	r2, [pc, #268]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b82:	6593      	str	r3, [r2, #88]	; 0x58
 8005b84:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b94:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <HAL_RCC_OscConfig+0x57c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d118      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba0:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <HAL_RCC_OscConfig+0x57c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <HAL_RCC_OscConfig+0x57c>)
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bac:	f7fc ff7a 	bl	8002aa4 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb4:	f7fc ff76 	bl	8002aa4 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e1c6      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc6:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <HAL_RCC_OscConfig+0x57c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d108      	bne.n	8005bec <HAL_RCC_OscConfig+0x4d8>
 8005bda:	4b2c      	ldr	r3, [pc, #176]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005bea:	e024      	b.n	8005c36 <HAL_RCC_OscConfig+0x522>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d110      	bne.n	8005c16 <HAL_RCC_OscConfig+0x502>
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c04:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c14:	e00f      	b.n	8005c36 <HAL_RCC_OscConfig+0x522>
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c2e:	f023 0304 	bic.w	r3, r3, #4
 8005c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3e:	f7fc ff31 	bl	8002aa4 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fc ff2d 	bl	8002aa4 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e17b      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_OscConfig+0x578>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ed      	beq.n	8005c46 <HAL_RCC_OscConfig+0x532>
 8005c6a:	e01a      	b.n	8005ca2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fc ff1a 	bl	8002aa4 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fc ff16 	bl	8002aa4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d906      	bls.n	8005c94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e164      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c94:	4ba8      	ldr	r3, [pc, #672]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e8      	bne.n	8005c74 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4ba3      	ldr	r3, [pc, #652]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cac:	4aa2      	ldr	r2, [pc, #648]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d03c      	beq.n	8005d3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01c      	beq.n	8005d02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cc8:	4b9b      	ldr	r3, [pc, #620]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cce:	4a9a      	ldr	r2, [pc, #616]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fc fee4 	bl	8002aa4 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ce0:	f7fc fee0 	bl	8002aa4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e130      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cf2:	4b91      	ldr	r3, [pc, #580]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ef      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x5cc>
 8005d00:	e01b      	b.n	8005d3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d02:	4b8d      	ldr	r3, [pc, #564]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d08:	4a8b      	ldr	r2, [pc, #556]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fc fec7 	bl	8002aa4 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d1a:	f7fc fec3 	bl	8002aa4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e113      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d2c:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ef      	bne.n	8005d1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8107 	beq.w	8005f52 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	f040 80cb 	bne.w	8005ee4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d4e:	4b7a      	ldr	r3, [pc, #488]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0203 	and.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d12c      	bne.n	8005dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d123      	bne.n	8005dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d11b      	bne.n	8005dbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d113      	bne.n	8005dbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	3b01      	subs	r3, #1
 8005da2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d109      	bne.n	8005dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	3b01      	subs	r3, #1
 8005db6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d06d      	beq.n	8005e98 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d068      	beq.n	8005e94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005dc2:	4b5d      	ldr	r3, [pc, #372]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005dce:	4b5a      	ldr	r3, [pc, #360]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0ba      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005dde:	4b56      	ldr	r3, [pc, #344]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a55      	ldr	r2, [pc, #340]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005de8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dea:	f7fc fe5b 	bl	8002aa4 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fc fe57 	bl	8002aa4 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0a7      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e04:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e10:	4b49      	ldr	r3, [pc, #292]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	4b49      	ldr	r3, [pc, #292]	; (8005f3c <HAL_RCC_OscConfig+0x828>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e20:	3a01      	subs	r2, #1
 8005e22:	0112      	lsls	r2, r2, #4
 8005e24:	4311      	orrs	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e2a:	0212      	lsls	r2, r2, #8
 8005e2c:	4311      	orrs	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e32:	0852      	lsrs	r2, r2, #1
 8005e34:	3a01      	subs	r2, #1
 8005e36:	0552      	lsls	r2, r2, #21
 8005e38:	4311      	orrs	r1, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e3e:	0852      	lsrs	r2, r2, #1
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0652      	lsls	r2, r2, #25
 8005e44:	4311      	orrs	r1, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e4a:	06d2      	lsls	r2, r2, #27
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	493a      	ldr	r1, [pc, #232]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e54:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a37      	ldr	r2, [pc, #220]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e60:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e6c:	f7fc fe1a 	bl	8002aa4 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fc fe16 	bl	8002aa4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e066      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e86:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e92:	e05e      	b.n	8005f52 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e05d      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d156      	bne.n	8005f52 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a23      	ldr	r2, [pc, #140]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb0:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ebc:	f7fc fdf2 	bl	8002aa4 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc fdee 	bl	8002aa4 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e03e      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x7b0>
 8005ee2:	e036      	b.n	8005f52 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d031      	beq.n	8005f4e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ef4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d105      	bne.n	8005f0e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4a0c      	ldr	r2, [pc, #48]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005f08:	f023 0303 	bic.w	r3, r3, #3
 8005f0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <HAL_RCC_OscConfig+0x824>)
 8005f14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1e:	f7fc fdc1 	bl	8002aa4 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f24:	e00c      	b.n	8005f40 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fc fdbd 	bl	8002aa4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d905      	bls.n	8005f40 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e00d      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_OscConfig+0x848>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ec      	bne.n	8005f26 <HAL_RCC_OscConfig+0x812>
 8005f4c:	e001      	b.n	8005f52 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000

08005f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e10f      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f78:	4b89      	ldr	r3, [pc, #548]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d910      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b86      	ldr	r3, [pc, #536]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 020f 	bic.w	r2, r3, #15
 8005f8e:	4984      	ldr	r1, [pc, #528]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f96:	4b82      	ldr	r3, [pc, #520]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0f7      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8089 	beq.w	80060c8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d133      	bne.n	8006026 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fbe:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0e4      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005fce:	f000 fa0f 	bl	80063f0 <RCC_GetSysClockFreqFromPLLSource>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b74      	ldr	r3, [pc, #464]	; (80061a8 <HAL_RCC_ClockConfig+0x248>)
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d955      	bls.n	8006086 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fee:	4a6d      	ldr	r2, [pc, #436]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e044      	b.n	8006086 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d03e      	beq.n	8006086 <HAL_RCC_ClockConfig+0x126>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d13a      	bne.n	8006086 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006010:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006018:	4a62      	ldr	r2, [pc, #392]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e02f      	b.n	8006086 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d107      	bne.n	800603e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800602e:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d115      	bne.n	8006066 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0ac      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006046:	4b57      	ldr	r3, [pc, #348]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e0a0      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006056:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e098      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006066:	f000 f8a7 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800606a:	4602      	mov	r2, r0
 800606c:	4b4e      	ldr	r3, [pc, #312]	; (80061a8 <HAL_RCC_ClockConfig+0x248>)
 800606e:	429a      	cmp	r2, r3
 8006070:	d909      	bls.n	8006086 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006072:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800607a:	4a4a      	ldr	r2, [pc, #296]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006086:	4b47      	ldr	r3, [pc, #284]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 0203 	bic.w	r2, r3, #3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4944      	ldr	r1, [pc, #272]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006094:	4313      	orrs	r3, r2
 8006096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006098:	f7fc fd04 	bl	8002aa4 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a0:	f7fc fd00 	bl	8002aa4 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e070      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 020c 	and.w	r2, r3, #12
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d1eb      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d4:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4930      	ldr	r1, [pc, #192]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
 80060e6:	e008      	b.n	80060fa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d105      	bne.n	80060fa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060ee:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 80060f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d210      	bcs.n	800612a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 020f 	bic.w	r2, r3, #15
 8006110:	4923      	ldr	r1, [pc, #140]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006118:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <HAL_RCC_ClockConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e036      	b.n	8006198 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4918      	ldr	r1, [pc, #96]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006144:	4313      	orrs	r3, r2
 8006146:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4910      	ldr	r1, [pc, #64]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006168:	f000 f826 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800616c:	4601      	mov	r1, r0
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <HAL_RCC_ClockConfig+0x244>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <HAL_RCC_ClockConfig+0x24c>)
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	fa21 f303 	lsr.w	r3, r1, r3
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x250>)
 8006186:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x254>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fc fc39 	bl	8002a04 <HAL_InitTick>
 8006192:	4603      	mov	r3, r0
 8006194:	73fb      	strb	r3, [r7, #15]

  return status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	04c4b400 	.word	0x04c4b400
 80061ac:	0800b0f0 	.word	0x0800b0f0
 80061b0:	20000000 	.word	0x20000000
 80061b4:	20000004 	.word	0x20000004

080061b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061c6:	4b3d      	ldr	r3, [pc, #244]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061d0:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCC_GetSysClockFreq+0x34>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d121      	bne.n	800622a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11e      	bne.n	800622a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061ec:	4b33      	ldr	r3, [pc, #204]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d107      	bne.n	8006208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061f8:	4b30      	ldr	r3, [pc, #192]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 80061fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	61fb      	str	r3, [r7, #28]
 8006206:	e005      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006208:	4b2c      	ldr	r3, [pc, #176]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b04      	cmp	r3, #4
 800622e:	d102      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e004      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d101      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800623e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d133      	bne.n	80062ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d002      	beq.n	800625c <HAL_RCC_GetSysClockFreq+0xa4>
 8006256:	2b03      	cmp	r3, #3
 8006258:	d003      	beq.n	8006262 <HAL_RCC_GetSysClockFreq+0xaa>
 800625a:	e005      	b.n	8006268 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800625e:	617b      	str	r3, [r7, #20]
      break;
 8006260:	e005      	b.n	800626e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006264:	617b      	str	r3, [r7, #20]
      break;
 8006266:	e002      	b.n	800626e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	617b      	str	r3, [r7, #20]
      break;
 800626c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	3301      	adds	r3, #1
 800627a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	fb02 f203 	mul.w	r2, r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCC_GetSysClockFreq+0x104>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	0e5b      	lsrs	r3, r3, #25
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	3301      	adds	r3, #1
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062ae:	69bb      	ldr	r3, [r7, #24]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3724      	adds	r7, #36	; 0x24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40021000 	.word	0x40021000
 80062c0:	0800b108 	.word	0x0800b108
 80062c4:	00f42400 	.word	0x00f42400
 80062c8:	007a1200 	.word	0x007a1200

080062cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062d0:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000000 	.word	0x20000000

080062e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062e8:	f7ff fff0 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 80062ec:	4601      	mov	r1, r0
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4a04      	ldr	r2, [pc, #16]	; (800630c <HAL_RCC_GetPCLK1Freq+0x28>)
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	0800b100 	.word	0x0800b100

08006310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006314:	f7ff ffda 	bl	80062cc <HAL_RCC_GetHCLKFreq>
 8006318:	4601      	mov	r1, r0
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	0adb      	lsrs	r3, r3, #11
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	4a04      	ldr	r2, [pc, #16]	; (8006338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006326:	5cd3      	ldrb	r3, [r2, r3]
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000
 8006338:	0800b100 	.word	0x0800b100

0800633c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006348:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800634a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006354:	f7ff f91a 	bl	800558c <HAL_PWREx_GetVoltageRange>
 8006358:	6178      	str	r0, [r7, #20]
 800635a:	e014      	b.n	8006386 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800635c:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	6593      	str	r3, [r2, #88]	; 0x58
 8006368:	4b1f      	ldr	r3, [pc, #124]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006374:	f7ff f90a 	bl	800558c <HAL_PWREx_GetVoltageRange>
 8006378:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006384:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d10b      	bne.n	80063a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d913      	bls.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2ba0      	cmp	r3, #160	; 0xa0
 8006398:	d902      	bls.n	80063a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800639a:	2302      	movs	r3, #2
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	e00d      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063a0:	2301      	movs	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e00a      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b7f      	cmp	r3, #127	; 0x7f
 80063aa:	d902      	bls.n	80063b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80063ac:	2302      	movs	r3, #2
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e004      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d101      	bne.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063b8:	2301      	movs	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 020f 	bic.w	r2, r3, #15
 80063c4:	4909      	ldr	r1, [pc, #36]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d001      	beq.n	80063de <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40022000 	.word	0x40022000

080063f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b01      	cmp	r3, #1
 8006404:	d118      	bne.n	8006438 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006412:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e005      	b.n	800642e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006422:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006436:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006438:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d002      	beq.n	800644e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8006448:	2b03      	cmp	r3, #3
 800644a:	d003      	beq.n	8006454 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800644c:	e005      	b.n	800645a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006450:	613b      	str	r3, [r7, #16]
    break;
 8006452:	e005      	b.n	8006460 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006454:	4b19      	ldr	r3, [pc, #100]	; (80064bc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006456:	613b      	str	r3, [r7, #16]
    break;
 8006458:	e002      	b.n	8006460 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	613b      	str	r3, [r7, #16]
    break;
 800645e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	3301      	adds	r3, #1
 800646c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	fb02 f203 	mul.w	r2, r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80064a0:	683b      	ldr	r3, [r7, #0]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800b108 	.word	0x0800b108
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064c8:	2300      	movs	r3, #0
 80064ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064cc:	2300      	movs	r3, #0
 80064ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d03d      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d00b      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d804      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d015      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80064f0:	e01d      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80064f2:	2b60      	cmp	r3, #96	; 0x60
 80064f4:	d01e      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d01c      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064fa:	e018      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064fc:	4b86      	ldr	r3, [pc, #536]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a85      	ldr	r2, [pc, #532]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006506:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006508:	e015      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fb0d 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800651a:	e00c      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3320      	adds	r3, #32
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fbf4 	bl	8006d10 <RCCEx_PLLSAI2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	74fb      	strb	r3, [r7, #19]
      break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800653c:	4b76      	ldr	r3, [pc, #472]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654a:	4973      	ldr	r1, [pc, #460]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006552:	e001      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d042      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656c:	d00f      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800656e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006572:	d805      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d011      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657c:	d017      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xee>
 800657e:	e01f      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006584:	d01f      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658a:	d01c      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800658c:	e018      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800658e:	4b62      	ldr	r3, [pc, #392]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4a61      	ldr	r2, [pc, #388]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800659a:	e015      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fac4 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3320      	adds	r3, #32
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fbab 	bl	8006d10 <RCCEx_PLLSAI2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065be:	e003      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	74fb      	strb	r3, [r7, #19]
      break;
 80065c4:	e000      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80065c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065ce:	4b52      	ldr	r3, [pc, #328]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80065d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	494e      	ldr	r1, [pc, #312]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80065e4:	e001      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 809f 	beq.w	8006736 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065f8:	2300      	movs	r3, #0
 80065fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065fc:	4b46      	ldr	r3, [pc, #280]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800660c:	2300      	movs	r3, #0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006612:	4b41      	ldr	r3, [pc, #260]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006616:	4a40      	ldr	r2, [pc, #256]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6593      	str	r3, [r2, #88]	; 0x58
 800661e:	4b3e      	ldr	r3, [pc, #248]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662a:	2301      	movs	r3, #1
 800662c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800662e:	4b3b      	ldr	r3, [pc, #236]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a3a      	ldr	r2, [pc, #232]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800663a:	f7fc fa33 	bl	8002aa4 <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006640:	e009      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006642:	f7fc fa2f 	bl	8002aa4 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	74fb      	strb	r3, [r7, #19]
        break;
 8006654:	e005      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006656:	4b31      	ldr	r3, [pc, #196]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ef      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d15b      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006672:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01f      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d019      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006692:	4b21      	ldr	r3, [pc, #132]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fc f9ee 	bl	8002aa4 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ca:	e00b      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066cc:	f7fc f9ea 	bl	8002aa4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d902      	bls.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	74fb      	strb	r3, [r7, #19]
            break;
 80066e2:	e006      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ec      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80066f2:	7cfb      	ldrb	r3, [r7, #19]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10c      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f8:	4b07      	ldr	r3, [pc, #28]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006708:	4903      	ldr	r1, [pc, #12]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006710:	e008      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	74bb      	strb	r3, [r7, #18]
 8006716:	e005      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006718:	40021000 	.word	0x40021000
 800671c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006724:	7c7b      	ldrb	r3, [r7, #17]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d105      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672a:	4ba0      	ldr	r3, [pc, #640]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672e:	4a9f      	ldr	r2, [pc, #636]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006742:	4b9a      	ldr	r3, [pc, #616]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f023 0203 	bic.w	r2, r3, #3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	4996      	ldr	r1, [pc, #600]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006764:	4b91      	ldr	r3, [pc, #580]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f023 020c 	bic.w	r2, r3, #12
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	498e      	ldr	r1, [pc, #568]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006786:	4b89      	ldr	r3, [pc, #548]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	4985      	ldr	r1, [pc, #532]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067a8:	4b80      	ldr	r3, [pc, #512]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	497d      	ldr	r1, [pc, #500]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0310 	and.w	r3, r3, #16
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067ca:	4b78      	ldr	r3, [pc, #480]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d8:	4974      	ldr	r1, [pc, #464]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067ec:	4b6f      	ldr	r3, [pc, #444]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	496c      	ldr	r1, [pc, #432]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800680e:	4b67      	ldr	r3, [pc, #412]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681c:	4963      	ldr	r1, [pc, #396]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006830:	4b5e      	ldr	r3, [pc, #376]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683e:	495b      	ldr	r1, [pc, #364]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006852:	4b56      	ldr	r3, [pc, #344]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006858:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	4952      	ldr	r1, [pc, #328]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006874:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006882:	494a      	ldr	r1, [pc, #296]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006896:	4b45      	ldr	r3, [pc, #276]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	4941      	ldr	r1, [pc, #260]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068b8:	4b3c      	ldr	r3, [pc, #240]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068be:	f023 0203 	bic.w	r2, r3, #3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c6:	4939      	ldr	r1, [pc, #228]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d028      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068da:	4b34      	ldr	r3, [pc, #208]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e8:	4930      	ldr	r1, [pc, #192]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068fa:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	4a2b      	ldr	r2, [pc, #172]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006904:	60d3      	str	r3, [r2, #12]
 8006906:	e011      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006910:	d10c      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2101      	movs	r1, #1
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f909 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d04d      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006940:	d108      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800694e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006952:	e012      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006954:	4b15      	ldr	r3, [pc, #84]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695a:	4a14      	ldr	r2, [pc, #80]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800695c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006960:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006972:	490e      	ldr	r1, [pc, #56]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698e:	60d3      	str	r3, [r2, #12]
 8006990:	e020      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699a:	d109      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a02      	ldr	r2, [pc, #8]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a6:	60d3      	str	r3, [r2, #12]
 80069a8:	e014      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80069aa:	bf00      	nop
 80069ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	2101      	movs	r1, #1
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 f8b5 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d028      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069e0:	4b4a      	ldr	r3, [pc, #296]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ee:	4947      	ldr	r1, [pc, #284]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fe:	d106      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a41      	ldr	r2, [pc, #260]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a0a:	60d3      	str	r3, [r2, #12]
 8006a0c:	e011      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a16:	d10c      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f886 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8006a2e:	7cfb      	ldrb	r3, [r7, #19]
 8006a30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01e      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a3e:	4b33      	ldr	r3, [pc, #204]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a4e:	492f      	ldr	r1, [pc, #188]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2102      	movs	r1, #2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f861 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a72:	7cfb      	ldrb	r3, [r7, #19]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a8e:	f023 0204 	bic.w	r2, r3, #4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a98:	491c      	ldr	r1, [pc, #112]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006aac:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ab2:	f023 0218 	bic.w	r2, r3, #24
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	4913      	ldr	r1, [pc, #76]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d017      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae0:	490a      	ldr	r1, [pc, #40]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006afe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b00:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40021000 	.word	0x40021000

08006b10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	6013      	str	r3, [r2, #0]
}
 8006b20:	bf00      	nop
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000

08006b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b3e:	4b70      	ldr	r3, [pc, #448]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b4a:	4b6d      	ldr	r3, [pc, #436]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0203 	and.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d103      	bne.n	8006b62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d13f      	bne.n	8006be2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e03c      	b.n	8006be2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d00c      	beq.n	8006b8a <RCCEx_PLLSAI1_Config+0x5a>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d013      	beq.n	8006b9c <RCCEx_PLLSAI1_Config+0x6c>
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d120      	bne.n	8006bba <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b78:	4b61      	ldr	r3, [pc, #388]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11d      	bne.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b88:	e01a      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b8a:	4b5d      	ldr	r3, [pc, #372]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b9a:	e013      	b.n	8006bc4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b9c:	4b58      	ldr	r3, [pc, #352]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ba8:	4b55      	ldr	r3, [pc, #340]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bb8:	e006      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbe:	e004      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e002      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e000      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006bc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006bd0:	4b4b      	ldr	r3, [pc, #300]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f023 0203 	bic.w	r2, r3, #3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4948      	ldr	r1, [pc, #288]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f040 8086 	bne.w	8006cf6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bea:	4b45      	ldr	r3, [pc, #276]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a44      	ldr	r2, [pc, #272]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006bf0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf6:	f7fb ff55 	bl	8002aa4 <HAL_GetTick>
 8006bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bfc:	e009      	b.n	8006c12 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bfe:	f7fb ff51 	bl	8002aa4 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d902      	bls.n	8006c12 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8006c10:	e005      	b.n	8006c1e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ef      	bne.n	8006bfe <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d168      	bne.n	8006cf6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d113      	bne.n	8006c52 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c2a:	4b35      	ldr	r3, [pc, #212]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <RCCEx_PLLSAI1_Config+0x1d4>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6892      	ldr	r2, [r2, #8]
 8006c36:	0211      	lsls	r1, r2, #8
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68d2      	ldr	r2, [r2, #12]
 8006c3c:	06d2      	lsls	r2, r2, #27
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6852      	ldr	r2, [r2, #4]
 8006c44:	3a01      	subs	r2, #1
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	492d      	ldr	r1, [pc, #180]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
 8006c50:	e02d      	b.n	8006cae <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d115      	bne.n	8006c84 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c58:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6892      	ldr	r2, [r2, #8]
 8006c64:	0211      	lsls	r1, r2, #8
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6912      	ldr	r2, [r2, #16]
 8006c6a:	0852      	lsrs	r2, r2, #1
 8006c6c:	3a01      	subs	r2, #1
 8006c6e:	0552      	lsls	r2, r2, #21
 8006c70:	4311      	orrs	r1, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6852      	ldr	r2, [r2, #4]
 8006c76:	3a01      	subs	r2, #1
 8006c78:	0112      	lsls	r2, r2, #4
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	4920      	ldr	r1, [pc, #128]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	610b      	str	r3, [r1, #16]
 8006c82:	e014      	b.n	8006cae <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c84:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6892      	ldr	r2, [r2, #8]
 8006c90:	0211      	lsls	r1, r2, #8
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6952      	ldr	r2, [r2, #20]
 8006c96:	0852      	lsrs	r2, r2, #1
 8006c98:	3a01      	subs	r2, #1
 8006c9a:	0652      	lsls	r2, r2, #25
 8006c9c:	4311      	orrs	r1, r2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6852      	ldr	r2, [r2, #4]
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	0112      	lsls	r2, r2, #4
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	4915      	ldr	r1, [pc, #84]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fb fef3 	bl	8002aa4 <HAL_GetTick>
 8006cbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cc0:	e009      	b.n	8006cd6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc2:	f7fb feef 	bl	8002aa4 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d902      	bls.n	8006cd6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	73fb      	strb	r3, [r7, #15]
          break;
 8006cd4:	e005      	b.n	8006ce2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ef      	beq.n	8006cc2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	4903      	ldr	r1, [pc, #12]	; (8006d00 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40021000 	.word	0x40021000
 8006d04:	07ff800f 	.word	0x07ff800f
 8006d08:	ff9f800f 	.word	0xff9f800f
 8006d0c:	f9ff800f 	.word	0xf9ff800f

08006d10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d1e:	4b70      	ldr	r3, [pc, #448]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00e      	beq.n	8006d48 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f003 0203 	and.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d103      	bne.n	8006d42 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d13f      	bne.n	8006dc2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	e03c      	b.n	8006dc2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d00c      	beq.n	8006d6a <RCCEx_PLLSAI2_Config+0x5a>
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d013      	beq.n	8006d7c <RCCEx_PLLSAI2_Config+0x6c>
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d120      	bne.n	8006d9a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d58:	4b61      	ldr	r3, [pc, #388]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11d      	bne.n	8006da0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d68:	e01a      	b.n	8006da0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d6a:	4b5d      	ldr	r3, [pc, #372]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d116      	bne.n	8006da4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d7a:	e013      	b.n	8006da4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d7c:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10f      	bne.n	8006da8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d88:	4b55      	ldr	r3, [pc, #340]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d98:	e006      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9e:	e004      	b.n	8006daa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006da8:	bf00      	nop
    }

    if(status == HAL_OK)
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f023 0203 	bic.w	r2, r3, #3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4948      	ldr	r1, [pc, #288]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 8086 	bne.w	8006ed6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dca:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a44      	ldr	r2, [pc, #272]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd6:	f7fb fe65 	bl	8002aa4 <HAL_GetTick>
 8006dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ddc:	e009      	b.n	8006df2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dde:	f7fb fe61 	bl	8002aa4 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d902      	bls.n	8006df2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	73fb      	strb	r3, [r7, #15]
        break;
 8006df0:	e005      	b.n	8006dfe <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006df2:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1ef      	bne.n	8006dde <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d168      	bne.n	8006ed6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d113      	bne.n	8006e32 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e0a:	4b35      	ldr	r3, [pc, #212]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	4b35      	ldr	r3, [pc, #212]	; (8006ee4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6892      	ldr	r2, [r2, #8]
 8006e16:	0211      	lsls	r1, r2, #8
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68d2      	ldr	r2, [r2, #12]
 8006e1c:	06d2      	lsls	r2, r2, #27
 8006e1e:	4311      	orrs	r1, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	3a01      	subs	r2, #1
 8006e26:	0112      	lsls	r2, r2, #4
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	492d      	ldr	r1, [pc, #180]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	614b      	str	r3, [r1, #20]
 8006e30:	e02d      	b.n	8006e8e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d115      	bne.n	8006e64 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e38:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ee8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6892      	ldr	r2, [r2, #8]
 8006e44:	0211      	lsls	r1, r2, #8
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6912      	ldr	r2, [r2, #16]
 8006e4a:	0852      	lsrs	r2, r2, #1
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0552      	lsls	r2, r2, #21
 8006e50:	4311      	orrs	r1, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6852      	ldr	r2, [r2, #4]
 8006e56:	3a01      	subs	r2, #1
 8006e58:	0112      	lsls	r2, r2, #4
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	4920      	ldr	r1, [pc, #128]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	614b      	str	r3, [r1, #20]
 8006e62:	e014      	b.n	8006e8e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e64:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e66:	695a      	ldr	r2, [r3, #20]
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <RCCEx_PLLSAI2_Config+0x1dc>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	0211      	lsls	r1, r2, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6952      	ldr	r2, [r2, #20]
 8006e76:	0852      	lsrs	r2, r2, #1
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0652      	lsls	r2, r2, #25
 8006e7c:	4311      	orrs	r1, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6852      	ldr	r2, [r2, #4]
 8006e82:	3a01      	subs	r2, #1
 8006e84:	0112      	lsls	r2, r2, #4
 8006e86:	430a      	orrs	r2, r1
 8006e88:	4915      	ldr	r1, [pc, #84]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9a:	f7fb fe03 	bl	8002aa4 <HAL_GetTick>
 8006e9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ea0:	e009      	b.n	8006eb6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ea2:	f7fb fdff 	bl	8002aa4 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d902      	bls.n	8006eb6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8006eb4:	e005      	b.n	8006ec2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ef      	beq.n	8006ea2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	4903      	ldr	r1, [pc, #12]	; (8006ee0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	07ff800f 	.word	0x07ff800f
 8006ee8:	ff9f800f 	.word	0xff9f800f
 8006eec:	f9ff800f 	.word	0xf9ff800f

08006ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e095      	b.n	800702e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d108      	bne.n	8006f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f12:	d009      	beq.n	8006f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	61da      	str	r2, [r3, #28]
 8006f1a:	e005      	b.n	8006f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fa9e 	bl	8002484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f68:	d902      	bls.n	8006f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	e002      	b.n	8006f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_Init+0xa0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f88:	d002      	beq.n	8006f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	ea42 0103 	orr.w	r1, r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	f003 0204 	and.w	r2, r3, #4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800700c:	ea42 0103 	orr.w	r1, r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e042      	b.n	80070ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fb fa88 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2224      	movs	r2, #36	; 0x24
 8007064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0201 	bic.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8c3 	bl	8007204 <UART_SetConfig>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e022      	b.n	80070ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fb89 	bl	80077a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fc10 	bl	80078ec <UART_CheckIdleState>
 80070cc:	4603      	mov	r3, r0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b08a      	sub	sp, #40	; 0x28
 80070da:	af02      	add	r7, sp, #8
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4613      	mov	r3, r2
 80070e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	f040 8084 	bne.w	80071fa <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <HAL_UART_Transmit+0x28>
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e07c      	b.n	80071fc <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_UART_Transmit+0x3a>
 800710c:	2302      	movs	r3, #2
 800710e:	e075      	b.n	80071fc <HAL_UART_Transmit+0x126>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007128:	f7fb fcbc 	bl	8002aa4 <HAL_GetTick>
 800712c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	88fa      	ldrh	r2, [r7, #6]
 800713a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007146:	d108      	bne.n	800715a <HAL_UART_Transmit+0x84>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	e003      	b.n	8007162 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800716a:	e02d      	b.n	80071c8 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2200      	movs	r2, #0
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fc00 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e03a      	b.n	80071fc <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007198:	b292      	uxth	r2, r2
 800719a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	3302      	adds	r3, #2
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e008      	b.n	80071b6 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	b292      	uxth	r2, r2
 80071ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1cb      	bne.n	800716c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fbcc 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e006      	b.n	80071fc <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007208:	b088      	sub	sp, #32
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4313      	orrs	r3, r2
 8007228:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4bb1      	ldr	r3, [pc, #708]	; (8007500 <UART_SetConfig+0x2fc>)
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	69f9      	ldr	r1, [r7, #28]
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4aa6      	ldr	r2, [pc, #664]	; (8007504 <UART_SetConfig+0x300>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	4313      	orrs	r3, r2
 8007276:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007282:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	69f9      	ldr	r1, [r7, #28]
 800728c:	430b      	orrs	r3, r1
 800728e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	f023 010f 	bic.w	r1, r3, #15
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a97      	ldr	r2, [pc, #604]	; (8007508 <UART_SetConfig+0x304>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d121      	bne.n	80072f4 <UART_SetConfig+0xf0>
 80072b0:	4b96      	ldr	r3, [pc, #600]	; (800750c <UART_SetConfig+0x308>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d816      	bhi.n	80072ec <UART_SetConfig+0xe8>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <UART_SetConfig+0xc0>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072e1 	.word	0x080072e1
 80072cc:	080072db 	.word	0x080072db
 80072d0:	080072e7 	.word	0x080072e7
 80072d4:	2301      	movs	r3, #1
 80072d6:	76fb      	strb	r3, [r7, #27]
 80072d8:	e0e8      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072da:	2302      	movs	r3, #2
 80072dc:	76fb      	strb	r3, [r7, #27]
 80072de:	e0e5      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072e0:	2304      	movs	r3, #4
 80072e2:	76fb      	strb	r3, [r7, #27]
 80072e4:	e0e2      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072e6:	2308      	movs	r3, #8
 80072e8:	76fb      	strb	r3, [r7, #27]
 80072ea:	e0df      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072ec:	2310      	movs	r3, #16
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	bf00      	nop
 80072f2:	e0db      	b.n	80074ac <UART_SetConfig+0x2a8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a85      	ldr	r2, [pc, #532]	; (8007510 <UART_SetConfig+0x30c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d134      	bne.n	8007368 <UART_SetConfig+0x164>
 80072fe:	4b83      	ldr	r3, [pc, #524]	; (800750c <UART_SetConfig+0x308>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b0c      	cmp	r3, #12
 800730a:	d829      	bhi.n	8007360 <UART_SetConfig+0x15c>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x110>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007361 	.word	0x08007361
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007355 	.word	0x08007355
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	08007361 	.word	0x08007361
 8007334:	0800734f 	.word	0x0800734f
 8007338:	08007361 	.word	0x08007361
 800733c:	08007361 	.word	0x08007361
 8007340:	08007361 	.word	0x08007361
 8007344:	0800735b 	.word	0x0800735b
 8007348:	2300      	movs	r3, #0
 800734a:	76fb      	strb	r3, [r7, #27]
 800734c:	e0ae      	b.n	80074ac <UART_SetConfig+0x2a8>
 800734e:	2302      	movs	r3, #2
 8007350:	76fb      	strb	r3, [r7, #27]
 8007352:	e0ab      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007354:	2304      	movs	r3, #4
 8007356:	76fb      	strb	r3, [r7, #27]
 8007358:	e0a8      	b.n	80074ac <UART_SetConfig+0x2a8>
 800735a:	2308      	movs	r3, #8
 800735c:	76fb      	strb	r3, [r7, #27]
 800735e:	e0a5      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007360:	2310      	movs	r3, #16
 8007362:	76fb      	strb	r3, [r7, #27]
 8007364:	bf00      	nop
 8007366:	e0a1      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a69      	ldr	r2, [pc, #420]	; (8007514 <UART_SetConfig+0x310>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d120      	bne.n	80073b4 <UART_SetConfig+0x1b0>
 8007372:	4b66      	ldr	r3, [pc, #408]	; (800750c <UART_SetConfig+0x308>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800737c:	2b10      	cmp	r3, #16
 800737e:	d00f      	beq.n	80073a0 <UART_SetConfig+0x19c>
 8007380:	2b10      	cmp	r3, #16
 8007382:	d802      	bhi.n	800738a <UART_SetConfig+0x186>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <UART_SetConfig+0x190>
 8007388:	e010      	b.n	80073ac <UART_SetConfig+0x1a8>
 800738a:	2b20      	cmp	r3, #32
 800738c:	d005      	beq.n	800739a <UART_SetConfig+0x196>
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d009      	beq.n	80073a6 <UART_SetConfig+0x1a2>
 8007392:	e00b      	b.n	80073ac <UART_SetConfig+0x1a8>
 8007394:	2300      	movs	r3, #0
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e088      	b.n	80074ac <UART_SetConfig+0x2a8>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e085      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e082      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e07f      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	bf00      	nop
 80073b2:	e07b      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a57      	ldr	r2, [pc, #348]	; (8007518 <UART_SetConfig+0x314>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d120      	bne.n	8007400 <UART_SetConfig+0x1fc>
 80073be:	4b53      	ldr	r3, [pc, #332]	; (800750c <UART_SetConfig+0x308>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d00f      	beq.n	80073ec <UART_SetConfig+0x1e8>
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d802      	bhi.n	80073d6 <UART_SetConfig+0x1d2>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <UART_SetConfig+0x1dc>
 80073d4:	e010      	b.n	80073f8 <UART_SetConfig+0x1f4>
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d005      	beq.n	80073e6 <UART_SetConfig+0x1e2>
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d009      	beq.n	80073f2 <UART_SetConfig+0x1ee>
 80073de:	e00b      	b.n	80073f8 <UART_SetConfig+0x1f4>
 80073e0:	2300      	movs	r3, #0
 80073e2:	76fb      	strb	r3, [r7, #27]
 80073e4:	e062      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073e6:	2302      	movs	r3, #2
 80073e8:	76fb      	strb	r3, [r7, #27]
 80073ea:	e05f      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073ec:	2304      	movs	r3, #4
 80073ee:	76fb      	strb	r3, [r7, #27]
 80073f0:	e05c      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073f2:	2308      	movs	r3, #8
 80073f4:	76fb      	strb	r3, [r7, #27]
 80073f6:	e059      	b.n	80074ac <UART_SetConfig+0x2a8>
 80073f8:	2310      	movs	r3, #16
 80073fa:	76fb      	strb	r3, [r7, #27]
 80073fc:	bf00      	nop
 80073fe:	e055      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a45      	ldr	r2, [pc, #276]	; (800751c <UART_SetConfig+0x318>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d124      	bne.n	8007454 <UART_SetConfig+0x250>
 800740a:	4b40      	ldr	r3, [pc, #256]	; (800750c <UART_SetConfig+0x308>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007418:	d012      	beq.n	8007440 <UART_SetConfig+0x23c>
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d802      	bhi.n	8007426 <UART_SetConfig+0x222>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <UART_SetConfig+0x230>
 8007424:	e012      	b.n	800744c <UART_SetConfig+0x248>
 8007426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742a:	d006      	beq.n	800743a <UART_SetConfig+0x236>
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0x242>
 8007432:	e00b      	b.n	800744c <UART_SetConfig+0x248>
 8007434:	2300      	movs	r3, #0
 8007436:	76fb      	strb	r3, [r7, #27]
 8007438:	e038      	b.n	80074ac <UART_SetConfig+0x2a8>
 800743a:	2302      	movs	r3, #2
 800743c:	76fb      	strb	r3, [r7, #27]
 800743e:	e035      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007440:	2304      	movs	r3, #4
 8007442:	76fb      	strb	r3, [r7, #27]
 8007444:	e032      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007446:	2308      	movs	r3, #8
 8007448:	76fb      	strb	r3, [r7, #27]
 800744a:	e02f      	b.n	80074ac <UART_SetConfig+0x2a8>
 800744c:	2310      	movs	r3, #16
 800744e:	76fb      	strb	r3, [r7, #27]
 8007450:	bf00      	nop
 8007452:	e02b      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <UART_SetConfig+0x300>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d124      	bne.n	80074a8 <UART_SetConfig+0x2a4>
 800745e:	4b2b      	ldr	r3, [pc, #172]	; (800750c <UART_SetConfig+0x308>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746c:	d012      	beq.n	8007494 <UART_SetConfig+0x290>
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d802      	bhi.n	800747a <UART_SetConfig+0x276>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <UART_SetConfig+0x284>
 8007478:	e012      	b.n	80074a0 <UART_SetConfig+0x29c>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747e:	d006      	beq.n	800748e <UART_SetConfig+0x28a>
 8007480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007484:	d009      	beq.n	800749a <UART_SetConfig+0x296>
 8007486:	e00b      	b.n	80074a0 <UART_SetConfig+0x29c>
 8007488:	2300      	movs	r3, #0
 800748a:	76fb      	strb	r3, [r7, #27]
 800748c:	e00e      	b.n	80074ac <UART_SetConfig+0x2a8>
 800748e:	2302      	movs	r3, #2
 8007490:	76fb      	strb	r3, [r7, #27]
 8007492:	e00b      	b.n	80074ac <UART_SetConfig+0x2a8>
 8007494:	2304      	movs	r3, #4
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e008      	b.n	80074ac <UART_SetConfig+0x2a8>
 800749a:	2308      	movs	r3, #8
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e005      	b.n	80074ac <UART_SetConfig+0x2a8>
 80074a0:	2310      	movs	r3, #16
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	bf00      	nop
 80074a6:	e001      	b.n	80074ac <UART_SetConfig+0x2a8>
 80074a8:	2310      	movs	r3, #16
 80074aa:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <UART_SetConfig+0x300>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f040 80a1 	bne.w	80075fa <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074b8:	7efb      	ldrb	r3, [r7, #27]
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d836      	bhi.n	800752c <UART_SetConfig+0x328>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x2c0>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	080074f1 	.word	0x080074f1
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	080074f7 	.word	0x080074f7
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	08007525 	.word	0x08007525
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fe fefc 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 80074ec:	6178      	str	r0, [r7, #20]
        break;
 80074ee:	e022      	b.n	8007536 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <UART_SetConfig+0x31c>)
 80074f2:	617b      	str	r3, [r7, #20]
        break;
 80074f4:	e01f      	b.n	8007536 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fe fe5f 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 80074fa:	6178      	str	r0, [r7, #20]
        break;
 80074fc:	e01b      	b.n	8007536 <UART_SetConfig+0x332>
 80074fe:	bf00      	nop
 8007500:	cfff69f3 	.word	0xcfff69f3
 8007504:	40008000 	.word	0x40008000
 8007508:	40013800 	.word	0x40013800
 800750c:	40021000 	.word	0x40021000
 8007510:	40004400 	.word	0x40004400
 8007514:	40004800 	.word	0x40004800
 8007518:	40004c00 	.word	0x40004c00
 800751c:	40005000 	.word	0x40005000
 8007520:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007528:	617b      	str	r3, [r7, #20]
        break;
 800752a:	e004      	b.n	8007536 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	76bb      	strb	r3, [r7, #26]
        break;
 8007534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 811d 	beq.w	8007778 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	4a97      	ldr	r2, [pc, #604]	; (80077a0 <UART_SetConfig+0x59c>)
 8007544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007548:	461a      	mov	r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007550:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	d305      	bcc.n	800756e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	429a      	cmp	r2, r3
 800756c:	d902      	bls.n	8007574 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	76bb      	strb	r3, [r7, #26]
 8007572:	e101      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4618      	mov	r0, r3
 8007578:	f04f 0100 	mov.w	r1, #0
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a87      	ldr	r2, [pc, #540]	; (80077a0 <UART_SetConfig+0x59c>)
 8007582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f04f 0400 	mov.w	r4, #0
 800758c:	461a      	mov	r2, r3
 800758e:	4623      	mov	r3, r4
 8007590:	f7f9 fb22 	bl	8000bd8 <__aeabi_uldivmod>
 8007594:	4603      	mov	r3, r0
 8007596:	460c      	mov	r4, r1
 8007598:	4619      	mov	r1, r3
 800759a:	4622      	mov	r2, r4
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	0214      	lsls	r4, r2, #8
 80075a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075aa:	020b      	lsls	r3, r1, #8
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6852      	ldr	r2, [r2, #4]
 80075b0:	0852      	lsrs	r2, r2, #1
 80075b2:	4611      	mov	r1, r2
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	eb13 0b01 	adds.w	fp, r3, r1
 80075bc:	eb44 0c02 	adc.w	ip, r4, r2
 80075c0:	4658      	mov	r0, fp
 80075c2:	4661      	mov	r1, ip
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	461a      	mov	r2, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	f7f9 fb02 	bl	8000bd8 <__aeabi_uldivmod>
 80075d4:	4603      	mov	r3, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e0:	d308      	bcc.n	80075f4 <UART_SetConfig+0x3f0>
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e8:	d204      	bcs.n	80075f4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	e0c1      	b.n	8007778 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	76bb      	strb	r3, [r7, #26]
 80075f8:	e0be      	b.n	8007778 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007602:	d164      	bne.n	80076ce <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007604:	7efb      	ldrb	r3, [r7, #27]
 8007606:	2b08      	cmp	r3, #8
 8007608:	d827      	bhi.n	800765a <UART_SetConfig+0x456>
 800760a:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x40c>)
 800760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	0800765b 	.word	0x0800765b
 8007620:	0800764b 	.word	0x0800764b
 8007624:	0800765b 	.word	0x0800765b
 8007628:	0800765b 	.word	0x0800765b
 800762c:	0800765b 	.word	0x0800765b
 8007630:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fe fe56 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8007638:	6178      	str	r0, [r7, #20]
        break;
 800763a:	e013      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fe fe68 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
 8007640:	6178      	str	r0, [r7, #20]
        break;
 8007642:	e00f      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <UART_SetConfig+0x5a0>)
 8007646:	617b      	str	r3, [r7, #20]
        break;
 8007648:	e00c      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fe fdb5 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800764e:	6178      	str	r0, [r7, #20]
        break;
 8007650:	e008      	b.n	8007664 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007656:	617b      	str	r3, [r7, #20]
        break;
 8007658:	e004      	b.n	8007664 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	76bb      	strb	r3, [r7, #26]
        break;
 8007662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 8086 	beq.w	8007778 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	4a4b      	ldr	r2, [pc, #300]	; (80077a0 <UART_SetConfig+0x59c>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	461a      	mov	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	fbb3 f3f2 	udiv	r3, r3, r2
 800767e:	005a      	lsls	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	441a      	add	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	b29b      	uxth	r3, r3
 8007692:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d916      	bls.n	80076c8 <UART_SetConfig+0x4c4>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a0:	d212      	bcs.n	80076c8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f023 030f 	bic.w	r3, r3, #15
 80076aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	89fa      	ldrh	r2, [r7, #14]
 80076c4:	60da      	str	r2, [r3, #12]
 80076c6:	e057      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	76bb      	strb	r3, [r7, #26]
 80076cc:	e054      	b.n	8007778 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ce:	7efb      	ldrb	r3, [r7, #27]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d828      	bhi.n	8007726 <UART_SetConfig+0x522>
 80076d4:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0x4d8>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	08007701 	.word	0x08007701
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007711 	.word	0x08007711
 80076e8:	08007727 	.word	0x08007727
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007727 	.word	0x08007727
 80076f4:	08007727 	.word	0x08007727
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800771f 	.word	0x0800771f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007700:	f7fe fdf0 	bl	80062e4 <HAL_RCC_GetPCLK1Freq>
 8007704:	6178      	str	r0, [r7, #20]
        break;
 8007706:	e013      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007708:	f7fe fe02 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
 800770c:	6178      	str	r0, [r7, #20]
        break;
 800770e:	e00f      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007710:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <UART_SetConfig+0x5a0>)
 8007712:	617b      	str	r3, [r7, #20]
        break;
 8007714:	e00c      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007716:	f7fe fd4f 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800771a:	6178      	str	r0, [r7, #20]
        break;
 800771c:	e008      	b.n	8007730 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007722:	617b      	str	r3, [r7, #20]
        break;
 8007724:	e004      	b.n	8007730 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	76bb      	strb	r3, [r7, #26]
        break;
 800772e:	bf00      	nop
    }

    if (pclk != 0U)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d020      	beq.n	8007778 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <UART_SetConfig+0x59c>)
 800773c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007740:	461a      	mov	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	fbb3 f2f2 	udiv	r2, r3, r2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	fbb2 f3f3 	udiv	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d908      	bls.n	8007774 <UART_SetConfig+0x570>
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d204      	bcs.n	8007774 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	e001      	b.n	8007778 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007794:	7ebb      	ldrb	r3, [r7, #26]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80077a0:	0800b138 	.word	0x0800b138
 80077a4:	00f42400 	.word	0x00f42400

080077a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d10a      	bne.n	80078be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80078fc:	f7fb f8d2 	bl	8002aa4 <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10e      	bne.n	800792e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82c 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e022      	b.n	8007974 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f816 	bl	800797c <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00c      	b.n	8007974 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798c:	e062      	b.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d05e      	beq.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007996:	f7fb f885 	bl	8002aa4 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <UART_WaitOnFlagUntilTimeout+0x30>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11d      	bne.n	80079e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079ba:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e045      	b.n	8007a74 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02e      	beq.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a04:	d126      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a1e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e00f      	b.n	8007a74 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69da      	ldr	r2, [r3, #28]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	bf0c      	ite	eq
 8007a64:	2301      	moveq	r3, #1
 8007a66:	2300      	movne	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d08d      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e027      	b.n	8007ae2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2224      	movs	r2, #36	; 0x24
 8007a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e02d      	b.n	8007b62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2224      	movs	r2, #36	; 0x24
 8007b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f850 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e02d      	b.n	8007bde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2224      	movs	r2, #36	; 0x24
 8007b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f812 	bl	8007be8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b089      	sub	sp, #36	; 0x24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007bf0:	4a2f      	ldr	r2, [pc, #188]	; (8007cb0 <UARTEx_SetNbDataToProcess+0xc8>)
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bfa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007bfe:	4a2d      	ldr	r2, [pc, #180]	; (8007cb4 <UARTEx_SetNbDataToProcess+0xcc>)
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c08:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d108      	bne.n	8007c26 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c24:	e03d      	b.n	8007ca2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c26:	2308      	movs	r3, #8
 8007c28:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0e5b      	lsrs	r3, r3, #25
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	0f5b      	lsrs	r3, r3, #29
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007c4e:	7fbb      	ldrb	r3, [r7, #30]
 8007c50:	7f3a      	ldrb	r2, [r7, #28]
 8007c52:	f107 0120 	add.w	r1, r7, #32
 8007c56:	440a      	add	r2, r1
 8007c58:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
 8007c60:	7f3a      	ldrb	r2, [r7, #28]
 8007c62:	f107 0120 	add.w	r1, r7, #32
 8007c66:	440a      	add	r2, r1
 8007c68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007c78:	7ffb      	ldrb	r3, [r7, #31]
 8007c7a:	7f7a      	ldrb	r2, [r7, #29]
 8007c7c:	f107 0120 	add.w	r1, r7, #32
 8007c80:	440a      	add	r2, r1
 8007c82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	7f7a      	ldrb	r2, [r7, #29]
 8007c8c:	f107 0120 	add.w	r1, r7, #32
 8007c90:	440a      	add	r2, r1
 8007c92:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ca2:	bf00      	nop
 8007ca4:	3724      	adds	r7, #36	; 0x24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	0800b0e0 	.word	0x0800b0e0
 8007cb4:	0800b0e8 	.word	0x0800b0e8

08007cb8 <__errno>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	; (8007cc0 <__errno+0x8>)
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	2000000c 	.word	0x2000000c

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4e0d      	ldr	r6, [pc, #52]	; (8007cfc <__libc_init_array+0x38>)
 8007cc8:	4c0d      	ldr	r4, [pc, #52]	; (8007d00 <__libc_init_array+0x3c>)
 8007cca:	1ba4      	subs	r4, r4, r6
 8007ccc:	10a4      	asrs	r4, r4, #2
 8007cce:	2500      	movs	r5, #0
 8007cd0:	42a5      	cmp	r5, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	4e0b      	ldr	r6, [pc, #44]	; (8007d04 <__libc_init_array+0x40>)
 8007cd6:	4c0c      	ldr	r4, [pc, #48]	; (8007d08 <__libc_init_array+0x44>)
 8007cd8:	f003 f9ec 	bl	800b0b4 <_init>
 8007cdc:	1ba4      	subs	r4, r4, r6
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	2500      	movs	r5, #0
 8007ce2:	42a5      	cmp	r5, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cec:	4798      	blx	r3
 8007cee:	3501      	adds	r5, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cf6:	4798      	blx	r3
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	0800b430 	.word	0x0800b430
 8007d00:	0800b430 	.word	0x0800b430
 8007d04:	0800b430 	.word	0x0800b430
 8007d08:	0800b434 	.word	0x0800b434

08007d0c <memset>:
 8007d0c:	4402      	add	r2, r0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <__cvt>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	ec55 4b10 	vmov	r4, r5, d0
 8007d24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007d26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	460e      	mov	r6, r1
 8007d2e:	4691      	mov	r9, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	bfb8      	it	lt
 8007d34:	4622      	movlt	r2, r4
 8007d36:	462b      	mov	r3, r5
 8007d38:	f027 0720 	bic.w	r7, r7, #32
 8007d3c:	bfbb      	ittet	lt
 8007d3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d42:	461d      	movlt	r5, r3
 8007d44:	2300      	movge	r3, #0
 8007d46:	232d      	movlt	r3, #45	; 0x2d
 8007d48:	bfb8      	it	lt
 8007d4a:	4614      	movlt	r4, r2
 8007d4c:	2f46      	cmp	r7, #70	; 0x46
 8007d4e:	700b      	strb	r3, [r1, #0]
 8007d50:	d004      	beq.n	8007d5c <__cvt+0x40>
 8007d52:	2f45      	cmp	r7, #69	; 0x45
 8007d54:	d100      	bne.n	8007d58 <__cvt+0x3c>
 8007d56:	3601      	adds	r6, #1
 8007d58:	2102      	movs	r1, #2
 8007d5a:	e000      	b.n	8007d5e <__cvt+0x42>
 8007d5c:	2103      	movs	r1, #3
 8007d5e:	ab03      	add	r3, sp, #12
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	ab02      	add	r3, sp, #8
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4632      	mov	r2, r6
 8007d68:	4653      	mov	r3, sl
 8007d6a:	ec45 4b10 	vmov	d0, r4, r5
 8007d6e:	f000 fccf 	bl	8008710 <_dtoa_r>
 8007d72:	2f47      	cmp	r7, #71	; 0x47
 8007d74:	4680      	mov	r8, r0
 8007d76:	d102      	bne.n	8007d7e <__cvt+0x62>
 8007d78:	f019 0f01 	tst.w	r9, #1
 8007d7c:	d026      	beq.n	8007dcc <__cvt+0xb0>
 8007d7e:	2f46      	cmp	r7, #70	; 0x46
 8007d80:	eb08 0906 	add.w	r9, r8, r6
 8007d84:	d111      	bne.n	8007daa <__cvt+0x8e>
 8007d86:	f898 3000 	ldrb.w	r3, [r8]
 8007d8a:	2b30      	cmp	r3, #48	; 0x30
 8007d8c:	d10a      	bne.n	8007da4 <__cvt+0x88>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 fe5f 	bl	8000a58 <__aeabi_dcmpeq>
 8007d9a:	b918      	cbnz	r0, 8007da4 <__cvt+0x88>
 8007d9c:	f1c6 0601 	rsb	r6, r6, #1
 8007da0:	f8ca 6000 	str.w	r6, [sl]
 8007da4:	f8da 3000 	ldr.w	r3, [sl]
 8007da8:	4499      	add	r9, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	2300      	movs	r3, #0
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fe51 	bl	8000a58 <__aeabi_dcmpeq>
 8007db6:	b938      	cbnz	r0, 8007dc8 <__cvt+0xac>
 8007db8:	2230      	movs	r2, #48	; 0x30
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	454b      	cmp	r3, r9
 8007dbe:	d205      	bcs.n	8007dcc <__cvt+0xb0>
 8007dc0:	1c59      	adds	r1, r3, #1
 8007dc2:	9103      	str	r1, [sp, #12]
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	e7f8      	b.n	8007dba <__cvt+0x9e>
 8007dc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd0:	eba3 0308 	sub.w	r3, r3, r8
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	b004      	add	sp, #16
 8007dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007dde <__exponent>:
 8007dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de0:	2900      	cmp	r1, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	bfba      	itte	lt
 8007de6:	4249      	neglt	r1, r1
 8007de8:	232d      	movlt	r3, #45	; 0x2d
 8007dea:	232b      	movge	r3, #43	; 0x2b
 8007dec:	2909      	cmp	r1, #9
 8007dee:	f804 2b02 	strb.w	r2, [r4], #2
 8007df2:	7043      	strb	r3, [r0, #1]
 8007df4:	dd20      	ble.n	8007e38 <__exponent+0x5a>
 8007df6:	f10d 0307 	add.w	r3, sp, #7
 8007dfa:	461f      	mov	r7, r3
 8007dfc:	260a      	movs	r6, #10
 8007dfe:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e02:	fb06 1115 	mls	r1, r6, r5, r1
 8007e06:	3130      	adds	r1, #48	; 0x30
 8007e08:	2d09      	cmp	r5, #9
 8007e0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007e12:	4629      	mov	r1, r5
 8007e14:	dc09      	bgt.n	8007e2a <__exponent+0x4c>
 8007e16:	3130      	adds	r1, #48	; 0x30
 8007e18:	3b02      	subs	r3, #2
 8007e1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e1e:	42bb      	cmp	r3, r7
 8007e20:	4622      	mov	r2, r4
 8007e22:	d304      	bcc.n	8007e2e <__exponent+0x50>
 8007e24:	1a10      	subs	r0, r2, r0
 8007e26:	b003      	add	sp, #12
 8007e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	e7e7      	b.n	8007dfe <__exponent+0x20>
 8007e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e32:	f804 2b01 	strb.w	r2, [r4], #1
 8007e36:	e7f2      	b.n	8007e1e <__exponent+0x40>
 8007e38:	2330      	movs	r3, #48	; 0x30
 8007e3a:	4419      	add	r1, r3
 8007e3c:	7083      	strb	r3, [r0, #2]
 8007e3e:	1d02      	adds	r2, r0, #4
 8007e40:	70c1      	strb	r1, [r0, #3]
 8007e42:	e7ef      	b.n	8007e24 <__exponent+0x46>

08007e44 <_printf_float>:
 8007e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e48:	b08d      	sub	sp, #52	; 0x34
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007e50:	4616      	mov	r6, r2
 8007e52:	461f      	mov	r7, r3
 8007e54:	4605      	mov	r5, r0
 8007e56:	f001 fb8d 	bl	8009574 <_localeconv_r>
 8007e5a:	6803      	ldr	r3, [r0, #0]
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f8 f9ce 	bl	8000200 <strlen>
 8007e64:	2300      	movs	r3, #0
 8007e66:	930a      	str	r3, [sp, #40]	; 0x28
 8007e68:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6c:	9005      	str	r0, [sp, #20]
 8007e6e:	3307      	adds	r3, #7
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	f103 0208 	add.w	r2, r3, #8
 8007e78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e7c:	f8d4 b000 	ldr.w	fp, [r4]
 8007e80:	f8c8 2000 	str.w	r2, [r8]
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e94:	9307      	str	r3, [sp, #28]
 8007e96:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	4ba7      	ldr	r3, [pc, #668]	; (800813c <_printf_float+0x2f8>)
 8007ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ea4:	f7f8 fe0a 	bl	8000abc <__aeabi_dcmpun>
 8007ea8:	bb70      	cbnz	r0, 8007f08 <_printf_float+0xc4>
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	4ba3      	ldr	r3, [pc, #652]	; (800813c <_printf_float+0x2f8>)
 8007eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eb4:	f7f8 fde4 	bl	8000a80 <__aeabi_dcmple>
 8007eb8:	bb30      	cbnz	r0, 8007f08 <_printf_float+0xc4>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	f7f8 fdd3 	bl	8000a6c <__aeabi_dcmplt>
 8007ec6:	b110      	cbz	r0, 8007ece <_printf_float+0x8a>
 8007ec8:	232d      	movs	r3, #45	; 0x2d
 8007eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ece:	4a9c      	ldr	r2, [pc, #624]	; (8008140 <_printf_float+0x2fc>)
 8007ed0:	4b9c      	ldr	r3, [pc, #624]	; (8008144 <_printf_float+0x300>)
 8007ed2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007ed6:	bf8c      	ite	hi
 8007ed8:	4690      	movhi	r8, r2
 8007eda:	4698      	movls	r8, r3
 8007edc:	2303      	movs	r3, #3
 8007ede:	f02b 0204 	bic.w	r2, fp, #4
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	9700      	str	r7, [sp, #0]
 8007eec:	4633      	mov	r3, r6
 8007eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f9e6 	bl	80082c4 <_printf_common>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f040 808d 	bne.w	8008018 <_printf_float+0x1d4>
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	b00d      	add	sp, #52	; 0x34
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	4642      	mov	r2, r8
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fdd4 	bl	8000abc <__aeabi_dcmpun>
 8007f14:	b110      	cbz	r0, 8007f1c <_printf_float+0xd8>
 8007f16:	4a8c      	ldr	r2, [pc, #560]	; (8008148 <_printf_float+0x304>)
 8007f18:	4b8c      	ldr	r3, [pc, #560]	; (800814c <_printf_float+0x308>)
 8007f1a:	e7da      	b.n	8007ed2 <_printf_float+0x8e>
 8007f1c:	6861      	ldr	r1, [r4, #4]
 8007f1e:	1c4b      	adds	r3, r1, #1
 8007f20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007f24:	a80a      	add	r0, sp, #40	; 0x28
 8007f26:	d13e      	bne.n	8007fa6 <_printf_float+0x162>
 8007f28:	2306      	movs	r3, #6
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f32:	ab09      	add	r3, sp, #36	; 0x24
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	ec49 8b10 	vmov	d0, r8, r9
 8007f3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f3e:	6022      	str	r2, [r4, #0]
 8007f40:	f8cd a004 	str.w	sl, [sp, #4]
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7ff fee8 	bl	8007d1c <__cvt>
 8007f4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007f50:	2b47      	cmp	r3, #71	; 0x47
 8007f52:	4680      	mov	r8, r0
 8007f54:	d109      	bne.n	8007f6a <_printf_float+0x126>
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	1cd8      	adds	r0, r3, #3
 8007f5a:	db02      	blt.n	8007f62 <_printf_float+0x11e>
 8007f5c:	6862      	ldr	r2, [r4, #4]
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	dd47      	ble.n	8007ff2 <_printf_float+0x1ae>
 8007f62:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f66:	fa5f fa8a 	uxtb.w	sl, sl
 8007f6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f70:	d824      	bhi.n	8007fbc <_printf_float+0x178>
 8007f72:	3901      	subs	r1, #1
 8007f74:	4652      	mov	r2, sl
 8007f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f7a:	9109      	str	r1, [sp, #36]	; 0x24
 8007f7c:	f7ff ff2f 	bl	8007dde <__exponent>
 8007f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f82:	1813      	adds	r3, r2, r0
 8007f84:	2a01      	cmp	r2, #1
 8007f86:	4681      	mov	r9, r0
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	dc02      	bgt.n	8007f92 <_printf_float+0x14e>
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	07d1      	lsls	r1, r2, #31
 8007f90:	d501      	bpl.n	8007f96 <_printf_float+0x152>
 8007f92:	3301      	adds	r3, #1
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0a5      	beq.n	8007eea <_printf_float+0xa6>
 8007f9e:	232d      	movs	r3, #45	; 0x2d
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e7a1      	b.n	8007eea <_printf_float+0xa6>
 8007fa6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007faa:	f000 8177 	beq.w	800829c <_printf_float+0x458>
 8007fae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007fb2:	d1bb      	bne.n	8007f2c <_printf_float+0xe8>
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	d1b9      	bne.n	8007f2c <_printf_float+0xe8>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e7b6      	b.n	8007f2a <_printf_float+0xe6>
 8007fbc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007fc0:	d119      	bne.n	8007ff6 <_printf_float+0x1b2>
 8007fc2:	2900      	cmp	r1, #0
 8007fc4:	6863      	ldr	r3, [r4, #4]
 8007fc6:	dd0c      	ble.n	8007fe2 <_printf_float+0x19e>
 8007fc8:	6121      	str	r1, [r4, #16]
 8007fca:	b913      	cbnz	r3, 8007fd2 <_printf_float+0x18e>
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	07d2      	lsls	r2, r2, #31
 8007fd0:	d502      	bpl.n	8007fd8 <_printf_float+0x194>
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	440b      	add	r3, r1
 8007fd6:	6123      	str	r3, [r4, #16]
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fdc:	f04f 0900 	mov.w	r9, #0
 8007fe0:	e7d9      	b.n	8007f96 <_printf_float+0x152>
 8007fe2:	b913      	cbnz	r3, 8007fea <_printf_float+0x1a6>
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	07d0      	lsls	r0, r2, #31
 8007fe8:	d501      	bpl.n	8007fee <_printf_float+0x1aa>
 8007fea:	3302      	adds	r3, #2
 8007fec:	e7f3      	b.n	8007fd6 <_printf_float+0x192>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e7f1      	b.n	8007fd6 <_printf_float+0x192>
 8007ff2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007ff6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	db05      	blt.n	800800a <_printf_float+0x1c6>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	6123      	str	r3, [r4, #16]
 8008002:	07d1      	lsls	r1, r2, #31
 8008004:	d5e8      	bpl.n	8007fd8 <_printf_float+0x194>
 8008006:	3301      	adds	r3, #1
 8008008:	e7e5      	b.n	8007fd6 <_printf_float+0x192>
 800800a:	2b00      	cmp	r3, #0
 800800c:	bfd4      	ite	le
 800800e:	f1c3 0302 	rsble	r3, r3, #2
 8008012:	2301      	movgt	r3, #1
 8008014:	4413      	add	r3, r2
 8008016:	e7de      	b.n	8007fd6 <_printf_float+0x192>
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	055a      	lsls	r2, r3, #21
 800801c:	d407      	bmi.n	800802e <_printf_float+0x1ea>
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	4642      	mov	r2, r8
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d12b      	bne.n	8008084 <_printf_float+0x240>
 800802c:	e767      	b.n	8007efe <_printf_float+0xba>
 800802e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008032:	f240 80dc 	bls.w	80081ee <_printf_float+0x3aa>
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800803e:	f7f8 fd0b 	bl	8000a58 <__aeabi_dcmpeq>
 8008042:	2800      	cmp	r0, #0
 8008044:	d033      	beq.n	80080ae <_printf_float+0x26a>
 8008046:	2301      	movs	r3, #1
 8008048:	4a41      	ldr	r2, [pc, #260]	; (8008150 <_printf_float+0x30c>)
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f af54 	beq.w	8007efe <_printf_float+0xba>
 8008056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800805a:	429a      	cmp	r2, r3
 800805c:	db02      	blt.n	8008064 <_printf_float+0x220>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	07d8      	lsls	r0, r3, #31
 8008062:	d50f      	bpl.n	8008084 <_printf_float+0x240>
 8008064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	47b8      	blx	r7
 800806e:	3001      	adds	r0, #1
 8008070:	f43f af45 	beq.w	8007efe <_printf_float+0xba>
 8008074:	f04f 0800 	mov.w	r8, #0
 8008078:	f104 091a 	add.w	r9, r4, #26
 800807c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807e:	3b01      	subs	r3, #1
 8008080:	4543      	cmp	r3, r8
 8008082:	dc09      	bgt.n	8008098 <_printf_float+0x254>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	079b      	lsls	r3, r3, #30
 8008088:	f100 8103 	bmi.w	8008292 <_printf_float+0x44e>
 800808c:	68e0      	ldr	r0, [r4, #12]
 800808e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008090:	4298      	cmp	r0, r3
 8008092:	bfb8      	it	lt
 8008094:	4618      	movlt	r0, r3
 8008096:	e734      	b.n	8007f02 <_printf_float+0xbe>
 8008098:	2301      	movs	r3, #1
 800809a:	464a      	mov	r2, r9
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	47b8      	blx	r7
 80080a2:	3001      	adds	r0, #1
 80080a4:	f43f af2b 	beq.w	8007efe <_printf_float+0xba>
 80080a8:	f108 0801 	add.w	r8, r8, #1
 80080ac:	e7e6      	b.n	800807c <_printf_float+0x238>
 80080ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc2b      	bgt.n	800810c <_printf_float+0x2c8>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4a26      	ldr	r2, [pc, #152]	; (8008150 <_printf_float+0x30c>)
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	f43f af1d 	beq.w	8007efe <_printf_float+0xba>
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	b923      	cbnz	r3, 80080d2 <_printf_float+0x28e>
 80080c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ca:	b913      	cbnz	r3, 80080d2 <_printf_float+0x28e>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	07d9      	lsls	r1, r3, #31
 80080d0:	d5d8      	bpl.n	8008084 <_printf_float+0x240>
 80080d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f af0e 	beq.w	8007efe <_printf_float+0xba>
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	f104 0a1a 	add.w	sl, r4, #26
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	425b      	negs	r3, r3
 80080ee:	454b      	cmp	r3, r9
 80080f0:	dc01      	bgt.n	80080f6 <_printf_float+0x2b2>
 80080f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f4:	e794      	b.n	8008020 <_printf_float+0x1dc>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	f43f aefc 	beq.w	8007efe <_printf_float+0xba>
 8008106:	f109 0901 	add.w	r9, r9, #1
 800810a:	e7ee      	b.n	80080ea <_printf_float+0x2a6>
 800810c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008110:	429a      	cmp	r2, r3
 8008112:	bfa8      	it	ge
 8008114:	461a      	movge	r2, r3
 8008116:	2a00      	cmp	r2, #0
 8008118:	4691      	mov	r9, r2
 800811a:	dd07      	ble.n	800812c <_printf_float+0x2e8>
 800811c:	4613      	mov	r3, r2
 800811e:	4631      	mov	r1, r6
 8008120:	4642      	mov	r2, r8
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f aee9 	beq.w	8007efe <_printf_float+0xba>
 800812c:	f104 031a 	add.w	r3, r4, #26
 8008130:	f04f 0b00 	mov.w	fp, #0
 8008134:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008138:	9306      	str	r3, [sp, #24]
 800813a:	e015      	b.n	8008168 <_printf_float+0x324>
 800813c:	7fefffff 	.word	0x7fefffff
 8008140:	0800b158 	.word	0x0800b158
 8008144:	0800b154 	.word	0x0800b154
 8008148:	0800b160 	.word	0x0800b160
 800814c:	0800b15c 	.word	0x0800b15c
 8008150:	0800b164 	.word	0x0800b164
 8008154:	2301      	movs	r3, #1
 8008156:	9a06      	ldr	r2, [sp, #24]
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f aecd 	beq.w	8007efe <_printf_float+0xba>
 8008164:	f10b 0b01 	add.w	fp, fp, #1
 8008168:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800816c:	ebaa 0309 	sub.w	r3, sl, r9
 8008170:	455b      	cmp	r3, fp
 8008172:	dcef      	bgt.n	8008154 <_printf_float+0x310>
 8008174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008178:	429a      	cmp	r2, r3
 800817a:	44d0      	add	r8, sl
 800817c:	db15      	blt.n	80081aa <_printf_float+0x366>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07da      	lsls	r2, r3, #31
 8008182:	d412      	bmi.n	80081aa <_printf_float+0x366>
 8008184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008188:	eba3 020a 	sub.w	r2, r3, sl
 800818c:	eba3 0a01 	sub.w	sl, r3, r1
 8008190:	4592      	cmp	sl, r2
 8008192:	bfa8      	it	ge
 8008194:	4692      	movge	sl, r2
 8008196:	f1ba 0f00 	cmp.w	sl, #0
 800819a:	dc0e      	bgt.n	80081ba <_printf_float+0x376>
 800819c:	f04f 0800 	mov.w	r8, #0
 80081a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081a4:	f104 091a 	add.w	r9, r4, #26
 80081a8:	e019      	b.n	80081de <_printf_float+0x39a>
 80081aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	d1e5      	bne.n	8008184 <_printf_float+0x340>
 80081b8:	e6a1      	b.n	8007efe <_printf_float+0xba>
 80081ba:	4653      	mov	r3, sl
 80081bc:	4642      	mov	r2, r8
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	d1e9      	bne.n	800819c <_printf_float+0x358>
 80081c8:	e699      	b.n	8007efe <_printf_float+0xba>
 80081ca:	2301      	movs	r3, #1
 80081cc:	464a      	mov	r2, r9
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	f43f ae92 	beq.w	8007efe <_printf_float+0xba>
 80081da:	f108 0801 	add.w	r8, r8, #1
 80081de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	eba3 030a 	sub.w	r3, r3, sl
 80081e8:	4543      	cmp	r3, r8
 80081ea:	dcee      	bgt.n	80081ca <_printf_float+0x386>
 80081ec:	e74a      	b.n	8008084 <_printf_float+0x240>
 80081ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081f0:	2a01      	cmp	r2, #1
 80081f2:	dc01      	bgt.n	80081f8 <_printf_float+0x3b4>
 80081f4:	07db      	lsls	r3, r3, #31
 80081f6:	d53a      	bpl.n	800826e <_printf_float+0x42a>
 80081f8:	2301      	movs	r3, #1
 80081fa:	4642      	mov	r2, r8
 80081fc:	4631      	mov	r1, r6
 80081fe:	4628      	mov	r0, r5
 8008200:	47b8      	blx	r7
 8008202:	3001      	adds	r0, #1
 8008204:	f43f ae7b 	beq.w	8007efe <_printf_float+0xba>
 8008208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f108 0801 	add.w	r8, r8, #1
 8008218:	f43f ae71 	beq.w	8007efe <_printf_float+0xba>
 800821c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800821e:	2200      	movs	r2, #0
 8008220:	f103 3aff 	add.w	sl, r3, #4294967295
 8008224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008228:	2300      	movs	r3, #0
 800822a:	f7f8 fc15 	bl	8000a58 <__aeabi_dcmpeq>
 800822e:	b9c8      	cbnz	r0, 8008264 <_printf_float+0x420>
 8008230:	4653      	mov	r3, sl
 8008232:	4642      	mov	r2, r8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	d10e      	bne.n	800825c <_printf_float+0x418>
 800823e:	e65e      	b.n	8007efe <_printf_float+0xba>
 8008240:	2301      	movs	r3, #1
 8008242:	4652      	mov	r2, sl
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f ae57 	beq.w	8007efe <_printf_float+0xba>
 8008250:	f108 0801 	add.w	r8, r8, #1
 8008254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008256:	3b01      	subs	r3, #1
 8008258:	4543      	cmp	r3, r8
 800825a:	dcf1      	bgt.n	8008240 <_printf_float+0x3fc>
 800825c:	464b      	mov	r3, r9
 800825e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008262:	e6de      	b.n	8008022 <_printf_float+0x1de>
 8008264:	f04f 0800 	mov.w	r8, #0
 8008268:	f104 0a1a 	add.w	sl, r4, #26
 800826c:	e7f2      	b.n	8008254 <_printf_float+0x410>
 800826e:	2301      	movs	r3, #1
 8008270:	e7df      	b.n	8008232 <_printf_float+0x3ee>
 8008272:	2301      	movs	r3, #1
 8008274:	464a      	mov	r2, r9
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f ae3e 	beq.w	8007efe <_printf_float+0xba>
 8008282:	f108 0801 	add.w	r8, r8, #1
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800828a:	1a9b      	subs	r3, r3, r2
 800828c:	4543      	cmp	r3, r8
 800828e:	dcf0      	bgt.n	8008272 <_printf_float+0x42e>
 8008290:	e6fc      	b.n	800808c <_printf_float+0x248>
 8008292:	f04f 0800 	mov.w	r8, #0
 8008296:	f104 0919 	add.w	r9, r4, #25
 800829a:	e7f4      	b.n	8008286 <_printf_float+0x442>
 800829c:	2900      	cmp	r1, #0
 800829e:	f43f ae8b 	beq.w	8007fb8 <_printf_float+0x174>
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80082a8:	ab09      	add	r3, sp, #36	; 0x24
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	ec49 8b10 	vmov	d0, r8, r9
 80082b0:	6022      	str	r2, [r4, #0]
 80082b2:	f8cd a004 	str.w	sl, [sp, #4]
 80082b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082ba:	4628      	mov	r0, r5
 80082bc:	f7ff fd2e 	bl	8007d1c <__cvt>
 80082c0:	4680      	mov	r8, r0
 80082c2:	e648      	b.n	8007f56 <_printf_float+0x112>

080082c4 <_printf_common>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	4691      	mov	r9, r2
 80082ca:	461f      	mov	r7, r3
 80082cc:	688a      	ldr	r2, [r1, #8]
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	bfb8      	it	lt
 80082d8:	4613      	movlt	r3, r2
 80082da:	f8c9 3000 	str.w	r3, [r9]
 80082de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e2:	4606      	mov	r6, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	b112      	cbz	r2, 80082ee <_printf_common+0x2a>
 80082e8:	3301      	adds	r3, #1
 80082ea:	f8c9 3000 	str.w	r3, [r9]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	0699      	lsls	r1, r3, #26
 80082f2:	bf42      	ittt	mi
 80082f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80082f8:	3302      	addmi	r3, #2
 80082fa:	f8c9 3000 	strmi.w	r3, [r9]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d107      	bne.n	8008316 <_printf_common+0x52>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	f8d9 2000 	ldr.w	r2, [r9]
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	42ab      	cmp	r3, r5
 8008314:	dc28      	bgt.n	8008368 <_printf_common+0xa4>
 8008316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	3300      	adds	r3, #0
 800831e:	bf18      	it	ne
 8008320:	2301      	movne	r3, #1
 8008322:	0692      	lsls	r2, r2, #26
 8008324:	d42d      	bmi.n	8008382 <_printf_common+0xbe>
 8008326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800832a:	4639      	mov	r1, r7
 800832c:	4630      	mov	r0, r6
 800832e:	47c0      	blx	r8
 8008330:	3001      	adds	r0, #1
 8008332:	d020      	beq.n	8008376 <_printf_common+0xb2>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	68e5      	ldr	r5, [r4, #12]
 8008338:	f8d9 2000 	ldr.w	r2, [r9]
 800833c:	f003 0306 	and.w	r3, r3, #6
 8008340:	2b04      	cmp	r3, #4
 8008342:	bf08      	it	eq
 8008344:	1aad      	subeq	r5, r5, r2
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	6922      	ldr	r2, [r4, #16]
 800834a:	bf0c      	ite	eq
 800834c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008350:	2500      	movne	r5, #0
 8008352:	4293      	cmp	r3, r2
 8008354:	bfc4      	itt	gt
 8008356:	1a9b      	subgt	r3, r3, r2
 8008358:	18ed      	addgt	r5, r5, r3
 800835a:	f04f 0900 	mov.w	r9, #0
 800835e:	341a      	adds	r4, #26
 8008360:	454d      	cmp	r5, r9
 8008362:	d11a      	bne.n	800839a <_printf_common+0xd6>
 8008364:	2000      	movs	r0, #0
 8008366:	e008      	b.n	800837a <_printf_common+0xb6>
 8008368:	2301      	movs	r3, #1
 800836a:	4652      	mov	r2, sl
 800836c:	4639      	mov	r1, r7
 800836e:	4630      	mov	r0, r6
 8008370:	47c0      	blx	r8
 8008372:	3001      	adds	r0, #1
 8008374:	d103      	bne.n	800837e <_printf_common+0xba>
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	3501      	adds	r5, #1
 8008380:	e7c3      	b.n	800830a <_printf_common+0x46>
 8008382:	18e1      	adds	r1, r4, r3
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	2030      	movs	r0, #48	; 0x30
 8008388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800838c:	4422      	add	r2, r4
 800838e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008396:	3302      	adds	r3, #2
 8008398:	e7c5      	b.n	8008326 <_printf_common+0x62>
 800839a:	2301      	movs	r3, #1
 800839c:	4622      	mov	r2, r4
 800839e:	4639      	mov	r1, r7
 80083a0:	4630      	mov	r0, r6
 80083a2:	47c0      	blx	r8
 80083a4:	3001      	adds	r0, #1
 80083a6:	d0e6      	beq.n	8008376 <_printf_common+0xb2>
 80083a8:	f109 0901 	add.w	r9, r9, #1
 80083ac:	e7d8      	b.n	8008360 <_printf_common+0x9c>
	...

080083b0 <_puts_r>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	460e      	mov	r6, r1
 80083b4:	4605      	mov	r5, r0
 80083b6:	b118      	cbz	r0, 80083c0 <_puts_r+0x10>
 80083b8:	6983      	ldr	r3, [r0, #24]
 80083ba:	b90b      	cbnz	r3, 80083c0 <_puts_r+0x10>
 80083bc:	f001 f850 	bl	8009460 <__sinit>
 80083c0:	69ab      	ldr	r3, [r5, #24]
 80083c2:	68ac      	ldr	r4, [r5, #8]
 80083c4:	b913      	cbnz	r3, 80083cc <_puts_r+0x1c>
 80083c6:	4628      	mov	r0, r5
 80083c8:	f001 f84a 	bl	8009460 <__sinit>
 80083cc:	4b23      	ldr	r3, [pc, #140]	; (800845c <_puts_r+0xac>)
 80083ce:	429c      	cmp	r4, r3
 80083d0:	d117      	bne.n	8008402 <_puts_r+0x52>
 80083d2:	686c      	ldr	r4, [r5, #4]
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	071b      	lsls	r3, r3, #28
 80083d8:	d51d      	bpl.n	8008416 <_puts_r+0x66>
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	b1db      	cbz	r3, 8008416 <_puts_r+0x66>
 80083de:	3e01      	subs	r6, #1
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083e6:	3b01      	subs	r3, #1
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	b9e9      	cbnz	r1, 8008428 <_puts_r+0x78>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	da2e      	bge.n	800844e <_puts_r+0x9e>
 80083f0:	4622      	mov	r2, r4
 80083f2:	210a      	movs	r1, #10
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 f83f 	bl	8008478 <__swbuf_r>
 80083fa:	3001      	adds	r0, #1
 80083fc:	d011      	beq.n	8008422 <_puts_r+0x72>
 80083fe:	200a      	movs	r0, #10
 8008400:	e011      	b.n	8008426 <_puts_r+0x76>
 8008402:	4b17      	ldr	r3, [pc, #92]	; (8008460 <_puts_r+0xb0>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d101      	bne.n	800840c <_puts_r+0x5c>
 8008408:	68ac      	ldr	r4, [r5, #8]
 800840a:	e7e3      	b.n	80083d4 <_puts_r+0x24>
 800840c:	4b15      	ldr	r3, [pc, #84]	; (8008464 <_puts_r+0xb4>)
 800840e:	429c      	cmp	r4, r3
 8008410:	bf08      	it	eq
 8008412:	68ec      	ldreq	r4, [r5, #12]
 8008414:	e7de      	b.n	80083d4 <_puts_r+0x24>
 8008416:	4621      	mov	r1, r4
 8008418:	4628      	mov	r0, r5
 800841a:	f000 f87f 	bl	800851c <__swsetup_r>
 800841e:	2800      	cmp	r0, #0
 8008420:	d0dd      	beq.n	80083de <_puts_r+0x2e>
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	2b00      	cmp	r3, #0
 800842a:	da04      	bge.n	8008436 <_puts_r+0x86>
 800842c:	69a2      	ldr	r2, [r4, #24]
 800842e:	429a      	cmp	r2, r3
 8008430:	dc06      	bgt.n	8008440 <_puts_r+0x90>
 8008432:	290a      	cmp	r1, #10
 8008434:	d004      	beq.n	8008440 <_puts_r+0x90>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	6022      	str	r2, [r4, #0]
 800843c:	7019      	strb	r1, [r3, #0]
 800843e:	e7cf      	b.n	80083e0 <_puts_r+0x30>
 8008440:	4622      	mov	r2, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f818 	bl	8008478 <__swbuf_r>
 8008448:	3001      	adds	r0, #1
 800844a:	d1c9      	bne.n	80083e0 <_puts_r+0x30>
 800844c:	e7e9      	b.n	8008422 <_puts_r+0x72>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	200a      	movs	r0, #10
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	7018      	strb	r0, [r3, #0]
 8008458:	e7e5      	b.n	8008426 <_puts_r+0x76>
 800845a:	bf00      	nop
 800845c:	0800b194 	.word	0x0800b194
 8008460:	0800b1b4 	.word	0x0800b1b4
 8008464:	0800b174 	.word	0x0800b174

08008468 <puts>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <puts+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f7ff bf9f 	b.w	80083b0 <_puts_r>
 8008472:	bf00      	nop
 8008474:	2000000c 	.word	0x2000000c

08008478 <__swbuf_r>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	460e      	mov	r6, r1
 800847c:	4614      	mov	r4, r2
 800847e:	4605      	mov	r5, r0
 8008480:	b118      	cbz	r0, 800848a <__swbuf_r+0x12>
 8008482:	6983      	ldr	r3, [r0, #24]
 8008484:	b90b      	cbnz	r3, 800848a <__swbuf_r+0x12>
 8008486:	f000 ffeb 	bl	8009460 <__sinit>
 800848a:	4b21      	ldr	r3, [pc, #132]	; (8008510 <__swbuf_r+0x98>)
 800848c:	429c      	cmp	r4, r3
 800848e:	d12a      	bne.n	80084e6 <__swbuf_r+0x6e>
 8008490:	686c      	ldr	r4, [r5, #4]
 8008492:	69a3      	ldr	r3, [r4, #24]
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	071a      	lsls	r2, r3, #28
 800849a:	d52e      	bpl.n	80084fa <__swbuf_r+0x82>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	b363      	cbz	r3, 80084fa <__swbuf_r+0x82>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	6820      	ldr	r0, [r4, #0]
 80084a4:	1ac0      	subs	r0, r0, r3
 80084a6:	6963      	ldr	r3, [r4, #20]
 80084a8:	b2f6      	uxtb	r6, r6
 80084aa:	4283      	cmp	r3, r0
 80084ac:	4637      	mov	r7, r6
 80084ae:	dc04      	bgt.n	80084ba <__swbuf_r+0x42>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 ff6a 	bl	800938c <_fflush_r>
 80084b8:	bb28      	cbnz	r0, 8008506 <__swbuf_r+0x8e>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	3b01      	subs	r3, #1
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	701e      	strb	r6, [r3, #0]
 80084c8:	6963      	ldr	r3, [r4, #20]
 80084ca:	3001      	adds	r0, #1
 80084cc:	4283      	cmp	r3, r0
 80084ce:	d004      	beq.n	80084da <__swbuf_r+0x62>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	07db      	lsls	r3, r3, #31
 80084d4:	d519      	bpl.n	800850a <__swbuf_r+0x92>
 80084d6:	2e0a      	cmp	r6, #10
 80084d8:	d117      	bne.n	800850a <__swbuf_r+0x92>
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f000 ff55 	bl	800938c <_fflush_r>
 80084e2:	b190      	cbz	r0, 800850a <__swbuf_r+0x92>
 80084e4:	e00f      	b.n	8008506 <__swbuf_r+0x8e>
 80084e6:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <__swbuf_r+0x9c>)
 80084e8:	429c      	cmp	r4, r3
 80084ea:	d101      	bne.n	80084f0 <__swbuf_r+0x78>
 80084ec:	68ac      	ldr	r4, [r5, #8]
 80084ee:	e7d0      	b.n	8008492 <__swbuf_r+0x1a>
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <__swbuf_r+0xa0>)
 80084f2:	429c      	cmp	r4, r3
 80084f4:	bf08      	it	eq
 80084f6:	68ec      	ldreq	r4, [r5, #12]
 80084f8:	e7cb      	b.n	8008492 <__swbuf_r+0x1a>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 f80d 	bl	800851c <__swsetup_r>
 8008502:	2800      	cmp	r0, #0
 8008504:	d0cc      	beq.n	80084a0 <__swbuf_r+0x28>
 8008506:	f04f 37ff 	mov.w	r7, #4294967295
 800850a:	4638      	mov	r0, r7
 800850c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800850e:	bf00      	nop
 8008510:	0800b194 	.word	0x0800b194
 8008514:	0800b1b4 	.word	0x0800b1b4
 8008518:	0800b174 	.word	0x0800b174

0800851c <__swsetup_r>:
 800851c:	4b32      	ldr	r3, [pc, #200]	; (80085e8 <__swsetup_r+0xcc>)
 800851e:	b570      	push	{r4, r5, r6, lr}
 8008520:	681d      	ldr	r5, [r3, #0]
 8008522:	4606      	mov	r6, r0
 8008524:	460c      	mov	r4, r1
 8008526:	b125      	cbz	r5, 8008532 <__swsetup_r+0x16>
 8008528:	69ab      	ldr	r3, [r5, #24]
 800852a:	b913      	cbnz	r3, 8008532 <__swsetup_r+0x16>
 800852c:	4628      	mov	r0, r5
 800852e:	f000 ff97 	bl	8009460 <__sinit>
 8008532:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <__swsetup_r+0xd0>)
 8008534:	429c      	cmp	r4, r3
 8008536:	d10f      	bne.n	8008558 <__swsetup_r+0x3c>
 8008538:	686c      	ldr	r4, [r5, #4]
 800853a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853e:	b29a      	uxth	r2, r3
 8008540:	0715      	lsls	r5, r2, #28
 8008542:	d42c      	bmi.n	800859e <__swsetup_r+0x82>
 8008544:	06d0      	lsls	r0, r2, #27
 8008546:	d411      	bmi.n	800856c <__swsetup_r+0x50>
 8008548:	2209      	movs	r2, #9
 800854a:	6032      	str	r2, [r6, #0]
 800854c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	e03e      	b.n	80085d6 <__swsetup_r+0xba>
 8008558:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <__swsetup_r+0xd4>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <__swsetup_r+0x46>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7eb      	b.n	800853a <__swsetup_r+0x1e>
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <__swsetup_r+0xd8>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7e6      	b.n	800853a <__swsetup_r+0x1e>
 800856c:	0751      	lsls	r1, r2, #29
 800856e:	d512      	bpl.n	8008596 <__swsetup_r+0x7a>
 8008570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008572:	b141      	cbz	r1, 8008586 <__swsetup_r+0x6a>
 8008574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008578:	4299      	cmp	r1, r3
 800857a:	d002      	beq.n	8008582 <__swsetup_r+0x66>
 800857c:	4630      	mov	r0, r6
 800857e:	f001 fb67 	bl	8009c50 <_free_r>
 8008582:	2300      	movs	r3, #0
 8008584:	6363      	str	r3, [r4, #52]	; 0x34
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	2300      	movs	r3, #0
 8008590:	6063      	str	r3, [r4, #4]
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f043 0308 	orr.w	r3, r3, #8
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	b94b      	cbnz	r3, 80085b6 <__swsetup_r+0x9a>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ac:	d003      	beq.n	80085b6 <__swsetup_r+0x9a>
 80085ae:	4621      	mov	r1, r4
 80085b0:	4630      	mov	r0, r6
 80085b2:	f001 f811 	bl	80095d8 <__smakebuf_r>
 80085b6:	89a2      	ldrh	r2, [r4, #12]
 80085b8:	f012 0301 	ands.w	r3, r2, #1
 80085bc:	d00c      	beq.n	80085d8 <__swsetup_r+0xbc>
 80085be:	2300      	movs	r3, #0
 80085c0:	60a3      	str	r3, [r4, #8]
 80085c2:	6963      	ldr	r3, [r4, #20]
 80085c4:	425b      	negs	r3, r3
 80085c6:	61a3      	str	r3, [r4, #24]
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	b953      	cbnz	r3, 80085e2 <__swsetup_r+0xc6>
 80085cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80085d4:	d1ba      	bne.n	800854c <__swsetup_r+0x30>
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	0792      	lsls	r2, r2, #30
 80085da:	bf58      	it	pl
 80085dc:	6963      	ldrpl	r3, [r4, #20]
 80085de:	60a3      	str	r3, [r4, #8]
 80085e0:	e7f2      	b.n	80085c8 <__swsetup_r+0xac>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e7f7      	b.n	80085d6 <__swsetup_r+0xba>
 80085e6:	bf00      	nop
 80085e8:	2000000c 	.word	0x2000000c
 80085ec:	0800b194 	.word	0x0800b194
 80085f0:	0800b1b4 	.word	0x0800b1b4
 80085f4:	0800b174 	.word	0x0800b174

080085f8 <quorem>:
 80085f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	6903      	ldr	r3, [r0, #16]
 80085fe:	690c      	ldr	r4, [r1, #16]
 8008600:	42a3      	cmp	r3, r4
 8008602:	4680      	mov	r8, r0
 8008604:	f2c0 8082 	blt.w	800870c <quorem+0x114>
 8008608:	3c01      	subs	r4, #1
 800860a:	f101 0714 	add.w	r7, r1, #20
 800860e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008612:	f100 0614 	add.w	r6, r0, #20
 8008616:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800861a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800861e:	eb06 030c 	add.w	r3, r6, ip
 8008622:	3501      	adds	r5, #1
 8008624:	eb07 090c 	add.w	r9, r7, ip
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	fbb0 f5f5 	udiv	r5, r0, r5
 800862e:	b395      	cbz	r5, 8008696 <quorem+0x9e>
 8008630:	f04f 0a00 	mov.w	sl, #0
 8008634:	4638      	mov	r0, r7
 8008636:	46b6      	mov	lr, r6
 8008638:	46d3      	mov	fp, sl
 800863a:	f850 2b04 	ldr.w	r2, [r0], #4
 800863e:	b293      	uxth	r3, r2
 8008640:	fb05 a303 	mla	r3, r5, r3, sl
 8008644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008648:	b29b      	uxth	r3, r3
 800864a:	ebab 0303 	sub.w	r3, fp, r3
 800864e:	0c12      	lsrs	r2, r2, #16
 8008650:	f8de b000 	ldr.w	fp, [lr]
 8008654:	fb05 a202 	mla	r2, r5, r2, sl
 8008658:	fa13 f38b 	uxtah	r3, r3, fp
 800865c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008660:	fa1f fb82 	uxth.w	fp, r2
 8008664:	f8de 2000 	ldr.w	r2, [lr]
 8008668:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800866c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008670:	b29b      	uxth	r3, r3
 8008672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008676:	4581      	cmp	r9, r0
 8008678:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800867c:	f84e 3b04 	str.w	r3, [lr], #4
 8008680:	d2db      	bcs.n	800863a <quorem+0x42>
 8008682:	f856 300c 	ldr.w	r3, [r6, ip]
 8008686:	b933      	cbnz	r3, 8008696 <quorem+0x9e>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	3b04      	subs	r3, #4
 800868c:	429e      	cmp	r6, r3
 800868e:	461a      	mov	r2, r3
 8008690:	d330      	bcc.n	80086f4 <quorem+0xfc>
 8008692:	f8c8 4010 	str.w	r4, [r8, #16]
 8008696:	4640      	mov	r0, r8
 8008698:	f001 fa06 	bl	8009aa8 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	db25      	blt.n	80086ec <quorem+0xf4>
 80086a0:	3501      	adds	r5, #1
 80086a2:	4630      	mov	r0, r6
 80086a4:	f04f 0c00 	mov.w	ip, #0
 80086a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80086ac:	f8d0 e000 	ldr.w	lr, [r0]
 80086b0:	b293      	uxth	r3, r2
 80086b2:	ebac 0303 	sub.w	r3, ip, r3
 80086b6:	0c12      	lsrs	r2, r2, #16
 80086b8:	fa13 f38e 	uxtah	r3, r3, lr
 80086bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ca:	45b9      	cmp	r9, r7
 80086cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086d0:	f840 3b04 	str.w	r3, [r0], #4
 80086d4:	d2e8      	bcs.n	80086a8 <quorem+0xb0>
 80086d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80086da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80086de:	b92a      	cbnz	r2, 80086ec <quorem+0xf4>
 80086e0:	3b04      	subs	r3, #4
 80086e2:	429e      	cmp	r6, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	d30b      	bcc.n	8008700 <quorem+0x108>
 80086e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80086ec:	4628      	mov	r0, r5
 80086ee:	b003      	add	sp, #12
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	3b04      	subs	r3, #4
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d1ca      	bne.n	8008692 <quorem+0x9a>
 80086fc:	3c01      	subs	r4, #1
 80086fe:	e7c5      	b.n	800868c <quorem+0x94>
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	3b04      	subs	r3, #4
 8008704:	2a00      	cmp	r2, #0
 8008706:	d1ef      	bne.n	80086e8 <quorem+0xf0>
 8008708:	3c01      	subs	r4, #1
 800870a:	e7ea      	b.n	80086e2 <quorem+0xea>
 800870c:	2000      	movs	r0, #0
 800870e:	e7ee      	b.n	80086ee <quorem+0xf6>

08008710 <_dtoa_r>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	ec57 6b10 	vmov	r6, r7, d0
 8008718:	b097      	sub	sp, #92	; 0x5c
 800871a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800871c:	9106      	str	r1, [sp, #24]
 800871e:	4604      	mov	r4, r0
 8008720:	920b      	str	r2, [sp, #44]	; 0x2c
 8008722:	9312      	str	r3, [sp, #72]	; 0x48
 8008724:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008728:	e9cd 6700 	strd	r6, r7, [sp]
 800872c:	b93d      	cbnz	r5, 800873e <_dtoa_r+0x2e>
 800872e:	2010      	movs	r0, #16
 8008730:	f000 ff92 	bl	8009658 <malloc>
 8008734:	6260      	str	r0, [r4, #36]	; 0x24
 8008736:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800873a:	6005      	str	r5, [r0, #0]
 800873c:	60c5      	str	r5, [r0, #12]
 800873e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008740:	6819      	ldr	r1, [r3, #0]
 8008742:	b151      	cbz	r1, 800875a <_dtoa_r+0x4a>
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	604a      	str	r2, [r1, #4]
 8008748:	2301      	movs	r3, #1
 800874a:	4093      	lsls	r3, r2
 800874c:	608b      	str	r3, [r1, #8]
 800874e:	4620      	mov	r0, r4
 8008750:	f000 ffc9 	bl	80096e6 <_Bfree>
 8008754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	1e3b      	subs	r3, r7, #0
 800875c:	bfbb      	ittet	lt
 800875e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008762:	9301      	strlt	r3, [sp, #4]
 8008764:	2300      	movge	r3, #0
 8008766:	2201      	movlt	r2, #1
 8008768:	bfac      	ite	ge
 800876a:	f8c8 3000 	strge.w	r3, [r8]
 800876e:	f8c8 2000 	strlt.w	r2, [r8]
 8008772:	4baf      	ldr	r3, [pc, #700]	; (8008a30 <_dtoa_r+0x320>)
 8008774:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008778:	ea33 0308 	bics.w	r3, r3, r8
 800877c:	d114      	bne.n	80087a8 <_dtoa_r+0x98>
 800877e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008780:	f242 730f 	movw	r3, #9999	; 0x270f
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	b923      	cbnz	r3, 8008794 <_dtoa_r+0x84>
 800878a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800878e:	2800      	cmp	r0, #0
 8008790:	f000 8542 	beq.w	8009218 <_dtoa_r+0xb08>
 8008794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008796:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008a44 <_dtoa_r+0x334>
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8544 	beq.w	8009228 <_dtoa_r+0xb18>
 80087a0:	f10b 0303 	add.w	r3, fp, #3
 80087a4:	f000 bd3e 	b.w	8009224 <_dtoa_r+0xb14>
 80087a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 f950 	bl	8000a58 <__aeabi_dcmpeq>
 80087b8:	4681      	mov	r9, r0
 80087ba:	b168      	cbz	r0, 80087d8 <_dtoa_r+0xc8>
 80087bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087be:	2301      	movs	r3, #1
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8524 	beq.w	8009212 <_dtoa_r+0xb02>
 80087ca:	4b9a      	ldr	r3, [pc, #616]	; (8008a34 <_dtoa_r+0x324>)
 80087cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	f000 bd28 	b.w	8009228 <_dtoa_r+0xb18>
 80087d8:	aa14      	add	r2, sp, #80	; 0x50
 80087da:	a915      	add	r1, sp, #84	; 0x54
 80087dc:	ec47 6b10 	vmov	d0, r6, r7
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 f9d8 	bl	8009b96 <__d2b>
 80087e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80087ea:	9004      	str	r0, [sp, #16]
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	d07c      	beq.n	80088ea <_dtoa_r+0x1da>
 80087f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80087f8:	46b2      	mov	sl, r6
 80087fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80087fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008802:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008806:	2200      	movs	r2, #0
 8008808:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <_dtoa_r+0x328>)
 800880a:	4650      	mov	r0, sl
 800880c:	4659      	mov	r1, fp
 800880e:	f7f7 fd03 	bl	8000218 <__aeabi_dsub>
 8008812:	a381      	add	r3, pc, #516	; (adr r3, 8008a18 <_dtoa_r+0x308>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 feb6 	bl	8000588 <__aeabi_dmul>
 800881c:	a380      	add	r3, pc, #512	; (adr r3, 8008a20 <_dtoa_r+0x310>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f7f7 fcfb 	bl	800021c <__adddf3>
 8008826:	4606      	mov	r6, r0
 8008828:	4628      	mov	r0, r5
 800882a:	460f      	mov	r7, r1
 800882c:	f7f7 fe42 	bl	80004b4 <__aeabi_i2d>
 8008830:	a37d      	add	r3, pc, #500	; (adr r3, 8008a28 <_dtoa_r+0x318>)
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	f7f7 fea7 	bl	8000588 <__aeabi_dmul>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4630      	mov	r0, r6
 8008840:	4639      	mov	r1, r7
 8008842:	f7f7 fceb 	bl	800021c <__adddf3>
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	f7f8 f94d 	bl	8000ae8 <__aeabi_d2iz>
 800884e:	2200      	movs	r2, #0
 8008850:	4682      	mov	sl, r0
 8008852:	2300      	movs	r3, #0
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	f7f8 f908 	bl	8000a6c <__aeabi_dcmplt>
 800885c:	b148      	cbz	r0, 8008872 <_dtoa_r+0x162>
 800885e:	4650      	mov	r0, sl
 8008860:	f7f7 fe28 	bl	80004b4 <__aeabi_i2d>
 8008864:	4632      	mov	r2, r6
 8008866:	463b      	mov	r3, r7
 8008868:	f7f8 f8f6 	bl	8000a58 <__aeabi_dcmpeq>
 800886c:	b908      	cbnz	r0, 8008872 <_dtoa_r+0x162>
 800886e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008872:	f1ba 0f16 	cmp.w	sl, #22
 8008876:	d859      	bhi.n	800892c <_dtoa_r+0x21c>
 8008878:	4970      	ldr	r1, [pc, #448]	; (8008a3c <_dtoa_r+0x32c>)
 800887a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800887e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008886:	f7f8 f90f 	bl	8000aa8 <__aeabi_dcmpgt>
 800888a:	2800      	cmp	r0, #0
 800888c:	d050      	beq.n	8008930 <_dtoa_r+0x220>
 800888e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008892:	2300      	movs	r3, #0
 8008894:	930f      	str	r3, [sp, #60]	; 0x3c
 8008896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008898:	1b5d      	subs	r5, r3, r5
 800889a:	f1b5 0801 	subs.w	r8, r5, #1
 800889e:	bf49      	itett	mi
 80088a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80088a4:	2300      	movpl	r3, #0
 80088a6:	9305      	strmi	r3, [sp, #20]
 80088a8:	f04f 0800 	movmi.w	r8, #0
 80088ac:	bf58      	it	pl
 80088ae:	9305      	strpl	r3, [sp, #20]
 80088b0:	f1ba 0f00 	cmp.w	sl, #0
 80088b4:	db3e      	blt.n	8008934 <_dtoa_r+0x224>
 80088b6:	2300      	movs	r3, #0
 80088b8:	44d0      	add	r8, sl
 80088ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	9b06      	ldr	r3, [sp, #24]
 80088c2:	2b09      	cmp	r3, #9
 80088c4:	f200 8090 	bhi.w	80089e8 <_dtoa_r+0x2d8>
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	bfc4      	itt	gt
 80088cc:	3b04      	subgt	r3, #4
 80088ce:	9306      	strgt	r3, [sp, #24]
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	f1a3 0302 	sub.w	r3, r3, #2
 80088d6:	bfcc      	ite	gt
 80088d8:	2500      	movgt	r5, #0
 80088da:	2501      	movle	r5, #1
 80088dc:	2b03      	cmp	r3, #3
 80088de:	f200 808f 	bhi.w	8008a00 <_dtoa_r+0x2f0>
 80088e2:	e8df f003 	tbb	[pc, r3]
 80088e6:	7f7d      	.short	0x7f7d
 80088e8:	7131      	.short	0x7131
 80088ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80088ee:	441d      	add	r5, r3
 80088f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80088f4:	2820      	cmp	r0, #32
 80088f6:	dd13      	ble.n	8008920 <_dtoa_r+0x210>
 80088f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	fa08 f800 	lsl.w	r8, r8, r0
 8008902:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008906:	fa23 f000 	lsr.w	r0, r3, r0
 800890a:	ea48 0000 	orr.w	r0, r8, r0
 800890e:	f7f7 fdc1 	bl	8000494 <__aeabi_ui2d>
 8008912:	2301      	movs	r3, #1
 8008914:	4682      	mov	sl, r0
 8008916:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800891a:	3d01      	subs	r5, #1
 800891c:	9313      	str	r3, [sp, #76]	; 0x4c
 800891e:	e772      	b.n	8008806 <_dtoa_r+0xf6>
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	f1c0 0020 	rsb	r0, r0, #32
 8008926:	fa03 f000 	lsl.w	r0, r3, r0
 800892a:	e7f0      	b.n	800890e <_dtoa_r+0x1fe>
 800892c:	2301      	movs	r3, #1
 800892e:	e7b1      	b.n	8008894 <_dtoa_r+0x184>
 8008930:	900f      	str	r0, [sp, #60]	; 0x3c
 8008932:	e7b0      	b.n	8008896 <_dtoa_r+0x186>
 8008934:	9b05      	ldr	r3, [sp, #20]
 8008936:	eba3 030a 	sub.w	r3, r3, sl
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f1ca 0300 	rsb	r3, sl, #0
 8008940:	9307      	str	r3, [sp, #28]
 8008942:	2300      	movs	r3, #0
 8008944:	930e      	str	r3, [sp, #56]	; 0x38
 8008946:	e7bb      	b.n	80088c0 <_dtoa_r+0x1b0>
 8008948:	2301      	movs	r3, #1
 800894a:	930a      	str	r3, [sp, #40]	; 0x28
 800894c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894e:	2b00      	cmp	r3, #0
 8008950:	dd59      	ble.n	8008a06 <_dtoa_r+0x2f6>
 8008952:	9302      	str	r3, [sp, #8]
 8008954:	4699      	mov	r9, r3
 8008956:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008958:	2200      	movs	r2, #0
 800895a:	6072      	str	r2, [r6, #4]
 800895c:	2204      	movs	r2, #4
 800895e:	f102 0014 	add.w	r0, r2, #20
 8008962:	4298      	cmp	r0, r3
 8008964:	6871      	ldr	r1, [r6, #4]
 8008966:	d953      	bls.n	8008a10 <_dtoa_r+0x300>
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fe88 	bl	800967e <_Balloc>
 800896e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008970:	6030      	str	r0, [r6, #0]
 8008972:	f1b9 0f0e 	cmp.w	r9, #14
 8008976:	f8d3 b000 	ldr.w	fp, [r3]
 800897a:	f200 80e6 	bhi.w	8008b4a <_dtoa_r+0x43a>
 800897e:	2d00      	cmp	r5, #0
 8008980:	f000 80e3 	beq.w	8008b4a <_dtoa_r+0x43a>
 8008984:	ed9d 7b00 	vldr	d7, [sp]
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008990:	dd74      	ble.n	8008a7c <_dtoa_r+0x36c>
 8008992:	4a2a      	ldr	r2, [pc, #168]	; (8008a3c <_dtoa_r+0x32c>)
 8008994:	f00a 030f 	and.w	r3, sl, #15
 8008998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800899c:	ed93 7b00 	vldr	d7, [r3]
 80089a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80089a4:	06f0      	lsls	r0, r6, #27
 80089a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80089aa:	d565      	bpl.n	8008a78 <_dtoa_r+0x368>
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <_dtoa_r+0x330>)
 80089ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b6:	f7f7 ff11 	bl	80007dc <__aeabi_ddiv>
 80089ba:	e9cd 0100 	strd	r0, r1, [sp]
 80089be:	f006 060f 	and.w	r6, r6, #15
 80089c2:	2503      	movs	r5, #3
 80089c4:	4f1e      	ldr	r7, [pc, #120]	; (8008a40 <_dtoa_r+0x330>)
 80089c6:	e04c      	b.n	8008a62 <_dtoa_r+0x352>
 80089c8:	2301      	movs	r3, #1
 80089ca:	930a      	str	r3, [sp, #40]	; 0x28
 80089cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ce:	4453      	add	r3, sl
 80089d0:	f103 0901 	add.w	r9, r3, #1
 80089d4:	9302      	str	r3, [sp, #8]
 80089d6:	464b      	mov	r3, r9
 80089d8:	2b01      	cmp	r3, #1
 80089da:	bfb8      	it	lt
 80089dc:	2301      	movlt	r3, #1
 80089de:	e7ba      	b.n	8008956 <_dtoa_r+0x246>
 80089e0:	2300      	movs	r3, #0
 80089e2:	e7b2      	b.n	800894a <_dtoa_r+0x23a>
 80089e4:	2300      	movs	r3, #0
 80089e6:	e7f0      	b.n	80089ca <_dtoa_r+0x2ba>
 80089e8:	2501      	movs	r5, #1
 80089ea:	2300      	movs	r3, #0
 80089ec:	9306      	str	r3, [sp, #24]
 80089ee:	950a      	str	r5, [sp, #40]	; 0x28
 80089f0:	f04f 33ff 	mov.w	r3, #4294967295
 80089f4:	9302      	str	r3, [sp, #8]
 80089f6:	4699      	mov	r9, r3
 80089f8:	2200      	movs	r2, #0
 80089fa:	2312      	movs	r3, #18
 80089fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80089fe:	e7aa      	b.n	8008956 <_dtoa_r+0x246>
 8008a00:	2301      	movs	r3, #1
 8008a02:	930a      	str	r3, [sp, #40]	; 0x28
 8008a04:	e7f4      	b.n	80089f0 <_dtoa_r+0x2e0>
 8008a06:	2301      	movs	r3, #1
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	4699      	mov	r9, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	e7f5      	b.n	80089fc <_dtoa_r+0x2ec>
 8008a10:	3101      	adds	r1, #1
 8008a12:	6071      	str	r1, [r6, #4]
 8008a14:	0052      	lsls	r2, r2, #1
 8008a16:	e7a2      	b.n	800895e <_dtoa_r+0x24e>
 8008a18:	636f4361 	.word	0x636f4361
 8008a1c:	3fd287a7 	.word	0x3fd287a7
 8008a20:	8b60c8b3 	.word	0x8b60c8b3
 8008a24:	3fc68a28 	.word	0x3fc68a28
 8008a28:	509f79fb 	.word	0x509f79fb
 8008a2c:	3fd34413 	.word	0x3fd34413
 8008a30:	7ff00000 	.word	0x7ff00000
 8008a34:	0800b165 	.word	0x0800b165
 8008a38:	3ff80000 	.word	0x3ff80000
 8008a3c:	0800b200 	.word	0x0800b200
 8008a40:	0800b1d8 	.word	0x0800b1d8
 8008a44:	0800b16f 	.word	0x0800b16f
 8008a48:	07f1      	lsls	r1, r6, #31
 8008a4a:	d508      	bpl.n	8008a5e <_dtoa_r+0x34e>
 8008a4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a54:	f7f7 fd98 	bl	8000588 <__aeabi_dmul>
 8008a58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	1076      	asrs	r6, r6, #1
 8008a60:	3708      	adds	r7, #8
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	d1f0      	bne.n	8008a48 <_dtoa_r+0x338>
 8008a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a6e:	f7f7 feb5 	bl	80007dc <__aeabi_ddiv>
 8008a72:	e9cd 0100 	strd	r0, r1, [sp]
 8008a76:	e01a      	b.n	8008aae <_dtoa_r+0x39e>
 8008a78:	2502      	movs	r5, #2
 8008a7a:	e7a3      	b.n	80089c4 <_dtoa_r+0x2b4>
 8008a7c:	f000 80a0 	beq.w	8008bc0 <_dtoa_r+0x4b0>
 8008a80:	f1ca 0600 	rsb	r6, sl, #0
 8008a84:	4b9f      	ldr	r3, [pc, #636]	; (8008d04 <_dtoa_r+0x5f4>)
 8008a86:	4fa0      	ldr	r7, [pc, #640]	; (8008d08 <_dtoa_r+0x5f8>)
 8008a88:	f006 020f 	and.w	r2, r6, #15
 8008a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a98:	f7f7 fd76 	bl	8000588 <__aeabi_dmul>
 8008a9c:	e9cd 0100 	strd	r0, r1, [sp]
 8008aa0:	1136      	asrs	r6, r6, #4
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2502      	movs	r5, #2
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d17f      	bne.n	8008baa <_dtoa_r+0x49a>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e1      	bne.n	8008a72 <_dtoa_r+0x362>
 8008aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 8087 	beq.w	8008bc4 <_dtoa_r+0x4b4>
 8008ab6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008aba:	2200      	movs	r2, #0
 8008abc:	4b93      	ldr	r3, [pc, #588]	; (8008d0c <_dtoa_r+0x5fc>)
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 ffd3 	bl	8000a6c <__aeabi_dcmplt>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d07c      	beq.n	8008bc4 <_dtoa_r+0x4b4>
 8008aca:	f1b9 0f00 	cmp.w	r9, #0
 8008ace:	d079      	beq.n	8008bc4 <_dtoa_r+0x4b4>
 8008ad0:	9b02      	ldr	r3, [sp, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	dd35      	ble.n	8008b42 <_dtoa_r+0x432>
 8008ad6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ada:	9308      	str	r3, [sp, #32]
 8008adc:	4639      	mov	r1, r7
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4b8b      	ldr	r3, [pc, #556]	; (8008d10 <_dtoa_r+0x600>)
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7f7 fd50 	bl	8000588 <__aeabi_dmul>
 8008ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8008aec:	9f02      	ldr	r7, [sp, #8]
 8008aee:	3501      	adds	r5, #1
 8008af0:	4628      	mov	r0, r5
 8008af2:	f7f7 fcdf 	bl	80004b4 <__aeabi_i2d>
 8008af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008afa:	f7f7 fd45 	bl	8000588 <__aeabi_dmul>
 8008afe:	2200      	movs	r2, #0
 8008b00:	4b84      	ldr	r3, [pc, #528]	; (8008d14 <_dtoa_r+0x604>)
 8008b02:	f7f7 fb8b 	bl	800021c <__adddf3>
 8008b06:	4605      	mov	r5, r0
 8008b08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b0c:	2f00      	cmp	r7, #0
 8008b0e:	d15d      	bne.n	8008bcc <_dtoa_r+0x4bc>
 8008b10:	2200      	movs	r2, #0
 8008b12:	4b81      	ldr	r3, [pc, #516]	; (8008d18 <_dtoa_r+0x608>)
 8008b14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b18:	f7f7 fb7e 	bl	8000218 <__aeabi_dsub>
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4633      	mov	r3, r6
 8008b20:	e9cd 0100 	strd	r0, r1, [sp]
 8008b24:	f7f7 ffc0 	bl	8000aa8 <__aeabi_dcmpgt>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f040 8288 	bne.w	800903e <_dtoa_r+0x92e>
 8008b2e:	462a      	mov	r2, r5
 8008b30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b38:	f7f7 ff98 	bl	8000a6c <__aeabi_dcmplt>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f040 827c 	bne.w	800903a <_dtoa_r+0x92a>
 8008b42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b46:	e9cd 2300 	strd	r2, r3, [sp]
 8008b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f2c0 8150 	blt.w	8008df2 <_dtoa_r+0x6e2>
 8008b52:	f1ba 0f0e 	cmp.w	sl, #14
 8008b56:	f300 814c 	bgt.w	8008df2 <_dtoa_r+0x6e2>
 8008b5a:	4b6a      	ldr	r3, [pc, #424]	; (8008d04 <_dtoa_r+0x5f4>)
 8008b5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b60:	ed93 7b00 	vldr	d7, [r3]
 8008b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b6c:	f280 80d8 	bge.w	8008d20 <_dtoa_r+0x610>
 8008b70:	f1b9 0f00 	cmp.w	r9, #0
 8008b74:	f300 80d4 	bgt.w	8008d20 <_dtoa_r+0x610>
 8008b78:	f040 825e 	bne.w	8009038 <_dtoa_r+0x928>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4b66      	ldr	r3, [pc, #408]	; (8008d18 <_dtoa_r+0x608>)
 8008b80:	ec51 0b17 	vmov	r0, r1, d7
 8008b84:	f7f7 fd00 	bl	8000588 <__aeabi_dmul>
 8008b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8c:	f7f7 ff82 	bl	8000a94 <__aeabi_dcmpge>
 8008b90:	464f      	mov	r7, r9
 8008b92:	464e      	mov	r6, r9
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f040 8234 	bne.w	8009002 <_dtoa_r+0x8f2>
 8008b9a:	2331      	movs	r3, #49	; 0x31
 8008b9c:	f10b 0501 	add.w	r5, fp, #1
 8008ba0:	f88b 3000 	strb.w	r3, [fp]
 8008ba4:	f10a 0a01 	add.w	sl, sl, #1
 8008ba8:	e22f      	b.n	800900a <_dtoa_r+0x8fa>
 8008baa:	07f2      	lsls	r2, r6, #31
 8008bac:	d505      	bpl.n	8008bba <_dtoa_r+0x4aa>
 8008bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb2:	f7f7 fce9 	bl	8000588 <__aeabi_dmul>
 8008bb6:	3501      	adds	r5, #1
 8008bb8:	2301      	movs	r3, #1
 8008bba:	1076      	asrs	r6, r6, #1
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	e772      	b.n	8008aa6 <_dtoa_r+0x396>
 8008bc0:	2502      	movs	r5, #2
 8008bc2:	e774      	b.n	8008aae <_dtoa_r+0x39e>
 8008bc4:	f8cd a020 	str.w	sl, [sp, #32]
 8008bc8:	464f      	mov	r7, r9
 8008bca:	e791      	b.n	8008af0 <_dtoa_r+0x3e0>
 8008bcc:	4b4d      	ldr	r3, [pc, #308]	; (8008d04 <_dtoa_r+0x5f4>)
 8008bce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d047      	beq.n	8008c6c <_dtoa_r+0x55c>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	2000      	movs	r0, #0
 8008be2:	494e      	ldr	r1, [pc, #312]	; (8008d1c <_dtoa_r+0x60c>)
 8008be4:	f7f7 fdfa 	bl	80007dc <__aeabi_ddiv>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4633      	mov	r3, r6
 8008bec:	f7f7 fb14 	bl	8000218 <__aeabi_dsub>
 8008bf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bf4:	465d      	mov	r5, fp
 8008bf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bfa:	f7f7 ff75 	bl	8000ae8 <__aeabi_d2iz>
 8008bfe:	4606      	mov	r6, r0
 8008c00:	f7f7 fc58 	bl	80004b4 <__aeabi_i2d>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c0c:	f7f7 fb04 	bl	8000218 <__aeabi_dsub>
 8008c10:	3630      	adds	r6, #48	; 0x30
 8008c12:	f805 6b01 	strb.w	r6, [r5], #1
 8008c16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c1e:	f7f7 ff25 	bl	8000a6c <__aeabi_dcmplt>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d163      	bne.n	8008cee <_dtoa_r+0x5de>
 8008c26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	4937      	ldr	r1, [pc, #220]	; (8008d0c <_dtoa_r+0x5fc>)
 8008c2e:	f7f7 faf3 	bl	8000218 <__aeabi_dsub>
 8008c32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c36:	f7f7 ff19 	bl	8000a6c <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f040 80b7 	bne.w	8008dae <_dtoa_r+0x69e>
 8008c40:	eba5 030b 	sub.w	r3, r5, fp
 8008c44:	429f      	cmp	r7, r3
 8008c46:	f77f af7c 	ble.w	8008b42 <_dtoa_r+0x432>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4b30      	ldr	r3, [pc, #192]	; (8008d10 <_dtoa_r+0x600>)
 8008c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c52:	f7f7 fc99 	bl	8000588 <__aeabi_dmul>
 8008c56:	2200      	movs	r2, #0
 8008c58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c5c:	4b2c      	ldr	r3, [pc, #176]	; (8008d10 <_dtoa_r+0x600>)
 8008c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c62:	f7f7 fc91 	bl	8000588 <__aeabi_dmul>
 8008c66:	e9cd 0100 	strd	r0, r1, [sp]
 8008c6a:	e7c4      	b.n	8008bf6 <_dtoa_r+0x4e6>
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	4633      	mov	r3, r6
 8008c70:	f7f7 fc8a 	bl	8000588 <__aeabi_dmul>
 8008c74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008c78:	eb0b 0507 	add.w	r5, fp, r7
 8008c7c:	465e      	mov	r6, fp
 8008c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c82:	f7f7 ff31 	bl	8000ae8 <__aeabi_d2iz>
 8008c86:	4607      	mov	r7, r0
 8008c88:	f7f7 fc14 	bl	80004b4 <__aeabi_i2d>
 8008c8c:	3730      	adds	r7, #48	; 0x30
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c96:	f7f7 fabf 	bl	8000218 <__aeabi_dsub>
 8008c9a:	f806 7b01 	strb.w	r7, [r6], #1
 8008c9e:	42ae      	cmp	r6, r5
 8008ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	d126      	bne.n	8008cf8 <_dtoa_r+0x5e8>
 8008caa:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <_dtoa_r+0x60c>)
 8008cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cb0:	f7f7 fab4 	bl	800021c <__adddf3>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cbc:	f7f7 fef4 	bl	8000aa8 <__aeabi_dcmpgt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d174      	bne.n	8008dae <_dtoa_r+0x69e>
 8008cc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cc8:	2000      	movs	r0, #0
 8008cca:	4914      	ldr	r1, [pc, #80]	; (8008d1c <_dtoa_r+0x60c>)
 8008ccc:	f7f7 faa4 	bl	8000218 <__aeabi_dsub>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd8:	f7f7 fec8 	bl	8000a6c <__aeabi_dcmplt>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	f43f af30 	beq.w	8008b42 <_dtoa_r+0x432>
 8008ce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ce6:	2b30      	cmp	r3, #48	; 0x30
 8008ce8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cec:	d002      	beq.n	8008cf4 <_dtoa_r+0x5e4>
 8008cee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008cf2:	e04a      	b.n	8008d8a <_dtoa_r+0x67a>
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	e7f4      	b.n	8008ce2 <_dtoa_r+0x5d2>
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <_dtoa_r+0x600>)
 8008cfa:	f7f7 fc45 	bl	8000588 <__aeabi_dmul>
 8008cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8008d02:	e7bc      	b.n	8008c7e <_dtoa_r+0x56e>
 8008d04:	0800b200 	.word	0x0800b200
 8008d08:	0800b1d8 	.word	0x0800b1d8
 8008d0c:	3ff00000 	.word	0x3ff00000
 8008d10:	40240000 	.word	0x40240000
 8008d14:	401c0000 	.word	0x401c0000
 8008d18:	40140000 	.word	0x40140000
 8008d1c:	3fe00000 	.word	0x3fe00000
 8008d20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d24:	465d      	mov	r5, fp
 8008d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f7 fd55 	bl	80007dc <__aeabi_ddiv>
 8008d32:	f7f7 fed9 	bl	8000ae8 <__aeabi_d2iz>
 8008d36:	4680      	mov	r8, r0
 8008d38:	f7f7 fbbc 	bl	80004b4 <__aeabi_i2d>
 8008d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d40:	f7f7 fc22 	bl	8000588 <__aeabi_dmul>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008d50:	f7f7 fa62 	bl	8000218 <__aeabi_dsub>
 8008d54:	f805 6b01 	strb.w	r6, [r5], #1
 8008d58:	eba5 060b 	sub.w	r6, r5, fp
 8008d5c:	45b1      	cmp	r9, r6
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	d139      	bne.n	8008dd8 <_dtoa_r+0x6c8>
 8008d64:	f7f7 fa5a 	bl	800021c <__adddf3>
 8008d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f7f7 fe9a 	bl	8000aa8 <__aeabi_dcmpgt>
 8008d74:	b9c8      	cbnz	r0, 8008daa <_dtoa_r+0x69a>
 8008d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fe6b 	bl	8000a58 <__aeabi_dcmpeq>
 8008d82:	b110      	cbz	r0, 8008d8a <_dtoa_r+0x67a>
 8008d84:	f018 0f01 	tst.w	r8, #1
 8008d88:	d10f      	bne.n	8008daa <_dtoa_r+0x69a>
 8008d8a:	9904      	ldr	r1, [sp, #16]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fcaa 	bl	80096e6 <_Bfree>
 8008d92:	2300      	movs	r3, #0
 8008d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d96:	702b      	strb	r3, [r5, #0]
 8008d98:	f10a 0301 	add.w	r3, sl, #1
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8241 	beq.w	8009228 <_dtoa_r+0xb18>
 8008da6:	601d      	str	r5, [r3, #0]
 8008da8:	e23e      	b.n	8009228 <_dtoa_r+0xb18>
 8008daa:	f8cd a020 	str.w	sl, [sp, #32]
 8008dae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008db2:	2a39      	cmp	r2, #57	; 0x39
 8008db4:	f105 33ff 	add.w	r3, r5, #4294967295
 8008db8:	d108      	bne.n	8008dcc <_dtoa_r+0x6bc>
 8008dba:	459b      	cmp	fp, r3
 8008dbc:	d10a      	bne.n	8008dd4 <_dtoa_r+0x6c4>
 8008dbe:	9b08      	ldr	r3, [sp, #32]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	2330      	movs	r3, #48	; 0x30
 8008dc6:	f88b 3000 	strb.w	r3, [fp]
 8008dca:	465b      	mov	r3, fp
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	3201      	adds	r2, #1
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e78c      	b.n	8008cee <_dtoa_r+0x5de>
 8008dd4:	461d      	mov	r5, r3
 8008dd6:	e7ea      	b.n	8008dae <_dtoa_r+0x69e>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	4b9b      	ldr	r3, [pc, #620]	; (8009048 <_dtoa_r+0x938>)
 8008ddc:	f7f7 fbd4 	bl	8000588 <__aeabi_dmul>
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	f7f7 fe36 	bl	8000a58 <__aeabi_dcmpeq>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d09a      	beq.n	8008d26 <_dtoa_r+0x616>
 8008df0:	e7cb      	b.n	8008d8a <_dtoa_r+0x67a>
 8008df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	f000 808b 	beq.w	8008f10 <_dtoa_r+0x800>
 8008dfa:	9a06      	ldr	r2, [sp, #24]
 8008dfc:	2a01      	cmp	r2, #1
 8008dfe:	dc6e      	bgt.n	8008ede <_dtoa_r+0x7ce>
 8008e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d067      	beq.n	8008ed6 <_dtoa_r+0x7c6>
 8008e06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e0a:	9f07      	ldr	r7, [sp, #28]
 8008e0c:	9d05      	ldr	r5, [sp, #20]
 8008e0e:	9a05      	ldr	r2, [sp, #20]
 8008e10:	2101      	movs	r1, #1
 8008e12:	441a      	add	r2, r3
 8008e14:	4620      	mov	r0, r4
 8008e16:	9205      	str	r2, [sp, #20]
 8008e18:	4498      	add	r8, r3
 8008e1a:	f000 fd04 	bl	8009826 <__i2b>
 8008e1e:	4606      	mov	r6, r0
 8008e20:	2d00      	cmp	r5, #0
 8008e22:	dd0c      	ble.n	8008e3e <_dtoa_r+0x72e>
 8008e24:	f1b8 0f00 	cmp.w	r8, #0
 8008e28:	dd09      	ble.n	8008e3e <_dtoa_r+0x72e>
 8008e2a:	4545      	cmp	r5, r8
 8008e2c:	9a05      	ldr	r2, [sp, #20]
 8008e2e:	462b      	mov	r3, r5
 8008e30:	bfa8      	it	ge
 8008e32:	4643      	movge	r3, r8
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	9205      	str	r2, [sp, #20]
 8008e38:	1aed      	subs	r5, r5, r3
 8008e3a:	eba8 0803 	sub.w	r8, r8, r3
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	b1eb      	cbz	r3, 8008e7e <_dtoa_r+0x76e>
 8008e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d067      	beq.n	8008f18 <_dtoa_r+0x808>
 8008e48:	b18f      	cbz	r7, 8008e6e <_dtoa_r+0x75e>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	463a      	mov	r2, r7
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fd88 	bl	8009964 <__pow5mult>
 8008e54:	9a04      	ldr	r2, [sp, #16]
 8008e56:	4601      	mov	r1, r0
 8008e58:	4606      	mov	r6, r0
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fcec 	bl	8009838 <__multiply>
 8008e60:	9904      	ldr	r1, [sp, #16]
 8008e62:	9008      	str	r0, [sp, #32]
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 fc3e 	bl	80096e6 <_Bfree>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	9b07      	ldr	r3, [sp, #28]
 8008e70:	1bda      	subs	r2, r3, r7
 8008e72:	d004      	beq.n	8008e7e <_dtoa_r+0x76e>
 8008e74:	9904      	ldr	r1, [sp, #16]
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 fd74 	bl	8009964 <__pow5mult>
 8008e7c:	9004      	str	r0, [sp, #16]
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fcd0 	bl	8009826 <__i2b>
 8008e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e88:	4607      	mov	r7, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 81d0 	beq.w	8009230 <_dtoa_r+0xb20>
 8008e90:	461a      	mov	r2, r3
 8008e92:	4601      	mov	r1, r0
 8008e94:	4620      	mov	r0, r4
 8008e96:	f000 fd65 	bl	8009964 <__pow5mult>
 8008e9a:	9b06      	ldr	r3, [sp, #24]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	dc40      	bgt.n	8008f24 <_dtoa_r+0x814>
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d139      	bne.n	8008f1c <_dtoa_r+0x80c>
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d136      	bne.n	8008f20 <_dtoa_r+0x810>
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	0d1b      	lsrs	r3, r3, #20
 8008eba:	051b      	lsls	r3, r3, #20
 8008ebc:	b12b      	cbz	r3, 8008eca <_dtoa_r+0x7ba>
 8008ebe:	9b05      	ldr	r3, [sp, #20]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9307      	str	r3, [sp, #28]
 8008ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d12a      	bne.n	8008f28 <_dtoa_r+0x818>
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e030      	b.n	8008f38 <_dtoa_r+0x828>
 8008ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ed8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008edc:	e795      	b.n	8008e0a <_dtoa_r+0x6fa>
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	f109 37ff 	add.w	r7, r9, #4294967295
 8008ee4:	42bb      	cmp	r3, r7
 8008ee6:	bfbf      	itttt	lt
 8008ee8:	9b07      	ldrlt	r3, [sp, #28]
 8008eea:	9707      	strlt	r7, [sp, #28]
 8008eec:	1afa      	sublt	r2, r7, r3
 8008eee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ef0:	bfbb      	ittet	lt
 8008ef2:	189b      	addlt	r3, r3, r2
 8008ef4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008ef6:	1bdf      	subge	r7, r3, r7
 8008ef8:	2700      	movlt	r7, #0
 8008efa:	f1b9 0f00 	cmp.w	r9, #0
 8008efe:	bfb5      	itete	lt
 8008f00:	9b05      	ldrlt	r3, [sp, #20]
 8008f02:	9d05      	ldrge	r5, [sp, #20]
 8008f04:	eba3 0509 	sublt.w	r5, r3, r9
 8008f08:	464b      	movge	r3, r9
 8008f0a:	bfb8      	it	lt
 8008f0c:	2300      	movlt	r3, #0
 8008f0e:	e77e      	b.n	8008e0e <_dtoa_r+0x6fe>
 8008f10:	9f07      	ldr	r7, [sp, #28]
 8008f12:	9d05      	ldr	r5, [sp, #20]
 8008f14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008f16:	e783      	b.n	8008e20 <_dtoa_r+0x710>
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	e7ab      	b.n	8008e74 <_dtoa_r+0x764>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e7d4      	b.n	8008eca <_dtoa_r+0x7ba>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	e7d2      	b.n	8008eca <_dtoa_r+0x7ba>
 8008f24:	2300      	movs	r3, #0
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008f2e:	6918      	ldr	r0, [r3, #16]
 8008f30:	f000 fc2b 	bl	800978a <__hi0bits>
 8008f34:	f1c0 0020 	rsb	r0, r0, #32
 8008f38:	4440      	add	r0, r8
 8008f3a:	f010 001f 	ands.w	r0, r0, #31
 8008f3e:	d047      	beq.n	8008fd0 <_dtoa_r+0x8c0>
 8008f40:	f1c0 0320 	rsb	r3, r0, #32
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	dd3b      	ble.n	8008fc0 <_dtoa_r+0x8b0>
 8008f48:	9b05      	ldr	r3, [sp, #20]
 8008f4a:	f1c0 001c 	rsb	r0, r0, #28
 8008f4e:	4403      	add	r3, r0
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	4405      	add	r5, r0
 8008f54:	4480      	add	r8, r0
 8008f56:	9b05      	ldr	r3, [sp, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dd05      	ble.n	8008f68 <_dtoa_r+0x858>
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	9904      	ldr	r1, [sp, #16]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fd4d 	bl	8009a00 <__lshift>
 8008f66:	9004      	str	r0, [sp, #16]
 8008f68:	f1b8 0f00 	cmp.w	r8, #0
 8008f6c:	dd05      	ble.n	8008f7a <_dtoa_r+0x86a>
 8008f6e:	4639      	mov	r1, r7
 8008f70:	4642      	mov	r2, r8
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fd44 	bl	8009a00 <__lshift>
 8008f78:	4607      	mov	r7, r0
 8008f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f7c:	b353      	cbz	r3, 8008fd4 <_dtoa_r+0x8c4>
 8008f7e:	4639      	mov	r1, r7
 8008f80:	9804      	ldr	r0, [sp, #16]
 8008f82:	f000 fd91 	bl	8009aa8 <__mcmp>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	da24      	bge.n	8008fd4 <_dtoa_r+0x8c4>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	9904      	ldr	r1, [sp, #16]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fbbf 	bl	8009714 <__multadd>
 8008f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f98:	9004      	str	r0, [sp, #16]
 8008f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 814d 	beq.w	800923e <_dtoa_r+0xb2e>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	220a      	movs	r2, #10
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 fbb2 	bl	8009714 <__multadd>
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	dc4f      	bgt.n	8009058 <_dtoa_r+0x948>
 8008fb8:	9b06      	ldr	r3, [sp, #24]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	dd4c      	ble.n	8009058 <_dtoa_r+0x948>
 8008fbe:	e011      	b.n	8008fe4 <_dtoa_r+0x8d4>
 8008fc0:	d0c9      	beq.n	8008f56 <_dtoa_r+0x846>
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	331c      	adds	r3, #28
 8008fc6:	441a      	add	r2, r3
 8008fc8:	9205      	str	r2, [sp, #20]
 8008fca:	441d      	add	r5, r3
 8008fcc:	4498      	add	r8, r3
 8008fce:	e7c2      	b.n	8008f56 <_dtoa_r+0x846>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	e7f6      	b.n	8008fc2 <_dtoa_r+0x8b2>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	dc38      	bgt.n	800904c <_dtoa_r+0x93c>
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	dd35      	ble.n	800904c <_dtoa_r+0x93c>
 8008fe0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	b963      	cbnz	r3, 8009002 <_dtoa_r+0x8f2>
 8008fe8:	4639      	mov	r1, r7
 8008fea:	2205      	movs	r2, #5
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fb91 	bl	8009714 <__multadd>
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	9804      	ldr	r0, [sp, #16]
 8008ff8:	f000 fd56 	bl	8009aa8 <__mcmp>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f73f adcc 	bgt.w	8008b9a <_dtoa_r+0x48a>
 8009002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009004:	465d      	mov	r5, fp
 8009006:	ea6f 0a03 	mvn.w	sl, r3
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	4639      	mov	r1, r7
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fb68 	bl	80096e6 <_Bfree>
 8009016:	2e00      	cmp	r6, #0
 8009018:	f43f aeb7 	beq.w	8008d8a <_dtoa_r+0x67a>
 800901c:	f1b9 0f00 	cmp.w	r9, #0
 8009020:	d005      	beq.n	800902e <_dtoa_r+0x91e>
 8009022:	45b1      	cmp	r9, r6
 8009024:	d003      	beq.n	800902e <_dtoa_r+0x91e>
 8009026:	4649      	mov	r1, r9
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fb5c 	bl	80096e6 <_Bfree>
 800902e:	4631      	mov	r1, r6
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fb58 	bl	80096e6 <_Bfree>
 8009036:	e6a8      	b.n	8008d8a <_dtoa_r+0x67a>
 8009038:	2700      	movs	r7, #0
 800903a:	463e      	mov	r6, r7
 800903c:	e7e1      	b.n	8009002 <_dtoa_r+0x8f2>
 800903e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009042:	463e      	mov	r6, r7
 8009044:	e5a9      	b.n	8008b9a <_dtoa_r+0x48a>
 8009046:	bf00      	nop
 8009048:	40240000 	.word	0x40240000
 800904c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80fa 	beq.w	800924c <_dtoa_r+0xb3c>
 8009058:	2d00      	cmp	r5, #0
 800905a:	dd05      	ble.n	8009068 <_dtoa_r+0x958>
 800905c:	4631      	mov	r1, r6
 800905e:	462a      	mov	r2, r5
 8009060:	4620      	mov	r0, r4
 8009062:	f000 fccd 	bl	8009a00 <__lshift>
 8009066:	4606      	mov	r6, r0
 8009068:	9b07      	ldr	r3, [sp, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d04c      	beq.n	8009108 <_dtoa_r+0x9f8>
 800906e:	6871      	ldr	r1, [r6, #4]
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fb04 	bl	800967e <_Balloc>
 8009076:	6932      	ldr	r2, [r6, #16]
 8009078:	3202      	adds	r2, #2
 800907a:	4605      	mov	r5, r0
 800907c:	0092      	lsls	r2, r2, #2
 800907e:	f106 010c 	add.w	r1, r6, #12
 8009082:	300c      	adds	r0, #12
 8009084:	f000 faf0 	bl	8009668 <memcpy>
 8009088:	2201      	movs	r2, #1
 800908a:	4629      	mov	r1, r5
 800908c:	4620      	mov	r0, r4
 800908e:	f000 fcb7 	bl	8009a00 <__lshift>
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	f8cd b014 	str.w	fp, [sp, #20]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	46b1      	mov	r9, r6
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	4606      	mov	r6, r0
 80090a2:	4639      	mov	r1, r7
 80090a4:	9804      	ldr	r0, [sp, #16]
 80090a6:	f7ff faa7 	bl	80085f8 <quorem>
 80090aa:	4649      	mov	r1, r9
 80090ac:	4605      	mov	r5, r0
 80090ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80090b2:	9804      	ldr	r0, [sp, #16]
 80090b4:	f000 fcf8 	bl	8009aa8 <__mcmp>
 80090b8:	4632      	mov	r2, r6
 80090ba:	9000      	str	r0, [sp, #0]
 80090bc:	4639      	mov	r1, r7
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 fd0c 	bl	8009adc <__mdiff>
 80090c4:	68c3      	ldr	r3, [r0, #12]
 80090c6:	4602      	mov	r2, r0
 80090c8:	bb03      	cbnz	r3, 800910c <_dtoa_r+0x9fc>
 80090ca:	4601      	mov	r1, r0
 80090cc:	9008      	str	r0, [sp, #32]
 80090ce:	9804      	ldr	r0, [sp, #16]
 80090d0:	f000 fcea 	bl	8009aa8 <__mcmp>
 80090d4:	9a08      	ldr	r2, [sp, #32]
 80090d6:	4603      	mov	r3, r0
 80090d8:	4611      	mov	r1, r2
 80090da:	4620      	mov	r0, r4
 80090dc:	9308      	str	r3, [sp, #32]
 80090de:	f000 fb02 	bl	80096e6 <_Bfree>
 80090e2:	9b08      	ldr	r3, [sp, #32]
 80090e4:	b9a3      	cbnz	r3, 8009110 <_dtoa_r+0xa00>
 80090e6:	9a06      	ldr	r2, [sp, #24]
 80090e8:	b992      	cbnz	r2, 8009110 <_dtoa_r+0xa00>
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	b982      	cbnz	r2, 8009110 <_dtoa_r+0xa00>
 80090ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090f2:	d029      	beq.n	8009148 <_dtoa_r+0xa38>
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd01      	ble.n	80090fe <_dtoa_r+0x9ee>
 80090fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	1c5d      	adds	r5, r3, #1
 8009102:	f883 8000 	strb.w	r8, [r3]
 8009106:	e782      	b.n	800900e <_dtoa_r+0x8fe>
 8009108:	4630      	mov	r0, r6
 800910a:	e7c2      	b.n	8009092 <_dtoa_r+0x982>
 800910c:	2301      	movs	r3, #1
 800910e:	e7e3      	b.n	80090d8 <_dtoa_r+0x9c8>
 8009110:	9a00      	ldr	r2, [sp, #0]
 8009112:	2a00      	cmp	r2, #0
 8009114:	db04      	blt.n	8009120 <_dtoa_r+0xa10>
 8009116:	d125      	bne.n	8009164 <_dtoa_r+0xa54>
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	bb1a      	cbnz	r2, 8009164 <_dtoa_r+0xa54>
 800911c:	9a07      	ldr	r2, [sp, #28]
 800911e:	bb0a      	cbnz	r2, 8009164 <_dtoa_r+0xa54>
 8009120:	2b00      	cmp	r3, #0
 8009122:	ddec      	ble.n	80090fe <_dtoa_r+0x9ee>
 8009124:	2201      	movs	r2, #1
 8009126:	9904      	ldr	r1, [sp, #16]
 8009128:	4620      	mov	r0, r4
 800912a:	f000 fc69 	bl	8009a00 <__lshift>
 800912e:	4639      	mov	r1, r7
 8009130:	9004      	str	r0, [sp, #16]
 8009132:	f000 fcb9 	bl	8009aa8 <__mcmp>
 8009136:	2800      	cmp	r0, #0
 8009138:	dc03      	bgt.n	8009142 <_dtoa_r+0xa32>
 800913a:	d1e0      	bne.n	80090fe <_dtoa_r+0x9ee>
 800913c:	f018 0f01 	tst.w	r8, #1
 8009140:	d0dd      	beq.n	80090fe <_dtoa_r+0x9ee>
 8009142:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009146:	d1d8      	bne.n	80090fa <_dtoa_r+0x9ea>
 8009148:	9b05      	ldr	r3, [sp, #20]
 800914a:	9a05      	ldr	r2, [sp, #20]
 800914c:	1c5d      	adds	r5, r3, #1
 800914e:	2339      	movs	r3, #57	; 0x39
 8009150:	7013      	strb	r3, [r2, #0]
 8009152:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009156:	2b39      	cmp	r3, #57	; 0x39
 8009158:	f105 32ff 	add.w	r2, r5, #4294967295
 800915c:	d04f      	beq.n	80091fe <_dtoa_r+0xaee>
 800915e:	3301      	adds	r3, #1
 8009160:	7013      	strb	r3, [r2, #0]
 8009162:	e754      	b.n	800900e <_dtoa_r+0x8fe>
 8009164:	9a05      	ldr	r2, [sp, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f102 0501 	add.w	r5, r2, #1
 800916c:	dd06      	ble.n	800917c <_dtoa_r+0xa6c>
 800916e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009172:	d0e9      	beq.n	8009148 <_dtoa_r+0xa38>
 8009174:	f108 0801 	add.w	r8, r8, #1
 8009178:	9b05      	ldr	r3, [sp, #20]
 800917a:	e7c2      	b.n	8009102 <_dtoa_r+0x9f2>
 800917c:	9a02      	ldr	r2, [sp, #8]
 800917e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009182:	eba5 030b 	sub.w	r3, r5, fp
 8009186:	4293      	cmp	r3, r2
 8009188:	d021      	beq.n	80091ce <_dtoa_r+0xabe>
 800918a:	2300      	movs	r3, #0
 800918c:	220a      	movs	r2, #10
 800918e:	9904      	ldr	r1, [sp, #16]
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fabf 	bl	8009714 <__multadd>
 8009196:	45b1      	cmp	r9, r6
 8009198:	9004      	str	r0, [sp, #16]
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	f04f 020a 	mov.w	r2, #10
 80091a2:	4649      	mov	r1, r9
 80091a4:	4620      	mov	r0, r4
 80091a6:	d105      	bne.n	80091b4 <_dtoa_r+0xaa4>
 80091a8:	f000 fab4 	bl	8009714 <__multadd>
 80091ac:	4681      	mov	r9, r0
 80091ae:	4606      	mov	r6, r0
 80091b0:	9505      	str	r5, [sp, #20]
 80091b2:	e776      	b.n	80090a2 <_dtoa_r+0x992>
 80091b4:	f000 faae 	bl	8009714 <__multadd>
 80091b8:	4631      	mov	r1, r6
 80091ba:	4681      	mov	r9, r0
 80091bc:	2300      	movs	r3, #0
 80091be:	220a      	movs	r2, #10
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 faa7 	bl	8009714 <__multadd>
 80091c6:	4606      	mov	r6, r0
 80091c8:	e7f2      	b.n	80091b0 <_dtoa_r+0xaa0>
 80091ca:	f04f 0900 	mov.w	r9, #0
 80091ce:	2201      	movs	r2, #1
 80091d0:	9904      	ldr	r1, [sp, #16]
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fc14 	bl	8009a00 <__lshift>
 80091d8:	4639      	mov	r1, r7
 80091da:	9004      	str	r0, [sp, #16]
 80091dc:	f000 fc64 	bl	8009aa8 <__mcmp>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	dcb6      	bgt.n	8009152 <_dtoa_r+0xa42>
 80091e4:	d102      	bne.n	80091ec <_dtoa_r+0xadc>
 80091e6:	f018 0f01 	tst.w	r8, #1
 80091ea:	d1b2      	bne.n	8009152 <_dtoa_r+0xa42>
 80091ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80091f6:	f47f af0a 	bne.w	800900e <_dtoa_r+0x8fe>
 80091fa:	4615      	mov	r5, r2
 80091fc:	e7f6      	b.n	80091ec <_dtoa_r+0xadc>
 80091fe:	4593      	cmp	fp, r2
 8009200:	d105      	bne.n	800920e <_dtoa_r+0xafe>
 8009202:	2331      	movs	r3, #49	; 0x31
 8009204:	f10a 0a01 	add.w	sl, sl, #1
 8009208:	f88b 3000 	strb.w	r3, [fp]
 800920c:	e6ff      	b.n	800900e <_dtoa_r+0x8fe>
 800920e:	4615      	mov	r5, r2
 8009210:	e79f      	b.n	8009152 <_dtoa_r+0xa42>
 8009212:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009278 <_dtoa_r+0xb68>
 8009216:	e007      	b.n	8009228 <_dtoa_r+0xb18>
 8009218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800921a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800927c <_dtoa_r+0xb6c>
 800921e:	b11b      	cbz	r3, 8009228 <_dtoa_r+0xb18>
 8009220:	f10b 0308 	add.w	r3, fp, #8
 8009224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4658      	mov	r0, fp
 800922a:	b017      	add	sp, #92	; 0x5c
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	9b06      	ldr	r3, [sp, #24]
 8009232:	2b01      	cmp	r3, #1
 8009234:	f77f ae35 	ble.w	8008ea2 <_dtoa_r+0x792>
 8009238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800923a:	9307      	str	r3, [sp, #28]
 800923c:	e649      	b.n	8008ed2 <_dtoa_r+0x7c2>
 800923e:	9b02      	ldr	r3, [sp, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dc03      	bgt.n	800924c <_dtoa_r+0xb3c>
 8009244:	9b06      	ldr	r3, [sp, #24]
 8009246:	2b02      	cmp	r3, #2
 8009248:	f73f aecc 	bgt.w	8008fe4 <_dtoa_r+0x8d4>
 800924c:	465d      	mov	r5, fp
 800924e:	4639      	mov	r1, r7
 8009250:	9804      	ldr	r0, [sp, #16]
 8009252:	f7ff f9d1 	bl	80085f8 <quorem>
 8009256:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800925a:	f805 8b01 	strb.w	r8, [r5], #1
 800925e:	9a02      	ldr	r2, [sp, #8]
 8009260:	eba5 030b 	sub.w	r3, r5, fp
 8009264:	429a      	cmp	r2, r3
 8009266:	ddb0      	ble.n	80091ca <_dtoa_r+0xaba>
 8009268:	2300      	movs	r3, #0
 800926a:	220a      	movs	r2, #10
 800926c:	9904      	ldr	r1, [sp, #16]
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fa50 	bl	8009714 <__multadd>
 8009274:	9004      	str	r0, [sp, #16]
 8009276:	e7ea      	b.n	800924e <_dtoa_r+0xb3e>
 8009278:	0800b164 	.word	0x0800b164
 800927c:	0800b166 	.word	0x0800b166

08009280 <__sflush_r>:
 8009280:	898a      	ldrh	r2, [r1, #12]
 8009282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009286:	4605      	mov	r5, r0
 8009288:	0710      	lsls	r0, r2, #28
 800928a:	460c      	mov	r4, r1
 800928c:	d458      	bmi.n	8009340 <__sflush_r+0xc0>
 800928e:	684b      	ldr	r3, [r1, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	dc05      	bgt.n	80092a0 <__sflush_r+0x20>
 8009294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	dc02      	bgt.n	80092a0 <__sflush_r+0x20>
 800929a:	2000      	movs	r0, #0
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	d0f9      	beq.n	800929a <__sflush_r+0x1a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092ac:	682f      	ldr	r7, [r5, #0]
 80092ae:	6a21      	ldr	r1, [r4, #32]
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	d032      	beq.n	800931a <__sflush_r+0x9a>
 80092b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	075a      	lsls	r2, r3, #29
 80092ba:	d505      	bpl.n	80092c8 <__sflush_r+0x48>
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	1ac0      	subs	r0, r0, r3
 80092c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092c2:	b10b      	cbz	r3, 80092c8 <__sflush_r+0x48>
 80092c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092c6:	1ac0      	subs	r0, r0, r3
 80092c8:	2300      	movs	r3, #0
 80092ca:	4602      	mov	r2, r0
 80092cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ce:	6a21      	ldr	r1, [r4, #32]
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b0      	blx	r6
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	d106      	bne.n	80092e8 <__sflush_r+0x68>
 80092da:	6829      	ldr	r1, [r5, #0]
 80092dc:	291d      	cmp	r1, #29
 80092de:	d848      	bhi.n	8009372 <__sflush_r+0xf2>
 80092e0:	4a29      	ldr	r2, [pc, #164]	; (8009388 <__sflush_r+0x108>)
 80092e2:	40ca      	lsrs	r2, r1
 80092e4:	07d6      	lsls	r6, r2, #31
 80092e6:	d544      	bpl.n	8009372 <__sflush_r+0xf2>
 80092e8:	2200      	movs	r2, #0
 80092ea:	6062      	str	r2, [r4, #4]
 80092ec:	04d9      	lsls	r1, r3, #19
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	d504      	bpl.n	80092fe <__sflush_r+0x7e>
 80092f4:	1c42      	adds	r2, r0, #1
 80092f6:	d101      	bne.n	80092fc <__sflush_r+0x7c>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b903      	cbnz	r3, 80092fe <__sflush_r+0x7e>
 80092fc:	6560      	str	r0, [r4, #84]	; 0x54
 80092fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009300:	602f      	str	r7, [r5, #0]
 8009302:	2900      	cmp	r1, #0
 8009304:	d0c9      	beq.n	800929a <__sflush_r+0x1a>
 8009306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930a:	4299      	cmp	r1, r3
 800930c:	d002      	beq.n	8009314 <__sflush_r+0x94>
 800930e:	4628      	mov	r0, r5
 8009310:	f000 fc9e 	bl	8009c50 <_free_r>
 8009314:	2000      	movs	r0, #0
 8009316:	6360      	str	r0, [r4, #52]	; 0x34
 8009318:	e7c0      	b.n	800929c <__sflush_r+0x1c>
 800931a:	2301      	movs	r3, #1
 800931c:	4628      	mov	r0, r5
 800931e:	47b0      	blx	r6
 8009320:	1c41      	adds	r1, r0, #1
 8009322:	d1c8      	bne.n	80092b6 <__sflush_r+0x36>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0c5      	beq.n	80092b6 <__sflush_r+0x36>
 800932a:	2b1d      	cmp	r3, #29
 800932c:	d001      	beq.n	8009332 <__sflush_r+0xb2>
 800932e:	2b16      	cmp	r3, #22
 8009330:	d101      	bne.n	8009336 <__sflush_r+0xb6>
 8009332:	602f      	str	r7, [r5, #0]
 8009334:	e7b1      	b.n	800929a <__sflush_r+0x1a>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	e7ad      	b.n	800929c <__sflush_r+0x1c>
 8009340:	690f      	ldr	r7, [r1, #16]
 8009342:	2f00      	cmp	r7, #0
 8009344:	d0a9      	beq.n	800929a <__sflush_r+0x1a>
 8009346:	0793      	lsls	r3, r2, #30
 8009348:	680e      	ldr	r6, [r1, #0]
 800934a:	bf08      	it	eq
 800934c:	694b      	ldreq	r3, [r1, #20]
 800934e:	600f      	str	r7, [r1, #0]
 8009350:	bf18      	it	ne
 8009352:	2300      	movne	r3, #0
 8009354:	eba6 0807 	sub.w	r8, r6, r7
 8009358:	608b      	str	r3, [r1, #8]
 800935a:	f1b8 0f00 	cmp.w	r8, #0
 800935e:	dd9c      	ble.n	800929a <__sflush_r+0x1a>
 8009360:	4643      	mov	r3, r8
 8009362:	463a      	mov	r2, r7
 8009364:	6a21      	ldr	r1, [r4, #32]
 8009366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009368:	4628      	mov	r0, r5
 800936a:	47b0      	blx	r6
 800936c:	2800      	cmp	r0, #0
 800936e:	dc06      	bgt.n	800937e <__sflush_r+0xfe>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e78e      	b.n	800929c <__sflush_r+0x1c>
 800937e:	4407      	add	r7, r0
 8009380:	eba8 0800 	sub.w	r8, r8, r0
 8009384:	e7e9      	b.n	800935a <__sflush_r+0xda>
 8009386:	bf00      	nop
 8009388:	20400001 	.word	0x20400001

0800938c <_fflush_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b1db      	cbz	r3, 80093ce <_fflush_r+0x42>
 8009396:	b118      	cbz	r0, 80093a0 <_fflush_r+0x14>
 8009398:	6983      	ldr	r3, [r0, #24]
 800939a:	b90b      	cbnz	r3, 80093a0 <_fflush_r+0x14>
 800939c:	f000 f860 	bl	8009460 <__sinit>
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <_fflush_r+0x48>)
 80093a2:	429c      	cmp	r4, r3
 80093a4:	d109      	bne.n	80093ba <_fflush_r+0x2e>
 80093a6:	686c      	ldr	r4, [r5, #4]
 80093a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ac:	b17b      	cbz	r3, 80093ce <_fflush_r+0x42>
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b6:	f7ff bf63 	b.w	8009280 <__sflush_r>
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <_fflush_r+0x4c>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	d101      	bne.n	80093c4 <_fflush_r+0x38>
 80093c0:	68ac      	ldr	r4, [r5, #8]
 80093c2:	e7f1      	b.n	80093a8 <_fflush_r+0x1c>
 80093c4:	4b05      	ldr	r3, [pc, #20]	; (80093dc <_fflush_r+0x50>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	bf08      	it	eq
 80093ca:	68ec      	ldreq	r4, [r5, #12]
 80093cc:	e7ec      	b.n	80093a8 <_fflush_r+0x1c>
 80093ce:	2000      	movs	r0, #0
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	bf00      	nop
 80093d4:	0800b194 	.word	0x0800b194
 80093d8:	0800b1b4 	.word	0x0800b1b4
 80093dc:	0800b174 	.word	0x0800b174

080093e0 <std>:
 80093e0:	2300      	movs	r3, #0
 80093e2:	b510      	push	{r4, lr}
 80093e4:	4604      	mov	r4, r0
 80093e6:	e9c0 3300 	strd	r3, r3, [r0]
 80093ea:	6083      	str	r3, [r0, #8]
 80093ec:	8181      	strh	r1, [r0, #12]
 80093ee:	6643      	str	r3, [r0, #100]	; 0x64
 80093f0:	81c2      	strh	r2, [r0, #14]
 80093f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093f6:	6183      	str	r3, [r0, #24]
 80093f8:	4619      	mov	r1, r3
 80093fa:	2208      	movs	r2, #8
 80093fc:	305c      	adds	r0, #92	; 0x5c
 80093fe:	f7fe fc85 	bl	8007d0c <memset>
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <std+0x38>)
 8009404:	6263      	str	r3, [r4, #36]	; 0x24
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <std+0x3c>)
 8009408:	62a3      	str	r3, [r4, #40]	; 0x28
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <std+0x40>)
 800940c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <std+0x44>)
 8009410:	6224      	str	r4, [r4, #32]
 8009412:	6323      	str	r3, [r4, #48]	; 0x30
 8009414:	bd10      	pop	{r4, pc}
 8009416:	bf00      	nop
 8009418:	08009dc1 	.word	0x08009dc1
 800941c:	08009de3 	.word	0x08009de3
 8009420:	08009e1b 	.word	0x08009e1b
 8009424:	08009e3f 	.word	0x08009e3f

08009428 <_cleanup_r>:
 8009428:	4901      	ldr	r1, [pc, #4]	; (8009430 <_cleanup_r+0x8>)
 800942a:	f000 b885 	b.w	8009538 <_fwalk_reent>
 800942e:	bf00      	nop
 8009430:	0800938d 	.word	0x0800938d

08009434 <__sfmoreglue>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	1e4a      	subs	r2, r1, #1
 8009438:	2568      	movs	r5, #104	; 0x68
 800943a:	4355      	muls	r5, r2
 800943c:	460e      	mov	r6, r1
 800943e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009442:	f000 fc53 	bl	8009cec <_malloc_r>
 8009446:	4604      	mov	r4, r0
 8009448:	b140      	cbz	r0, 800945c <__sfmoreglue+0x28>
 800944a:	2100      	movs	r1, #0
 800944c:	e9c0 1600 	strd	r1, r6, [r0]
 8009450:	300c      	adds	r0, #12
 8009452:	60a0      	str	r0, [r4, #8]
 8009454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009458:	f7fe fc58 	bl	8007d0c <memset>
 800945c:	4620      	mov	r0, r4
 800945e:	bd70      	pop	{r4, r5, r6, pc}

08009460 <__sinit>:
 8009460:	6983      	ldr	r3, [r0, #24]
 8009462:	b510      	push	{r4, lr}
 8009464:	4604      	mov	r4, r0
 8009466:	bb33      	cbnz	r3, 80094b6 <__sinit+0x56>
 8009468:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800946c:	6503      	str	r3, [r0, #80]	; 0x50
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <__sinit+0x58>)
 8009470:	4a12      	ldr	r2, [pc, #72]	; (80094bc <__sinit+0x5c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6282      	str	r2, [r0, #40]	; 0x28
 8009476:	4298      	cmp	r0, r3
 8009478:	bf04      	itt	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	6183      	streq	r3, [r0, #24]
 800947e:	f000 f81f 	bl	80094c0 <__sfp>
 8009482:	6060      	str	r0, [r4, #4]
 8009484:	4620      	mov	r0, r4
 8009486:	f000 f81b 	bl	80094c0 <__sfp>
 800948a:	60a0      	str	r0, [r4, #8]
 800948c:	4620      	mov	r0, r4
 800948e:	f000 f817 	bl	80094c0 <__sfp>
 8009492:	2200      	movs	r2, #0
 8009494:	60e0      	str	r0, [r4, #12]
 8009496:	2104      	movs	r1, #4
 8009498:	6860      	ldr	r0, [r4, #4]
 800949a:	f7ff ffa1 	bl	80093e0 <std>
 800949e:	2201      	movs	r2, #1
 80094a0:	2109      	movs	r1, #9
 80094a2:	68a0      	ldr	r0, [r4, #8]
 80094a4:	f7ff ff9c 	bl	80093e0 <std>
 80094a8:	2202      	movs	r2, #2
 80094aa:	2112      	movs	r1, #18
 80094ac:	68e0      	ldr	r0, [r4, #12]
 80094ae:	f7ff ff97 	bl	80093e0 <std>
 80094b2:	2301      	movs	r3, #1
 80094b4:	61a3      	str	r3, [r4, #24]
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	0800b150 	.word	0x0800b150
 80094bc:	08009429 	.word	0x08009429

080094c0 <__sfp>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <__sfp+0x70>)
 80094c4:	681e      	ldr	r6, [r3, #0]
 80094c6:	69b3      	ldr	r3, [r6, #24]
 80094c8:	4607      	mov	r7, r0
 80094ca:	b913      	cbnz	r3, 80094d2 <__sfp+0x12>
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff ffc7 	bl	8009460 <__sinit>
 80094d2:	3648      	adds	r6, #72	; 0x48
 80094d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094d8:	3b01      	subs	r3, #1
 80094da:	d503      	bpl.n	80094e4 <__sfp+0x24>
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	b133      	cbz	r3, 80094ee <__sfp+0x2e>
 80094e0:	6836      	ldr	r6, [r6, #0]
 80094e2:	e7f7      	b.n	80094d4 <__sfp+0x14>
 80094e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094e8:	b16d      	cbz	r5, 8009506 <__sfp+0x46>
 80094ea:	3468      	adds	r4, #104	; 0x68
 80094ec:	e7f4      	b.n	80094d8 <__sfp+0x18>
 80094ee:	2104      	movs	r1, #4
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff ff9f 	bl	8009434 <__sfmoreglue>
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1f1      	bne.n	80094e0 <__sfp+0x20>
 80094fc:	230c      	movs	r3, #12
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4604      	mov	r4, r0
 8009502:	4620      	mov	r0, r4
 8009504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <__sfp+0x74>)
 8009508:	6665      	str	r5, [r4, #100]	; 0x64
 800950a:	e9c4 5500 	strd	r5, r5, [r4]
 800950e:	60a5      	str	r5, [r4, #8]
 8009510:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009514:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009518:	2208      	movs	r2, #8
 800951a:	4629      	mov	r1, r5
 800951c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009520:	f7fe fbf4 	bl	8007d0c <memset>
 8009524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800952c:	e7e9      	b.n	8009502 <__sfp+0x42>
 800952e:	bf00      	nop
 8009530:	0800b150 	.word	0x0800b150
 8009534:	ffff0001 	.word	0xffff0001

08009538 <_fwalk_reent>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4680      	mov	r8, r0
 800953e:	4689      	mov	r9, r1
 8009540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009544:	2600      	movs	r6, #0
 8009546:	b914      	cbnz	r4, 800954e <_fwalk_reent+0x16>
 8009548:	4630      	mov	r0, r6
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009552:	3f01      	subs	r7, #1
 8009554:	d501      	bpl.n	800955a <_fwalk_reent+0x22>
 8009556:	6824      	ldr	r4, [r4, #0]
 8009558:	e7f5      	b.n	8009546 <_fwalk_reent+0xe>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d907      	bls.n	8009570 <_fwalk_reent+0x38>
 8009560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009564:	3301      	adds	r3, #1
 8009566:	d003      	beq.n	8009570 <_fwalk_reent+0x38>
 8009568:	4629      	mov	r1, r5
 800956a:	4640      	mov	r0, r8
 800956c:	47c8      	blx	r9
 800956e:	4306      	orrs	r6, r0
 8009570:	3568      	adds	r5, #104	; 0x68
 8009572:	e7ee      	b.n	8009552 <_fwalk_reent+0x1a>

08009574 <_localeconv_r>:
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <_localeconv_r+0x14>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a18      	ldr	r0, [r3, #32]
 800957a:	4b04      	ldr	r3, [pc, #16]	; (800958c <_localeconv_r+0x18>)
 800957c:	2800      	cmp	r0, #0
 800957e:	bf08      	it	eq
 8009580:	4618      	moveq	r0, r3
 8009582:	30f0      	adds	r0, #240	; 0xf0
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	2000000c 	.word	0x2000000c
 800958c:	20000070 	.word	0x20000070

08009590 <__swhatbuf_r>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	460e      	mov	r6, r1
 8009594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009598:	2900      	cmp	r1, #0
 800959a:	b096      	sub	sp, #88	; 0x58
 800959c:	4614      	mov	r4, r2
 800959e:	461d      	mov	r5, r3
 80095a0:	da07      	bge.n	80095b2 <__swhatbuf_r+0x22>
 80095a2:	2300      	movs	r3, #0
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	89b3      	ldrh	r3, [r6, #12]
 80095a8:	061a      	lsls	r2, r3, #24
 80095aa:	d410      	bmi.n	80095ce <__swhatbuf_r+0x3e>
 80095ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b0:	e00e      	b.n	80095d0 <__swhatbuf_r+0x40>
 80095b2:	466a      	mov	r2, sp
 80095b4:	f000 fc6a 	bl	8009e8c <_fstat_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dbf2      	blt.n	80095a2 <__swhatbuf_r+0x12>
 80095bc:	9a01      	ldr	r2, [sp, #4]
 80095be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095c6:	425a      	negs	r2, r3
 80095c8:	415a      	adcs	r2, r3
 80095ca:	602a      	str	r2, [r5, #0]
 80095cc:	e7ee      	b.n	80095ac <__swhatbuf_r+0x1c>
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	2000      	movs	r0, #0
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	b016      	add	sp, #88	; 0x58
 80095d6:	bd70      	pop	{r4, r5, r6, pc}

080095d8 <__smakebuf_r>:
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095dc:	079d      	lsls	r5, r3, #30
 80095de:	4606      	mov	r6, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	d507      	bpl.n	80095f4 <__smakebuf_r+0x1c>
 80095e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	2301      	movs	r3, #1
 80095ee:	6163      	str	r3, [r4, #20]
 80095f0:	b002      	add	sp, #8
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	ab01      	add	r3, sp, #4
 80095f6:	466a      	mov	r2, sp
 80095f8:	f7ff ffca 	bl	8009590 <__swhatbuf_r>
 80095fc:	9900      	ldr	r1, [sp, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	4630      	mov	r0, r6
 8009602:	f000 fb73 	bl	8009cec <_malloc_r>
 8009606:	b948      	cbnz	r0, 800961c <__smakebuf_r+0x44>
 8009608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960c:	059a      	lsls	r2, r3, #22
 800960e:	d4ef      	bmi.n	80095f0 <__smakebuf_r+0x18>
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	f043 0302 	orr.w	r3, r3, #2
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	e7e3      	b.n	80095e4 <__smakebuf_r+0xc>
 800961c:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <__smakebuf_r+0x7c>)
 800961e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	6020      	str	r0, [r4, #0]
 8009624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	6120      	str	r0, [r4, #16]
 8009632:	b15b      	cbz	r3, 800964c <__smakebuf_r+0x74>
 8009634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fc39 	bl	8009eb0 <_isatty_r>
 800963e:	b128      	cbz	r0, 800964c <__smakebuf_r+0x74>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	431d      	orrs	r5, r3
 8009650:	81a5      	strh	r5, [r4, #12]
 8009652:	e7cd      	b.n	80095f0 <__smakebuf_r+0x18>
 8009654:	08009429 	.word	0x08009429

08009658 <malloc>:
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <malloc+0xc>)
 800965a:	4601      	mov	r1, r0
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	f000 bb45 	b.w	8009cec <_malloc_r>
 8009662:	bf00      	nop
 8009664:	2000000c 	.word	0x2000000c

08009668 <memcpy>:
 8009668:	b510      	push	{r4, lr}
 800966a:	1e43      	subs	r3, r0, #1
 800966c:	440a      	add	r2, r1
 800966e:	4291      	cmp	r1, r2
 8009670:	d100      	bne.n	8009674 <memcpy+0xc>
 8009672:	bd10      	pop	{r4, pc}
 8009674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967c:	e7f7      	b.n	800966e <memcpy+0x6>

0800967e <_Balloc>:
 800967e:	b570      	push	{r4, r5, r6, lr}
 8009680:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009682:	4604      	mov	r4, r0
 8009684:	460e      	mov	r6, r1
 8009686:	b93d      	cbnz	r5, 8009698 <_Balloc+0x1a>
 8009688:	2010      	movs	r0, #16
 800968a:	f7ff ffe5 	bl	8009658 <malloc>
 800968e:	6260      	str	r0, [r4, #36]	; 0x24
 8009690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009694:	6005      	str	r5, [r0, #0]
 8009696:	60c5      	str	r5, [r0, #12]
 8009698:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800969a:	68eb      	ldr	r3, [r5, #12]
 800969c:	b183      	cbz	r3, 80096c0 <_Balloc+0x42>
 800969e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096a6:	b9b8      	cbnz	r0, 80096d8 <_Balloc+0x5a>
 80096a8:	2101      	movs	r1, #1
 80096aa:	fa01 f506 	lsl.w	r5, r1, r6
 80096ae:	1d6a      	adds	r2, r5, #5
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fabe 	bl	8009c34 <_calloc_r>
 80096b8:	b160      	cbz	r0, 80096d4 <_Balloc+0x56>
 80096ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096be:	e00e      	b.n	80096de <_Balloc+0x60>
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	2104      	movs	r1, #4
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fab5 	bl	8009c34 <_calloc_r>
 80096ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096cc:	60e8      	str	r0, [r5, #12]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e4      	bne.n	800969e <_Balloc+0x20>
 80096d4:	2000      	movs	r0, #0
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	6802      	ldr	r2, [r0, #0]
 80096da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096de:	2300      	movs	r3, #0
 80096e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096e4:	e7f7      	b.n	80096d6 <_Balloc+0x58>

080096e6 <_Bfree>:
 80096e6:	b570      	push	{r4, r5, r6, lr}
 80096e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096ea:	4606      	mov	r6, r0
 80096ec:	460d      	mov	r5, r1
 80096ee:	b93c      	cbnz	r4, 8009700 <_Bfree+0x1a>
 80096f0:	2010      	movs	r0, #16
 80096f2:	f7ff ffb1 	bl	8009658 <malloc>
 80096f6:	6270      	str	r0, [r6, #36]	; 0x24
 80096f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096fc:	6004      	str	r4, [r0, #0]
 80096fe:	60c4      	str	r4, [r0, #12]
 8009700:	b13d      	cbz	r5, 8009712 <_Bfree+0x2c>
 8009702:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009704:	686a      	ldr	r2, [r5, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800970c:	6029      	str	r1, [r5, #0]
 800970e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009712:	bd70      	pop	{r4, r5, r6, pc}

08009714 <__multadd>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	690d      	ldr	r5, [r1, #16]
 800971a:	461f      	mov	r7, r3
 800971c:	4606      	mov	r6, r0
 800971e:	460c      	mov	r4, r1
 8009720:	f101 0c14 	add.w	ip, r1, #20
 8009724:	2300      	movs	r3, #0
 8009726:	f8dc 0000 	ldr.w	r0, [ip]
 800972a:	b281      	uxth	r1, r0
 800972c:	fb02 7101 	mla	r1, r2, r1, r7
 8009730:	0c0f      	lsrs	r7, r1, #16
 8009732:	0c00      	lsrs	r0, r0, #16
 8009734:	fb02 7000 	mla	r0, r2, r0, r7
 8009738:	b289      	uxth	r1, r1
 800973a:	3301      	adds	r3, #1
 800973c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009740:	429d      	cmp	r5, r3
 8009742:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009746:	f84c 1b04 	str.w	r1, [ip], #4
 800974a:	dcec      	bgt.n	8009726 <__multadd+0x12>
 800974c:	b1d7      	cbz	r7, 8009784 <__multadd+0x70>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	42ab      	cmp	r3, r5
 8009752:	dc12      	bgt.n	800977a <__multadd+0x66>
 8009754:	6861      	ldr	r1, [r4, #4]
 8009756:	4630      	mov	r0, r6
 8009758:	3101      	adds	r1, #1
 800975a:	f7ff ff90 	bl	800967e <_Balloc>
 800975e:	6922      	ldr	r2, [r4, #16]
 8009760:	3202      	adds	r2, #2
 8009762:	f104 010c 	add.w	r1, r4, #12
 8009766:	4680      	mov	r8, r0
 8009768:	0092      	lsls	r2, r2, #2
 800976a:	300c      	adds	r0, #12
 800976c:	f7ff ff7c 	bl	8009668 <memcpy>
 8009770:	4621      	mov	r1, r4
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff ffb7 	bl	80096e6 <_Bfree>
 8009778:	4644      	mov	r4, r8
 800977a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800977e:	3501      	adds	r5, #1
 8009780:	615f      	str	r7, [r3, #20]
 8009782:	6125      	str	r5, [r4, #16]
 8009784:	4620      	mov	r0, r4
 8009786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800978a <__hi0bits>:
 800978a:	0c02      	lsrs	r2, r0, #16
 800978c:	0412      	lsls	r2, r2, #16
 800978e:	4603      	mov	r3, r0
 8009790:	b9b2      	cbnz	r2, 80097c0 <__hi0bits+0x36>
 8009792:	0403      	lsls	r3, r0, #16
 8009794:	2010      	movs	r0, #16
 8009796:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800979a:	bf04      	itt	eq
 800979c:	021b      	lsleq	r3, r3, #8
 800979e:	3008      	addeq	r0, #8
 80097a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80097a4:	bf04      	itt	eq
 80097a6:	011b      	lsleq	r3, r3, #4
 80097a8:	3004      	addeq	r0, #4
 80097aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80097ae:	bf04      	itt	eq
 80097b0:	009b      	lsleq	r3, r3, #2
 80097b2:	3002      	addeq	r0, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db06      	blt.n	80097c6 <__hi0bits+0x3c>
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	d503      	bpl.n	80097c4 <__hi0bits+0x3a>
 80097bc:	3001      	adds	r0, #1
 80097be:	4770      	bx	lr
 80097c0:	2000      	movs	r0, #0
 80097c2:	e7e8      	b.n	8009796 <__hi0bits+0xc>
 80097c4:	2020      	movs	r0, #32
 80097c6:	4770      	bx	lr

080097c8 <__lo0bits>:
 80097c8:	6803      	ldr	r3, [r0, #0]
 80097ca:	f013 0207 	ands.w	r2, r3, #7
 80097ce:	4601      	mov	r1, r0
 80097d0:	d00b      	beq.n	80097ea <__lo0bits+0x22>
 80097d2:	07da      	lsls	r2, r3, #31
 80097d4:	d423      	bmi.n	800981e <__lo0bits+0x56>
 80097d6:	0798      	lsls	r0, r3, #30
 80097d8:	bf49      	itett	mi
 80097da:	085b      	lsrmi	r3, r3, #1
 80097dc:	089b      	lsrpl	r3, r3, #2
 80097de:	2001      	movmi	r0, #1
 80097e0:	600b      	strmi	r3, [r1, #0]
 80097e2:	bf5c      	itt	pl
 80097e4:	600b      	strpl	r3, [r1, #0]
 80097e6:	2002      	movpl	r0, #2
 80097e8:	4770      	bx	lr
 80097ea:	b298      	uxth	r0, r3
 80097ec:	b9a8      	cbnz	r0, 800981a <__lo0bits+0x52>
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	2010      	movs	r0, #16
 80097f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097f6:	bf04      	itt	eq
 80097f8:	0a1b      	lsreq	r3, r3, #8
 80097fa:	3008      	addeq	r0, #8
 80097fc:	071a      	lsls	r2, r3, #28
 80097fe:	bf04      	itt	eq
 8009800:	091b      	lsreq	r3, r3, #4
 8009802:	3004      	addeq	r0, #4
 8009804:	079a      	lsls	r2, r3, #30
 8009806:	bf04      	itt	eq
 8009808:	089b      	lsreq	r3, r3, #2
 800980a:	3002      	addeq	r0, #2
 800980c:	07da      	lsls	r2, r3, #31
 800980e:	d402      	bmi.n	8009816 <__lo0bits+0x4e>
 8009810:	085b      	lsrs	r3, r3, #1
 8009812:	d006      	beq.n	8009822 <__lo0bits+0x5a>
 8009814:	3001      	adds	r0, #1
 8009816:	600b      	str	r3, [r1, #0]
 8009818:	4770      	bx	lr
 800981a:	4610      	mov	r0, r2
 800981c:	e7e9      	b.n	80097f2 <__lo0bits+0x2a>
 800981e:	2000      	movs	r0, #0
 8009820:	4770      	bx	lr
 8009822:	2020      	movs	r0, #32
 8009824:	4770      	bx	lr

08009826 <__i2b>:
 8009826:	b510      	push	{r4, lr}
 8009828:	460c      	mov	r4, r1
 800982a:	2101      	movs	r1, #1
 800982c:	f7ff ff27 	bl	800967e <_Balloc>
 8009830:	2201      	movs	r2, #1
 8009832:	6144      	str	r4, [r0, #20]
 8009834:	6102      	str	r2, [r0, #16]
 8009836:	bd10      	pop	{r4, pc}

08009838 <__multiply>:
 8009838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	4614      	mov	r4, r2
 800983e:	690a      	ldr	r2, [r1, #16]
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	429a      	cmp	r2, r3
 8009844:	bfb8      	it	lt
 8009846:	460b      	movlt	r3, r1
 8009848:	4688      	mov	r8, r1
 800984a:	bfbc      	itt	lt
 800984c:	46a0      	movlt	r8, r4
 800984e:	461c      	movlt	r4, r3
 8009850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009854:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009858:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800985c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009860:	eb07 0609 	add.w	r6, r7, r9
 8009864:	42b3      	cmp	r3, r6
 8009866:	bfb8      	it	lt
 8009868:	3101      	addlt	r1, #1
 800986a:	f7ff ff08 	bl	800967e <_Balloc>
 800986e:	f100 0514 	add.w	r5, r0, #20
 8009872:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009876:	462b      	mov	r3, r5
 8009878:	2200      	movs	r2, #0
 800987a:	4573      	cmp	r3, lr
 800987c:	d316      	bcc.n	80098ac <__multiply+0x74>
 800987e:	f104 0214 	add.w	r2, r4, #20
 8009882:	f108 0114 	add.w	r1, r8, #20
 8009886:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800988a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	9201      	str	r2, [sp, #4]
 8009894:	4293      	cmp	r3, r2
 8009896:	d80c      	bhi.n	80098b2 <__multiply+0x7a>
 8009898:	2e00      	cmp	r6, #0
 800989a:	dd03      	ble.n	80098a4 <__multiply+0x6c>
 800989c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d05d      	beq.n	8009960 <__multiply+0x128>
 80098a4:	6106      	str	r6, [r0, #16]
 80098a6:	b003      	add	sp, #12
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ac:	f843 2b04 	str.w	r2, [r3], #4
 80098b0:	e7e3      	b.n	800987a <__multiply+0x42>
 80098b2:	f8b2 b000 	ldrh.w	fp, [r2]
 80098b6:	f1bb 0f00 	cmp.w	fp, #0
 80098ba:	d023      	beq.n	8009904 <__multiply+0xcc>
 80098bc:	4689      	mov	r9, r1
 80098be:	46ac      	mov	ip, r5
 80098c0:	f04f 0800 	mov.w	r8, #0
 80098c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80098c8:	f8dc a000 	ldr.w	sl, [ip]
 80098cc:	b2a3      	uxth	r3, r4
 80098ce:	fa1f fa8a 	uxth.w	sl, sl
 80098d2:	fb0b a303 	mla	r3, fp, r3, sl
 80098d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098da:	f8dc 4000 	ldr.w	r4, [ip]
 80098de:	4443      	add	r3, r8
 80098e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098e4:	fb0b 840a 	mla	r4, fp, sl, r8
 80098e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80098ec:	46e2      	mov	sl, ip
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098f4:	454f      	cmp	r7, r9
 80098f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098fa:	f84a 3b04 	str.w	r3, [sl], #4
 80098fe:	d82b      	bhi.n	8009958 <__multiply+0x120>
 8009900:	f8cc 8004 	str.w	r8, [ip, #4]
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800990a:	3204      	adds	r2, #4
 800990c:	f1ba 0f00 	cmp.w	sl, #0
 8009910:	d020      	beq.n	8009954 <__multiply+0x11c>
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	4689      	mov	r9, r1
 8009916:	46a8      	mov	r8, r5
 8009918:	f04f 0b00 	mov.w	fp, #0
 800991c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009920:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009924:	fb0a 440c 	mla	r4, sl, ip, r4
 8009928:	445c      	add	r4, fp
 800992a:	46c4      	mov	ip, r8
 800992c:	b29b      	uxth	r3, r3
 800992e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009932:	f84c 3b04 	str.w	r3, [ip], #4
 8009936:	f859 3b04 	ldr.w	r3, [r9], #4
 800993a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	fb0a b303 	mla	r3, sl, r3, fp
 8009944:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009948:	454f      	cmp	r7, r9
 800994a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800994e:	d805      	bhi.n	800995c <__multiply+0x124>
 8009950:	f8c8 3004 	str.w	r3, [r8, #4]
 8009954:	3504      	adds	r5, #4
 8009956:	e79b      	b.n	8009890 <__multiply+0x58>
 8009958:	46d4      	mov	ip, sl
 800995a:	e7b3      	b.n	80098c4 <__multiply+0x8c>
 800995c:	46e0      	mov	r8, ip
 800995e:	e7dd      	b.n	800991c <__multiply+0xe4>
 8009960:	3e01      	subs	r6, #1
 8009962:	e799      	b.n	8009898 <__multiply+0x60>

08009964 <__pow5mult>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4615      	mov	r5, r2
 800996a:	f012 0203 	ands.w	r2, r2, #3
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	d007      	beq.n	8009984 <__pow5mult+0x20>
 8009974:	3a01      	subs	r2, #1
 8009976:	4c21      	ldr	r4, [pc, #132]	; (80099fc <__pow5mult+0x98>)
 8009978:	2300      	movs	r3, #0
 800997a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800997e:	f7ff fec9 	bl	8009714 <__multadd>
 8009982:	4607      	mov	r7, r0
 8009984:	10ad      	asrs	r5, r5, #2
 8009986:	d035      	beq.n	80099f4 <__pow5mult+0x90>
 8009988:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800998a:	b93c      	cbnz	r4, 800999c <__pow5mult+0x38>
 800998c:	2010      	movs	r0, #16
 800998e:	f7ff fe63 	bl	8009658 <malloc>
 8009992:	6270      	str	r0, [r6, #36]	; 0x24
 8009994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009998:	6004      	str	r4, [r0, #0]
 800999a:	60c4      	str	r4, [r0, #12]
 800999c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099a4:	b94c      	cbnz	r4, 80099ba <__pow5mult+0x56>
 80099a6:	f240 2171 	movw	r1, #625	; 0x271
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7ff ff3b 	bl	8009826 <__i2b>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80099b6:	4604      	mov	r4, r0
 80099b8:	6003      	str	r3, [r0, #0]
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	07eb      	lsls	r3, r5, #31
 80099c0:	d50a      	bpl.n	80099d8 <__pow5mult+0x74>
 80099c2:	4639      	mov	r1, r7
 80099c4:	4622      	mov	r2, r4
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7ff ff36 	bl	8009838 <__multiply>
 80099cc:	4639      	mov	r1, r7
 80099ce:	4681      	mov	r9, r0
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff fe88 	bl	80096e6 <_Bfree>
 80099d6:	464f      	mov	r7, r9
 80099d8:	106d      	asrs	r5, r5, #1
 80099da:	d00b      	beq.n	80099f4 <__pow5mult+0x90>
 80099dc:	6820      	ldr	r0, [r4, #0]
 80099de:	b938      	cbnz	r0, 80099f0 <__pow5mult+0x8c>
 80099e0:	4622      	mov	r2, r4
 80099e2:	4621      	mov	r1, r4
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff ff27 	bl	8009838 <__multiply>
 80099ea:	6020      	str	r0, [r4, #0]
 80099ec:	f8c0 8000 	str.w	r8, [r0]
 80099f0:	4604      	mov	r4, r0
 80099f2:	e7e4      	b.n	80099be <__pow5mult+0x5a>
 80099f4:	4638      	mov	r0, r7
 80099f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fa:	bf00      	nop
 80099fc:	0800b2c8 	.word	0x0800b2c8

08009a00 <__lshift>:
 8009a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6849      	ldr	r1, [r1, #4]
 8009a0e:	eb0a 0903 	add.w	r9, sl, r3
 8009a12:	68a3      	ldr	r3, [r4, #8]
 8009a14:	4607      	mov	r7, r0
 8009a16:	4616      	mov	r6, r2
 8009a18:	f109 0501 	add.w	r5, r9, #1
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	db32      	blt.n	8009a86 <__lshift+0x86>
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff fe2c 	bl	800967e <_Balloc>
 8009a26:	2300      	movs	r3, #0
 8009a28:	4680      	mov	r8, r0
 8009a2a:	f100 0114 	add.w	r1, r0, #20
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4553      	cmp	r3, sl
 8009a32:	db2b      	blt.n	8009a8c <__lshift+0x8c>
 8009a34:	6920      	ldr	r0, [r4, #16]
 8009a36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a3a:	f104 0314 	add.w	r3, r4, #20
 8009a3e:	f016 021f 	ands.w	r2, r6, #31
 8009a42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a46:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a4a:	d025      	beq.n	8009a98 <__lshift+0x98>
 8009a4c:	f1c2 0e20 	rsb	lr, r2, #32
 8009a50:	2000      	movs	r0, #0
 8009a52:	681e      	ldr	r6, [r3, #0]
 8009a54:	468a      	mov	sl, r1
 8009a56:	4096      	lsls	r6, r2
 8009a58:	4330      	orrs	r0, r6
 8009a5a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a62:	459c      	cmp	ip, r3
 8009a64:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a68:	d814      	bhi.n	8009a94 <__lshift+0x94>
 8009a6a:	6048      	str	r0, [r1, #4]
 8009a6c:	b108      	cbz	r0, 8009a72 <__lshift+0x72>
 8009a6e:	f109 0502 	add.w	r5, r9, #2
 8009a72:	3d01      	subs	r5, #1
 8009a74:	4638      	mov	r0, r7
 8009a76:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f7ff fe33 	bl	80096e6 <_Bfree>
 8009a80:	4640      	mov	r0, r8
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	3101      	adds	r1, #1
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	e7c7      	b.n	8009a1c <__lshift+0x1c>
 8009a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a90:	3301      	adds	r3, #1
 8009a92:	e7cd      	b.n	8009a30 <__lshift+0x30>
 8009a94:	4651      	mov	r1, sl
 8009a96:	e7dc      	b.n	8009a52 <__lshift+0x52>
 8009a98:	3904      	subs	r1, #4
 8009a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa2:	459c      	cmp	ip, r3
 8009aa4:	d8f9      	bhi.n	8009a9a <__lshift+0x9a>
 8009aa6:	e7e4      	b.n	8009a72 <__lshift+0x72>

08009aa8 <__mcmp>:
 8009aa8:	6903      	ldr	r3, [r0, #16]
 8009aaa:	690a      	ldr	r2, [r1, #16]
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	b530      	push	{r4, r5, lr}
 8009ab0:	d10c      	bne.n	8009acc <__mcmp+0x24>
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	3014      	adds	r0, #20
 8009ab6:	3114      	adds	r1, #20
 8009ab8:	1884      	adds	r4, r0, r2
 8009aba:	4411      	add	r1, r2
 8009abc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ac4:	4295      	cmp	r5, r2
 8009ac6:	d003      	beq.n	8009ad0 <__mcmp+0x28>
 8009ac8:	d305      	bcc.n	8009ad6 <__mcmp+0x2e>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4618      	mov	r0, r3
 8009ace:	bd30      	pop	{r4, r5, pc}
 8009ad0:	42a0      	cmp	r0, r4
 8009ad2:	d3f3      	bcc.n	8009abc <__mcmp+0x14>
 8009ad4:	e7fa      	b.n	8009acc <__mcmp+0x24>
 8009ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8009ada:	e7f7      	b.n	8009acc <__mcmp+0x24>

08009adc <__mdiff>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	4614      	mov	r4, r2
 8009aea:	f7ff ffdd 	bl	8009aa8 <__mcmp>
 8009aee:	1e06      	subs	r6, r0, #0
 8009af0:	d108      	bne.n	8009b04 <__mdiff+0x28>
 8009af2:	4631      	mov	r1, r6
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7ff fdc2 	bl	800967e <_Balloc>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b04:	bfa4      	itt	ge
 8009b06:	4623      	movge	r3, r4
 8009b08:	462c      	movge	r4, r5
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	6861      	ldr	r1, [r4, #4]
 8009b0e:	bfa6      	itte	ge
 8009b10:	461d      	movge	r5, r3
 8009b12:	2600      	movge	r6, #0
 8009b14:	2601      	movlt	r6, #1
 8009b16:	f7ff fdb2 	bl	800967e <_Balloc>
 8009b1a:	692b      	ldr	r3, [r5, #16]
 8009b1c:	60c6      	str	r6, [r0, #12]
 8009b1e:	6926      	ldr	r6, [r4, #16]
 8009b20:	f105 0914 	add.w	r9, r5, #20
 8009b24:	f104 0214 	add.w	r2, r4, #20
 8009b28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b30:	f100 0514 	add.w	r5, r0, #20
 8009b34:	f04f 0e00 	mov.w	lr, #0
 8009b38:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b40:	fa1e f18a 	uxtah	r1, lr, sl
 8009b44:	b2a3      	uxth	r3, r4
 8009b46:	1ac9      	subs	r1, r1, r3
 8009b48:	0c23      	lsrs	r3, r4, #16
 8009b4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009b4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b52:	b289      	uxth	r1, r1
 8009b54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b58:	45c8      	cmp	r8, r9
 8009b5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b5e:	4694      	mov	ip, r2
 8009b60:	f845 3b04 	str.w	r3, [r5], #4
 8009b64:	d8e8      	bhi.n	8009b38 <__mdiff+0x5c>
 8009b66:	45bc      	cmp	ip, r7
 8009b68:	d304      	bcc.n	8009b74 <__mdiff+0x98>
 8009b6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009b6e:	b183      	cbz	r3, 8009b92 <__mdiff+0xb6>
 8009b70:	6106      	str	r6, [r0, #16]
 8009b72:	e7c5      	b.n	8009b00 <__mdiff+0x24>
 8009b74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009b78:	fa1e f381 	uxtah	r3, lr, r1
 8009b7c:	141a      	asrs	r2, r3, #16
 8009b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b8c:	f845 3b04 	str.w	r3, [r5], #4
 8009b90:	e7e9      	b.n	8009b66 <__mdiff+0x8a>
 8009b92:	3e01      	subs	r6, #1
 8009b94:	e7e9      	b.n	8009b6a <__mdiff+0x8e>

08009b96 <__d2b>:
 8009b96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	ec59 8b10 	vmov	r8, r9, d0
 8009ba2:	4615      	mov	r5, r2
 8009ba4:	f7ff fd6b 	bl	800967e <_Balloc>
 8009ba8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bac:	4607      	mov	r7, r0
 8009bae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bb2:	bb34      	cbnz	r4, 8009c02 <__d2b+0x6c>
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	f1b8 0300 	subs.w	r3, r8, #0
 8009bba:	d027      	beq.n	8009c0c <__d2b+0x76>
 8009bbc:	a802      	add	r0, sp, #8
 8009bbe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009bc2:	f7ff fe01 	bl	80097c8 <__lo0bits>
 8009bc6:	9900      	ldr	r1, [sp, #0]
 8009bc8:	b1f0      	cbz	r0, 8009c08 <__d2b+0x72>
 8009bca:	9a01      	ldr	r2, [sp, #4]
 8009bcc:	f1c0 0320 	rsb	r3, r0, #32
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	40c2      	lsrs	r2, r0
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	9201      	str	r2, [sp, #4]
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	bf14      	ite	ne
 8009be4:	2102      	movne	r1, #2
 8009be6:	2101      	moveq	r1, #1
 8009be8:	6139      	str	r1, [r7, #16]
 8009bea:	b1c4      	cbz	r4, 8009c1e <__d2b+0x88>
 8009bec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bf0:	4404      	add	r4, r0
 8009bf2:	6034      	str	r4, [r6, #0]
 8009bf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bf8:	6028      	str	r0, [r5, #0]
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	b003      	add	sp, #12
 8009bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c06:	e7d5      	b.n	8009bb4 <__d2b+0x1e>
 8009c08:	6179      	str	r1, [r7, #20]
 8009c0a:	e7e7      	b.n	8009bdc <__d2b+0x46>
 8009c0c:	a801      	add	r0, sp, #4
 8009c0e:	f7ff fddb 	bl	80097c8 <__lo0bits>
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	2101      	movs	r1, #1
 8009c18:	6139      	str	r1, [r7, #16]
 8009c1a:	3020      	adds	r0, #32
 8009c1c:	e7e5      	b.n	8009bea <__d2b+0x54>
 8009c1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c26:	6030      	str	r0, [r6, #0]
 8009c28:	6918      	ldr	r0, [r3, #16]
 8009c2a:	f7ff fdae 	bl	800978a <__hi0bits>
 8009c2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c32:	e7e1      	b.n	8009bf8 <__d2b+0x62>

08009c34 <_calloc_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	fb02 f401 	mul.w	r4, r2, r1
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f000 f856 	bl	8009cec <_malloc_r>
 8009c40:	4605      	mov	r5, r0
 8009c42:	b118      	cbz	r0, 8009c4c <_calloc_r+0x18>
 8009c44:	4622      	mov	r2, r4
 8009c46:	2100      	movs	r1, #0
 8009c48:	f7fe f860 	bl	8007d0c <memset>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}

08009c50 <_free_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d045      	beq.n	8009ce4 <_free_r+0x94>
 8009c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5c:	1f0c      	subs	r4, r1, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfb8      	it	lt
 8009c62:	18e4      	addlt	r4, r4, r3
 8009c64:	f000 f958 	bl	8009f18 <__malloc_lock>
 8009c68:	4a1f      	ldr	r2, [pc, #124]	; (8009ce8 <_free_r+0x98>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	b933      	cbnz	r3, 8009c7e <_free_r+0x2e>
 8009c70:	6063      	str	r3, [r4, #4]
 8009c72:	6014      	str	r4, [r2, #0]
 8009c74:	4628      	mov	r0, r5
 8009c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7a:	f000 b94e 	b.w	8009f1a <__malloc_unlock>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	d90c      	bls.n	8009c9c <_free_r+0x4c>
 8009c82:	6821      	ldr	r1, [r4, #0]
 8009c84:	1862      	adds	r2, r4, r1
 8009c86:	4293      	cmp	r3, r2
 8009c88:	bf04      	itt	eq
 8009c8a:	681a      	ldreq	r2, [r3, #0]
 8009c8c:	685b      	ldreq	r3, [r3, #4]
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	bf04      	itt	eq
 8009c92:	1852      	addeq	r2, r2, r1
 8009c94:	6022      	streq	r2, [r4, #0]
 8009c96:	6004      	str	r4, [r0, #0]
 8009c98:	e7ec      	b.n	8009c74 <_free_r+0x24>
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	b10a      	cbz	r2, 8009ca4 <_free_r+0x54>
 8009ca0:	42a2      	cmp	r2, r4
 8009ca2:	d9fa      	bls.n	8009c9a <_free_r+0x4a>
 8009ca4:	6819      	ldr	r1, [r3, #0]
 8009ca6:	1858      	adds	r0, r3, r1
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d10b      	bne.n	8009cc4 <_free_r+0x74>
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	4401      	add	r1, r0
 8009cb0:	1858      	adds	r0, r3, r1
 8009cb2:	4282      	cmp	r2, r0
 8009cb4:	6019      	str	r1, [r3, #0]
 8009cb6:	d1dd      	bne.n	8009c74 <_free_r+0x24>
 8009cb8:	6810      	ldr	r0, [r2, #0]
 8009cba:	6852      	ldr	r2, [r2, #4]
 8009cbc:	605a      	str	r2, [r3, #4]
 8009cbe:	4401      	add	r1, r0
 8009cc0:	6019      	str	r1, [r3, #0]
 8009cc2:	e7d7      	b.n	8009c74 <_free_r+0x24>
 8009cc4:	d902      	bls.n	8009ccc <_free_r+0x7c>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	e7d3      	b.n	8009c74 <_free_r+0x24>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	1821      	adds	r1, r4, r0
 8009cd0:	428a      	cmp	r2, r1
 8009cd2:	bf04      	itt	eq
 8009cd4:	6811      	ldreq	r1, [r2, #0]
 8009cd6:	6852      	ldreq	r2, [r2, #4]
 8009cd8:	6062      	str	r2, [r4, #4]
 8009cda:	bf04      	itt	eq
 8009cdc:	1809      	addeq	r1, r1, r0
 8009cde:	6021      	streq	r1, [r4, #0]
 8009ce0:	605c      	str	r4, [r3, #4]
 8009ce2:	e7c7      	b.n	8009c74 <_free_r+0x24>
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000228 	.word	0x20000228

08009cec <_malloc_r>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	1ccd      	adds	r5, r1, #3
 8009cf0:	f025 0503 	bic.w	r5, r5, #3
 8009cf4:	3508      	adds	r5, #8
 8009cf6:	2d0c      	cmp	r5, #12
 8009cf8:	bf38      	it	cc
 8009cfa:	250c      	movcc	r5, #12
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	4606      	mov	r6, r0
 8009d00:	db01      	blt.n	8009d06 <_malloc_r+0x1a>
 8009d02:	42a9      	cmp	r1, r5
 8009d04:	d903      	bls.n	8009d0e <_malloc_r+0x22>
 8009d06:	230c      	movs	r3, #12
 8009d08:	6033      	str	r3, [r6, #0]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	f000 f903 	bl	8009f18 <__malloc_lock>
 8009d12:	4a21      	ldr	r2, [pc, #132]	; (8009d98 <_malloc_r+0xac>)
 8009d14:	6814      	ldr	r4, [r2, #0]
 8009d16:	4621      	mov	r1, r4
 8009d18:	b991      	cbnz	r1, 8009d40 <_malloc_r+0x54>
 8009d1a:	4c20      	ldr	r4, [pc, #128]	; (8009d9c <_malloc_r+0xb0>)
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	b91b      	cbnz	r3, 8009d28 <_malloc_r+0x3c>
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f83d 	bl	8009da0 <_sbrk_r>
 8009d26:	6020      	str	r0, [r4, #0]
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f000 f838 	bl	8009da0 <_sbrk_r>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d124      	bne.n	8009d7e <_malloc_r+0x92>
 8009d34:	230c      	movs	r3, #12
 8009d36:	6033      	str	r3, [r6, #0]
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f000 f8ee 	bl	8009f1a <__malloc_unlock>
 8009d3e:	e7e4      	b.n	8009d0a <_malloc_r+0x1e>
 8009d40:	680b      	ldr	r3, [r1, #0]
 8009d42:	1b5b      	subs	r3, r3, r5
 8009d44:	d418      	bmi.n	8009d78 <_malloc_r+0x8c>
 8009d46:	2b0b      	cmp	r3, #11
 8009d48:	d90f      	bls.n	8009d6a <_malloc_r+0x7e>
 8009d4a:	600b      	str	r3, [r1, #0]
 8009d4c:	50cd      	str	r5, [r1, r3]
 8009d4e:	18cc      	adds	r4, r1, r3
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 f8e2 	bl	8009f1a <__malloc_unlock>
 8009d56:	f104 000b 	add.w	r0, r4, #11
 8009d5a:	1d23      	adds	r3, r4, #4
 8009d5c:	f020 0007 	bic.w	r0, r0, #7
 8009d60:	1ac3      	subs	r3, r0, r3
 8009d62:	d0d3      	beq.n	8009d0c <_malloc_r+0x20>
 8009d64:	425a      	negs	r2, r3
 8009d66:	50e2      	str	r2, [r4, r3]
 8009d68:	e7d0      	b.n	8009d0c <_malloc_r+0x20>
 8009d6a:	428c      	cmp	r4, r1
 8009d6c:	684b      	ldr	r3, [r1, #4]
 8009d6e:	bf16      	itet	ne
 8009d70:	6063      	strne	r3, [r4, #4]
 8009d72:	6013      	streq	r3, [r2, #0]
 8009d74:	460c      	movne	r4, r1
 8009d76:	e7eb      	b.n	8009d50 <_malloc_r+0x64>
 8009d78:	460c      	mov	r4, r1
 8009d7a:	6849      	ldr	r1, [r1, #4]
 8009d7c:	e7cc      	b.n	8009d18 <_malloc_r+0x2c>
 8009d7e:	1cc4      	adds	r4, r0, #3
 8009d80:	f024 0403 	bic.w	r4, r4, #3
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d005      	beq.n	8009d94 <_malloc_r+0xa8>
 8009d88:	1a21      	subs	r1, r4, r0
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f000 f808 	bl	8009da0 <_sbrk_r>
 8009d90:	3001      	adds	r0, #1
 8009d92:	d0cf      	beq.n	8009d34 <_malloc_r+0x48>
 8009d94:	6025      	str	r5, [r4, #0]
 8009d96:	e7db      	b.n	8009d50 <_malloc_r+0x64>
 8009d98:	20000228 	.word	0x20000228
 8009d9c:	2000022c 	.word	0x2000022c

08009da0 <_sbrk_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4c06      	ldr	r4, [pc, #24]	; (8009dbc <_sbrk_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4605      	mov	r5, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	f7f8 fd7c 	bl	80028a8 <_sbrk>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_sbrk_r+0x1a>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_sbrk_r+0x1a>
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20000710 	.word	0x20000710

08009dc0 <__sread>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	f000 f8a8 	bl	8009f1c <_read_r>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	bfab      	itete	ge
 8009dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009dd4:	181b      	addge	r3, r3, r0
 8009dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dda:	bfac      	ite	ge
 8009ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dde:	81a3      	strhlt	r3, [r4, #12]
 8009de0:	bd10      	pop	{r4, pc}

08009de2 <__swrite>:
 8009de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de6:	461f      	mov	r7, r3
 8009de8:	898b      	ldrh	r3, [r1, #12]
 8009dea:	05db      	lsls	r3, r3, #23
 8009dec:	4605      	mov	r5, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	4616      	mov	r6, r2
 8009df2:	d505      	bpl.n	8009e00 <__swrite+0x1e>
 8009df4:	2302      	movs	r3, #2
 8009df6:	2200      	movs	r2, #0
 8009df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfc:	f000 f868 	bl	8009ed0 <_lseek_r>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	463b      	mov	r3, r7
 8009e10:	4628      	mov	r0, r5
 8009e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e16:	f000 b817 	b.w	8009e48 <_write_r>

08009e1a <__sseek>:
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e22:	f000 f855 	bl	8009ed0 <_lseek_r>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	bf15      	itete	ne
 8009e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e36:	81a3      	strheq	r3, [r4, #12]
 8009e38:	bf18      	it	ne
 8009e3a:	81a3      	strhne	r3, [r4, #12]
 8009e3c:	bd10      	pop	{r4, pc}

08009e3e <__sclose>:
 8009e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e42:	f000 b813 	b.w	8009e6c <_close_r>
	...

08009e48 <_write_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4c07      	ldr	r4, [pc, #28]	; (8009e68 <_write_r+0x20>)
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	6022      	str	r2, [r4, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f8 fcd6 	bl	8002808 <_write>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_write_r+0x1e>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_write_r+0x1e>
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20000710 	.word	0x20000710

08009e6c <_close_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4c06      	ldr	r4, [pc, #24]	; (8009e88 <_close_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4605      	mov	r5, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	f7f8 fce2 	bl	8002840 <_close>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_close_r+0x1a>
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_close_r+0x1a>
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000710 	.word	0x20000710

08009e8c <_fstat_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4c07      	ldr	r4, [pc, #28]	; (8009eac <_fstat_r+0x20>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	4605      	mov	r5, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	4611      	mov	r1, r2
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	f7f8 fcdd 	bl	8002858 <_fstat>
 8009e9e:	1c43      	adds	r3, r0, #1
 8009ea0:	d102      	bne.n	8009ea8 <_fstat_r+0x1c>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	b103      	cbz	r3, 8009ea8 <_fstat_r+0x1c>
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	bd38      	pop	{r3, r4, r5, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000710 	.word	0x20000710

08009eb0 <_isatty_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4c06      	ldr	r4, [pc, #24]	; (8009ecc <_isatty_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	f7f8 fcdc 	bl	8002878 <_isatty>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_isatty_r+0x1a>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_isatty_r+0x1a>
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	20000710 	.word	0x20000710

08009ed0 <_lseek_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4c07      	ldr	r4, [pc, #28]	; (8009ef0 <_lseek_r+0x20>)
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	4611      	mov	r1, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	6022      	str	r2, [r4, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f7f8 fcd5 	bl	800288e <_lseek>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_lseek_r+0x1e>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_lseek_r+0x1e>
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	20000710 	.word	0x20000710

08009ef4 <__ascii_mbtowc>:
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	b901      	cbnz	r1, 8009efa <__ascii_mbtowc+0x6>
 8009ef8:	a901      	add	r1, sp, #4
 8009efa:	b142      	cbz	r2, 8009f0e <__ascii_mbtowc+0x1a>
 8009efc:	b14b      	cbz	r3, 8009f12 <__ascii_mbtowc+0x1e>
 8009efe:	7813      	ldrb	r3, [r2, #0]
 8009f00:	600b      	str	r3, [r1, #0]
 8009f02:	7812      	ldrb	r2, [r2, #0]
 8009f04:	1c10      	adds	r0, r2, #0
 8009f06:	bf18      	it	ne
 8009f08:	2001      	movne	r0, #1
 8009f0a:	b002      	add	sp, #8
 8009f0c:	4770      	bx	lr
 8009f0e:	4610      	mov	r0, r2
 8009f10:	e7fb      	b.n	8009f0a <__ascii_mbtowc+0x16>
 8009f12:	f06f 0001 	mvn.w	r0, #1
 8009f16:	e7f8      	b.n	8009f0a <__ascii_mbtowc+0x16>

08009f18 <__malloc_lock>:
 8009f18:	4770      	bx	lr

08009f1a <__malloc_unlock>:
 8009f1a:	4770      	bx	lr

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4c07      	ldr	r4, [pc, #28]	; (8009f3c <_read_r+0x20>)
 8009f20:	4605      	mov	r5, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	6022      	str	r2, [r4, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f8 fc4f 	bl	80027ce <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20000710 	.word	0x20000710

08009f40 <__ascii_wctomb>:
 8009f40:	b149      	cbz	r1, 8009f56 <__ascii_wctomb+0x16>
 8009f42:	2aff      	cmp	r2, #255	; 0xff
 8009f44:	bf85      	ittet	hi
 8009f46:	238a      	movhi	r3, #138	; 0x8a
 8009f48:	6003      	strhi	r3, [r0, #0]
 8009f4a:	700a      	strbls	r2, [r1, #0]
 8009f4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f50:	bf98      	it	ls
 8009f52:	2001      	movls	r0, #1
 8009f54:	4770      	bx	lr
 8009f56:	4608      	mov	r0, r1
 8009f58:	4770      	bx	lr

08009f5a <fabs>:
 8009f5a:	ec51 0b10 	vmov	r0, r1, d0
 8009f5e:	ee10 2a10 	vmov	r2, s0
 8009f62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f66:	ec43 2b10 	vmov	d0, r2, r3
 8009f6a:	4770      	bx	lr

08009f6c <pow>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	ed2d 8b04 	vpush	{d8-d9}
 8009f74:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a248 <pow+0x2dc>
 8009f78:	b08d      	sub	sp, #52	; 0x34
 8009f7a:	ec57 6b10 	vmov	r6, r7, d0
 8009f7e:	ec55 4b11 	vmov	r4, r5, d1
 8009f82:	f000 f9bd 	bl	800a300 <__ieee754_pow>
 8009f86:	f999 3000 	ldrsb.w	r3, [r9]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f92:	eef0 8a60 	vmov.f32	s17, s1
 8009f96:	46c8      	mov	r8, r9
 8009f98:	d05f      	beq.n	800a05a <pow+0xee>
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 fd8b 	bl	8000abc <__aeabi_dcmpun>
 8009fa6:	4683      	mov	fp, r0
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d156      	bne.n	800a05a <pow+0xee>
 8009fac:	4632      	mov	r2, r6
 8009fae:	463b      	mov	r3, r7
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 fd82 	bl	8000abc <__aeabi_dcmpun>
 8009fb8:	9001      	str	r0, [sp, #4]
 8009fba:	b1e8      	cbz	r0, 8009ff8 <pow+0x8c>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	f7f6 fd48 	bl	8000a58 <__aeabi_dcmpeq>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d046      	beq.n	800a05a <pow+0xee>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	9302      	str	r3, [sp, #8]
 8009fd0:	4b96      	ldr	r3, [pc, #600]	; (800a22c <pow+0x2c0>)
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	4b96      	ldr	r3, [pc, #600]	; (800a230 <pow+0x2c4>)
 8009fd6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009fda:	2200      	movs	r2, #0
 8009fdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fe0:	9b00      	ldr	r3, [sp, #0]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fe8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009fec:	d033      	beq.n	800a056 <pow+0xea>
 8009fee:	a802      	add	r0, sp, #8
 8009ff0:	f000 ff4c 	bl	800ae8c <matherr>
 8009ff4:	bb48      	cbnz	r0, 800a04a <pow+0xde>
 8009ff6:	e05d      	b.n	800a0b4 <pow+0x148>
 8009ff8:	f04f 0a00 	mov.w	sl, #0
 8009ffc:	f04f 0b00 	mov.w	fp, #0
 800a000:	4652      	mov	r2, sl
 800a002:	465b      	mov	r3, fp
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	f7f6 fd26 	bl	8000a58 <__aeabi_dcmpeq>
 800a00c:	ec4b ab19 	vmov	d9, sl, fp
 800a010:	2800      	cmp	r0, #0
 800a012:	d054      	beq.n	800a0be <pow+0x152>
 800a014:	4652      	mov	r2, sl
 800a016:	465b      	mov	r3, fp
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7f6 fd1c 	bl	8000a58 <__aeabi_dcmpeq>
 800a020:	4680      	mov	r8, r0
 800a022:	b318      	cbz	r0, 800a06c <pow+0x100>
 800a024:	2301      	movs	r3, #1
 800a026:	9302      	str	r3, [sp, #8]
 800a028:	4b80      	ldr	r3, [pc, #512]	; (800a22c <pow+0x2c0>)
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	9b01      	ldr	r3, [sp, #4]
 800a02e:	930a      	str	r3, [sp, #40]	; 0x28
 800a030:	9b00      	ldr	r3, [sp, #0]
 800a032:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a036:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a03a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0d5      	beq.n	8009fee <pow+0x82>
 800a042:	4b7b      	ldr	r3, [pc, #492]	; (800a230 <pow+0x2c4>)
 800a044:	2200      	movs	r2, #0
 800a046:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04c:	b11b      	cbz	r3, 800a056 <pow+0xea>
 800a04e:	f7fd fe33 	bl	8007cb8 <__errno>
 800a052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	ed9d 8b08 	vldr	d8, [sp, #32]
 800a05a:	eeb0 0a48 	vmov.f32	s0, s16
 800a05e:	eef0 0a68 	vmov.f32	s1, s17
 800a062:	b00d      	add	sp, #52	; 0x34
 800a064:	ecbd 8b04 	vpop	{d8-d9}
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	ec45 4b10 	vmov	d0, r4, r5
 800a070:	f000 ff04 	bl	800ae7c <finite>
 800a074:	2800      	cmp	r0, #0
 800a076:	d0f0      	beq.n	800a05a <pow+0xee>
 800a078:	4652      	mov	r2, sl
 800a07a:	465b      	mov	r3, fp
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 fcf4 	bl	8000a6c <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	d0e8      	beq.n	800a05a <pow+0xee>
 800a088:	2301      	movs	r3, #1
 800a08a:	9302      	str	r3, [sp, #8]
 800a08c:	4b67      	ldr	r3, [pc, #412]	; (800a22c <pow+0x2c0>)
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	f999 3000 	ldrsb.w	r3, [r9]
 800a094:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a098:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a09c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a0a0:	b913      	cbnz	r3, 800a0a8 <pow+0x13c>
 800a0a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a0a6:	e7a2      	b.n	8009fee <pow+0x82>
 800a0a8:	4962      	ldr	r1, [pc, #392]	; (800a234 <pow+0x2c8>)
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d19c      	bne.n	8009fee <pow+0x82>
 800a0b4:	f7fd fe00 	bl	8007cb8 <__errno>
 800a0b8:	2321      	movs	r3, #33	; 0x21
 800a0ba:	6003      	str	r3, [r0, #0]
 800a0bc:	e7c5      	b.n	800a04a <pow+0xde>
 800a0be:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c2:	eef0 0a68 	vmov.f32	s1, s17
 800a0c6:	f000 fed9 	bl	800ae7c <finite>
 800a0ca:	9000      	str	r0, [sp, #0]
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f040 8081 	bne.w	800a1d4 <pow+0x268>
 800a0d2:	ec47 6b10 	vmov	d0, r6, r7
 800a0d6:	f000 fed1 	bl	800ae7c <finite>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d07a      	beq.n	800a1d4 <pow+0x268>
 800a0de:	ec45 4b10 	vmov	d0, r4, r5
 800a0e2:	f000 fecb 	bl	800ae7c <finite>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d074      	beq.n	800a1d4 <pow+0x268>
 800a0ea:	ec53 2b18 	vmov	r2, r3, d8
 800a0ee:	ee18 0a10 	vmov	r0, s16
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f7f6 fce2 	bl	8000abc <__aeabi_dcmpun>
 800a0f8:	f999 9000 	ldrsb.w	r9, [r9]
 800a0fc:	4b4b      	ldr	r3, [pc, #300]	; (800a22c <pow+0x2c0>)
 800a0fe:	b1b0      	cbz	r0, 800a12e <pow+0x1c2>
 800a100:	2201      	movs	r2, #1
 800a102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	930a      	str	r3, [sp, #40]	; 0x28
 800a10a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a10e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a112:	f1b9 0f00 	cmp.w	r9, #0
 800a116:	d0c4      	beq.n	800a0a2 <pow+0x136>
 800a118:	4652      	mov	r2, sl
 800a11a:	465b      	mov	r3, fp
 800a11c:	4650      	mov	r0, sl
 800a11e:	4659      	mov	r1, fp
 800a120:	f7f6 fb5c 	bl	80007dc <__aeabi_ddiv>
 800a124:	f1b9 0f02 	cmp.w	r9, #2
 800a128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a12c:	e7c1      	b.n	800a0b2 <pow+0x146>
 800a12e:	2203      	movs	r2, #3
 800a130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a134:	900a      	str	r0, [sp, #40]	; 0x28
 800a136:	4629      	mov	r1, r5
 800a138:	4620      	mov	r0, r4
 800a13a:	2200      	movs	r2, #0
 800a13c:	4b3e      	ldr	r3, [pc, #248]	; (800a238 <pow+0x2cc>)
 800a13e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a142:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a146:	f7f6 fa1f 	bl	8000588 <__aeabi_dmul>
 800a14a:	4604      	mov	r4, r0
 800a14c:	460d      	mov	r5, r1
 800a14e:	f1b9 0f00 	cmp.w	r9, #0
 800a152:	d124      	bne.n	800a19e <pow+0x232>
 800a154:	4b39      	ldr	r3, [pc, #228]	; (800a23c <pow+0x2d0>)
 800a156:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a15a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a15e:	4630      	mov	r0, r6
 800a160:	4652      	mov	r2, sl
 800a162:	465b      	mov	r3, fp
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fc81 	bl	8000a6c <__aeabi_dcmplt>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d056      	beq.n	800a21c <pow+0x2b0>
 800a16e:	ec45 4b10 	vmov	d0, r4, r5
 800a172:	f000 fe95 	bl	800aea0 <rint>
 800a176:	4622      	mov	r2, r4
 800a178:	462b      	mov	r3, r5
 800a17a:	ec51 0b10 	vmov	r0, r1, d0
 800a17e:	f7f6 fc6b 	bl	8000a58 <__aeabi_dcmpeq>
 800a182:	b920      	cbnz	r0, 800a18e <pow+0x222>
 800a184:	4b2e      	ldr	r3, [pc, #184]	; (800a240 <pow+0x2d4>)
 800a186:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a18a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a18e:	f998 3000 	ldrsb.w	r3, [r8]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d142      	bne.n	800a21c <pow+0x2b0>
 800a196:	f7fd fd8f 	bl	8007cb8 <__errno>
 800a19a:	2322      	movs	r3, #34	; 0x22
 800a19c:	e78d      	b.n	800a0ba <pow+0x14e>
 800a19e:	4b29      	ldr	r3, [pc, #164]	; (800a244 <pow+0x2d8>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 fc5d 	bl	8000a6c <__aeabi_dcmplt>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0eb      	beq.n	800a18e <pow+0x222>
 800a1b6:	ec45 4b10 	vmov	d0, r4, r5
 800a1ba:	f000 fe71 	bl	800aea0 <rint>
 800a1be:	4622      	mov	r2, r4
 800a1c0:	462b      	mov	r3, r5
 800a1c2:	ec51 0b10 	vmov	r0, r1, d0
 800a1c6:	f7f6 fc47 	bl	8000a58 <__aeabi_dcmpeq>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1df      	bne.n	800a18e <pow+0x222>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b18      	ldr	r3, [pc, #96]	; (800a234 <pow+0x2c8>)
 800a1d2:	e7da      	b.n	800a18a <pow+0x21e>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	ec51 0b18 	vmov	r0, r1, d8
 800a1dc:	f7f6 fc3c 	bl	8000a58 <__aeabi_dcmpeq>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	f43f af3a 	beq.w	800a05a <pow+0xee>
 800a1e6:	ec47 6b10 	vmov	d0, r6, r7
 800a1ea:	f000 fe47 	bl	800ae7c <finite>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f af33 	beq.w	800a05a <pow+0xee>
 800a1f4:	ec45 4b10 	vmov	d0, r4, r5
 800a1f8:	f000 fe40 	bl	800ae7c <finite>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f af2c 	beq.w	800a05a <pow+0xee>
 800a202:	2304      	movs	r3, #4
 800a204:	9302      	str	r3, [sp, #8]
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <pow+0x2c0>)
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	2300      	movs	r3, #0
 800a20c:	930a      	str	r3, [sp, #40]	; 0x28
 800a20e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a212:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a216:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a21a:	e7b8      	b.n	800a18e <pow+0x222>
 800a21c:	a802      	add	r0, sp, #8
 800a21e:	f000 fe35 	bl	800ae8c <matherr>
 800a222:	2800      	cmp	r0, #0
 800a224:	f47f af11 	bne.w	800a04a <pow+0xde>
 800a228:	e7b5      	b.n	800a196 <pow+0x22a>
 800a22a:	bf00      	nop
 800a22c:	0800b3df 	.word	0x0800b3df
 800a230:	3ff00000 	.word	0x3ff00000
 800a234:	fff00000 	.word	0xfff00000
 800a238:	3fe00000 	.word	0x3fe00000
 800a23c:	47efffff 	.word	0x47efffff
 800a240:	c7efffff 	.word	0xc7efffff
 800a244:	7ff00000 	.word	0x7ff00000
 800a248:	200001dc 	.word	0x200001dc

0800a24c <sqrt>:
 800a24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b08b      	sub	sp, #44	; 0x2c
 800a256:	ec55 4b10 	vmov	r4, r5, d0
 800a25a:	f000 fd5f 	bl	800ad1c <__ieee754_sqrt>
 800a25e:	4b26      	ldr	r3, [pc, #152]	; (800a2f8 <sqrt+0xac>)
 800a260:	eeb0 8a40 	vmov.f32	s16, s0
 800a264:	eef0 8a60 	vmov.f32	s17, s1
 800a268:	f993 6000 	ldrsb.w	r6, [r3]
 800a26c:	1c73      	adds	r3, r6, #1
 800a26e:	d02a      	beq.n	800a2c6 <sqrt+0x7a>
 800a270:	4622      	mov	r2, r4
 800a272:	462b      	mov	r3, r5
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	f7f6 fc20 	bl	8000abc <__aeabi_dcmpun>
 800a27c:	4607      	mov	r7, r0
 800a27e:	bb10      	cbnz	r0, 800a2c6 <sqrt+0x7a>
 800a280:	f04f 0800 	mov.w	r8, #0
 800a284:	f04f 0900 	mov.w	r9, #0
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 fbec 	bl	8000a6c <__aeabi_dcmplt>
 800a294:	b1b8      	cbz	r0, 800a2c6 <sqrt+0x7a>
 800a296:	2301      	movs	r3, #1
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b18      	ldr	r3, [pc, #96]	; (800a2fc <sqrt+0xb0>)
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	9708      	str	r7, [sp, #32]
 800a2a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a2a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a2a8:	b9b6      	cbnz	r6, 800a2d8 <sqrt+0x8c>
 800a2aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a2ae:	4668      	mov	r0, sp
 800a2b0:	f000 fdec 	bl	800ae8c <matherr>
 800a2b4:	b1d0      	cbz	r0, 800a2ec <sqrt+0xa0>
 800a2b6:	9b08      	ldr	r3, [sp, #32]
 800a2b8:	b11b      	cbz	r3, 800a2c2 <sqrt+0x76>
 800a2ba:	f7fd fcfd 	bl	8007cb8 <__errno>
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a2c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ca:	eef0 0a68 	vmov.f32	s1, s17
 800a2ce:	b00b      	add	sp, #44	; 0x2c
 800a2d0:	ecbd 8b02 	vpop	{d8}
 800a2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f6 fa7c 	bl	80007dc <__aeabi_ddiv>
 800a2e4:	2e02      	cmp	r6, #2
 800a2e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2ea:	d1e0      	bne.n	800a2ae <sqrt+0x62>
 800a2ec:	f7fd fce4 	bl	8007cb8 <__errno>
 800a2f0:	2321      	movs	r3, #33	; 0x21
 800a2f2:	6003      	str	r3, [r0, #0]
 800a2f4:	e7df      	b.n	800a2b6 <sqrt+0x6a>
 800a2f6:	bf00      	nop
 800a2f8:	200001dc 	.word	0x200001dc
 800a2fc:	0800b3e3 	.word	0x0800b3e3

0800a300 <__ieee754_pow>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	b091      	sub	sp, #68	; 0x44
 800a306:	ed8d 1b00 	vstr	d1, [sp]
 800a30a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a30e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a312:	ea58 0302 	orrs.w	r3, r8, r2
 800a316:	ec57 6b10 	vmov	r6, r7, d0
 800a31a:	f000 84be 	beq.w	800ac9a <__ieee754_pow+0x99a>
 800a31e:	4b7a      	ldr	r3, [pc, #488]	; (800a508 <__ieee754_pow+0x208>)
 800a320:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a324:	429c      	cmp	r4, r3
 800a326:	463d      	mov	r5, r7
 800a328:	ee10 aa10 	vmov	sl, s0
 800a32c:	dc09      	bgt.n	800a342 <__ieee754_pow+0x42>
 800a32e:	d103      	bne.n	800a338 <__ieee754_pow+0x38>
 800a330:	b93e      	cbnz	r6, 800a342 <__ieee754_pow+0x42>
 800a332:	45a0      	cmp	r8, r4
 800a334:	dc0d      	bgt.n	800a352 <__ieee754_pow+0x52>
 800a336:	e001      	b.n	800a33c <__ieee754_pow+0x3c>
 800a338:	4598      	cmp	r8, r3
 800a33a:	dc02      	bgt.n	800a342 <__ieee754_pow+0x42>
 800a33c:	4598      	cmp	r8, r3
 800a33e:	d10e      	bne.n	800a35e <__ieee754_pow+0x5e>
 800a340:	b16a      	cbz	r2, 800a35e <__ieee754_pow+0x5e>
 800a342:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a346:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a34a:	ea54 030a 	orrs.w	r3, r4, sl
 800a34e:	f000 84a4 	beq.w	800ac9a <__ieee754_pow+0x99a>
 800a352:	486e      	ldr	r0, [pc, #440]	; (800a50c <__ieee754_pow+0x20c>)
 800a354:	b011      	add	sp, #68	; 0x44
 800a356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f000 bd99 	b.w	800ae90 <nan>
 800a35e:	2d00      	cmp	r5, #0
 800a360:	da53      	bge.n	800a40a <__ieee754_pow+0x10a>
 800a362:	4b6b      	ldr	r3, [pc, #428]	; (800a510 <__ieee754_pow+0x210>)
 800a364:	4598      	cmp	r8, r3
 800a366:	dc4d      	bgt.n	800a404 <__ieee754_pow+0x104>
 800a368:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a36c:	4598      	cmp	r8, r3
 800a36e:	dd4c      	ble.n	800a40a <__ieee754_pow+0x10a>
 800a370:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a374:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a378:	2b14      	cmp	r3, #20
 800a37a:	dd26      	ble.n	800a3ca <__ieee754_pow+0xca>
 800a37c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a380:	fa22 f103 	lsr.w	r1, r2, r3
 800a384:	fa01 f303 	lsl.w	r3, r1, r3
 800a388:	4293      	cmp	r3, r2
 800a38a:	d13e      	bne.n	800a40a <__ieee754_pow+0x10a>
 800a38c:	f001 0101 	and.w	r1, r1, #1
 800a390:	f1c1 0b02 	rsb	fp, r1, #2
 800a394:	2a00      	cmp	r2, #0
 800a396:	d15b      	bne.n	800a450 <__ieee754_pow+0x150>
 800a398:	4b5b      	ldr	r3, [pc, #364]	; (800a508 <__ieee754_pow+0x208>)
 800a39a:	4598      	cmp	r8, r3
 800a39c:	d124      	bne.n	800a3e8 <__ieee754_pow+0xe8>
 800a39e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a3a2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a3a6:	ea53 030a 	orrs.w	r3, r3, sl
 800a3aa:	f000 8476 	beq.w	800ac9a <__ieee754_pow+0x99a>
 800a3ae:	4b59      	ldr	r3, [pc, #356]	; (800a514 <__ieee754_pow+0x214>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	dd2d      	ble.n	800a410 <__ieee754_pow+0x110>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	f280 8473 	bge.w	800aca2 <__ieee754_pow+0x9a2>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	ec41 0b10 	vmov	d0, r0, r1
 800a3c4:	b011      	add	sp, #68	; 0x44
 800a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	d13e      	bne.n	800a44c <__ieee754_pow+0x14c>
 800a3ce:	f1c3 0314 	rsb	r3, r3, #20
 800a3d2:	fa48 f103 	asr.w	r1, r8, r3
 800a3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3da:	4543      	cmp	r3, r8
 800a3dc:	f040 8469 	bne.w	800acb2 <__ieee754_pow+0x9b2>
 800a3e0:	f001 0101 	and.w	r1, r1, #1
 800a3e4:	f1c1 0b02 	rsb	fp, r1, #2
 800a3e8:	4b4b      	ldr	r3, [pc, #300]	; (800a518 <__ieee754_pow+0x218>)
 800a3ea:	4598      	cmp	r8, r3
 800a3ec:	d118      	bne.n	800a420 <__ieee754_pow+0x120>
 800a3ee:	f1b9 0f00 	cmp.w	r9, #0
 800a3f2:	f280 845a 	bge.w	800acaa <__ieee754_pow+0x9aa>
 800a3f6:	4948      	ldr	r1, [pc, #288]	; (800a518 <__ieee754_pow+0x218>)
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f7f6 f9ed 	bl	80007dc <__aeabi_ddiv>
 800a402:	e7dd      	b.n	800a3c0 <__ieee754_pow+0xc0>
 800a404:	f04f 0b02 	mov.w	fp, #2
 800a408:	e7c4      	b.n	800a394 <__ieee754_pow+0x94>
 800a40a:	f04f 0b00 	mov.w	fp, #0
 800a40e:	e7c1      	b.n	800a394 <__ieee754_pow+0x94>
 800a410:	f1b9 0f00 	cmp.w	r9, #0
 800a414:	dad2      	bge.n	800a3bc <__ieee754_pow+0xbc>
 800a416:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a41a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a41e:	e7cf      	b.n	800a3c0 <__ieee754_pow+0xc0>
 800a420:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a424:	d106      	bne.n	800a434 <__ieee754_pow+0x134>
 800a426:	4632      	mov	r2, r6
 800a428:	463b      	mov	r3, r7
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7f6 f8ab 	bl	8000588 <__aeabi_dmul>
 800a432:	e7c5      	b.n	800a3c0 <__ieee754_pow+0xc0>
 800a434:	4b39      	ldr	r3, [pc, #228]	; (800a51c <__ieee754_pow+0x21c>)
 800a436:	4599      	cmp	r9, r3
 800a438:	d10a      	bne.n	800a450 <__ieee754_pow+0x150>
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	db08      	blt.n	800a450 <__ieee754_pow+0x150>
 800a43e:	ec47 6b10 	vmov	d0, r6, r7
 800a442:	b011      	add	sp, #68	; 0x44
 800a444:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	f000 bc68 	b.w	800ad1c <__ieee754_sqrt>
 800a44c:	f04f 0b00 	mov.w	fp, #0
 800a450:	ec47 6b10 	vmov	d0, r6, r7
 800a454:	f7ff fd81 	bl	8009f5a <fabs>
 800a458:	ec51 0b10 	vmov	r0, r1, d0
 800a45c:	f1ba 0f00 	cmp.w	sl, #0
 800a460:	d127      	bne.n	800a4b2 <__ieee754_pow+0x1b2>
 800a462:	b124      	cbz	r4, 800a46e <__ieee754_pow+0x16e>
 800a464:	4b2c      	ldr	r3, [pc, #176]	; (800a518 <__ieee754_pow+0x218>)
 800a466:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d121      	bne.n	800a4b2 <__ieee754_pow+0x1b2>
 800a46e:	f1b9 0f00 	cmp.w	r9, #0
 800a472:	da05      	bge.n	800a480 <__ieee754_pow+0x180>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	2000      	movs	r0, #0
 800a47a:	4927      	ldr	r1, [pc, #156]	; (800a518 <__ieee754_pow+0x218>)
 800a47c:	f7f6 f9ae 	bl	80007dc <__aeabi_ddiv>
 800a480:	2d00      	cmp	r5, #0
 800a482:	da9d      	bge.n	800a3c0 <__ieee754_pow+0xc0>
 800a484:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a488:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a48c:	ea54 030b 	orrs.w	r3, r4, fp
 800a490:	d108      	bne.n	800a4a4 <__ieee754_pow+0x1a4>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4610      	mov	r0, r2
 800a498:	4619      	mov	r1, r3
 800a49a:	f7f5 febd 	bl	8000218 <__aeabi_dsub>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	e7ac      	b.n	800a3fe <__ieee754_pow+0xfe>
 800a4a4:	f1bb 0f01 	cmp.w	fp, #1
 800a4a8:	d18a      	bne.n	800a3c0 <__ieee754_pow+0xc0>
 800a4aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	e786      	b.n	800a3c0 <__ieee754_pow+0xc0>
 800a4b2:	0fed      	lsrs	r5, r5, #31
 800a4b4:	1e6b      	subs	r3, r5, #1
 800a4b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a4b8:	ea5b 0303 	orrs.w	r3, fp, r3
 800a4bc:	d102      	bne.n	800a4c4 <__ieee754_pow+0x1c4>
 800a4be:	4632      	mov	r2, r6
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	e7e8      	b.n	800a496 <__ieee754_pow+0x196>
 800a4c4:	4b16      	ldr	r3, [pc, #88]	; (800a520 <__ieee754_pow+0x220>)
 800a4c6:	4598      	cmp	r8, r3
 800a4c8:	f340 80fe 	ble.w	800a6c8 <__ieee754_pow+0x3c8>
 800a4cc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a4d0:	4598      	cmp	r8, r3
 800a4d2:	dd0a      	ble.n	800a4ea <__ieee754_pow+0x1ea>
 800a4d4:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <__ieee754_pow+0x214>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	dc0d      	bgt.n	800a4f6 <__ieee754_pow+0x1f6>
 800a4da:	f1b9 0f00 	cmp.w	r9, #0
 800a4de:	f6bf af6d 	bge.w	800a3bc <__ieee754_pow+0xbc>
 800a4e2:	a307      	add	r3, pc, #28	; (adr r3, 800a500 <__ieee754_pow+0x200>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	e79f      	b.n	800a42a <__ieee754_pow+0x12a>
 800a4ea:	4b0e      	ldr	r3, [pc, #56]	; (800a524 <__ieee754_pow+0x224>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	ddf4      	ble.n	800a4da <__ieee754_pow+0x1da>
 800a4f0:	4b09      	ldr	r3, [pc, #36]	; (800a518 <__ieee754_pow+0x218>)
 800a4f2:	429c      	cmp	r4, r3
 800a4f4:	dd18      	ble.n	800a528 <__ieee754_pow+0x228>
 800a4f6:	f1b9 0f00 	cmp.w	r9, #0
 800a4fa:	dcf2      	bgt.n	800a4e2 <__ieee754_pow+0x1e2>
 800a4fc:	e75e      	b.n	800a3bc <__ieee754_pow+0xbc>
 800a4fe:	bf00      	nop
 800a500:	8800759c 	.word	0x8800759c
 800a504:	7e37e43c 	.word	0x7e37e43c
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	0800b2dd 	.word	0x0800b2dd
 800a510:	433fffff 	.word	0x433fffff
 800a514:	3fefffff 	.word	0x3fefffff
 800a518:	3ff00000 	.word	0x3ff00000
 800a51c:	3fe00000 	.word	0x3fe00000
 800a520:	41e00000 	.word	0x41e00000
 800a524:	3feffffe 	.word	0x3feffffe
 800a528:	2200      	movs	r2, #0
 800a52a:	4b63      	ldr	r3, [pc, #396]	; (800a6b8 <__ieee754_pow+0x3b8>)
 800a52c:	f7f5 fe74 	bl	8000218 <__aeabi_dsub>
 800a530:	a355      	add	r3, pc, #340	; (adr r3, 800a688 <__ieee754_pow+0x388>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	4604      	mov	r4, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	f7f6 f825 	bl	8000588 <__aeabi_dmul>
 800a53e:	a354      	add	r3, pc, #336	; (adr r3, 800a690 <__ieee754_pow+0x390>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	4606      	mov	r6, r0
 800a546:	460f      	mov	r7, r1
 800a548:	4620      	mov	r0, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f6 f81c 	bl	8000588 <__aeabi_dmul>
 800a550:	2200      	movs	r2, #0
 800a552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a556:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <__ieee754_pow+0x3bc>)
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f6 f814 	bl	8000588 <__aeabi_dmul>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	a14c      	add	r1, pc, #304	; (adr r1, 800a698 <__ieee754_pow+0x398>)
 800a566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a56a:	f7f5 fe55 	bl	8000218 <__aeabi_dsub>
 800a56e:	4622      	mov	r2, r4
 800a570:	462b      	mov	r3, r5
 800a572:	f7f6 f809 	bl	8000588 <__aeabi_dmul>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	2000      	movs	r0, #0
 800a57c:	4950      	ldr	r1, [pc, #320]	; (800a6c0 <__ieee754_pow+0x3c0>)
 800a57e:	f7f5 fe4b 	bl	8000218 <__aeabi_dsub>
 800a582:	4622      	mov	r2, r4
 800a584:	462b      	mov	r3, r5
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	4620      	mov	r0, r4
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7f5 fffb 	bl	8000588 <__aeabi_dmul>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f5 fff5 	bl	8000588 <__aeabi_dmul>
 800a59e:	a340      	add	r3, pc, #256	; (adr r3, 800a6a0 <__ieee754_pow+0x3a0>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f7f5 fff0 	bl	8000588 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b0:	f7f5 fe32 	bl	8000218 <__aeabi_dsub>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f5 fe2c 	bl	800021c <__adddf3>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ca:	4632      	mov	r2, r6
 800a5cc:	463b      	mov	r3, r7
 800a5ce:	f7f5 fe23 	bl	8000218 <__aeabi_dsub>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7f5 fe1d 	bl	8000218 <__aeabi_dsub>
 800a5de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	f040 81eb 	bne.w	800a9c4 <__ieee754_pow+0x6c4>
 800a5ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a6a8 <__ieee754_pow+0x3a8>
 800a5f2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a5f6:	2400      	movs	r4, #0
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a600:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a604:	f7f5 fe08 	bl	8000218 <__aeabi_dsub>
 800a608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a60c:	f7f5 ffbc 	bl	8000588 <__aeabi_dmul>
 800a610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a614:	4680      	mov	r8, r0
 800a616:	4689      	mov	r9, r1
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f5 ffb4 	bl	8000588 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f5 fdf8 	bl	800021c <__adddf3>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a638:	f7f5 ffa6 	bl	8000588 <__aeabi_dmul>
 800a63c:	460b      	mov	r3, r1
 800a63e:	4604      	mov	r4, r0
 800a640:	460d      	mov	r5, r1
 800a642:	4602      	mov	r2, r0
 800a644:	4649      	mov	r1, r9
 800a646:	4640      	mov	r0, r8
 800a648:	e9cd 4500 	strd	r4, r5, [sp]
 800a64c:	f7f5 fde6 	bl	800021c <__adddf3>
 800a650:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <__ieee754_pow+0x3c4>)
 800a652:	4299      	cmp	r1, r3
 800a654:	4606      	mov	r6, r0
 800a656:	460f      	mov	r7, r1
 800a658:	468b      	mov	fp, r1
 800a65a:	f340 82f7 	ble.w	800ac4c <__ieee754_pow+0x94c>
 800a65e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a662:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a666:	4303      	orrs	r3, r0
 800a668:	f000 81ea 	beq.w	800aa40 <__ieee754_pow+0x740>
 800a66c:	a310      	add	r3, pc, #64	; (adr r3, 800a6b0 <__ieee754_pow+0x3b0>)
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a676:	f7f5 ff87 	bl	8000588 <__aeabi_dmul>
 800a67a:	a30d      	add	r3, pc, #52	; (adr r3, 800a6b0 <__ieee754_pow+0x3b0>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	e6d5      	b.n	800a42e <__ieee754_pow+0x12e>
 800a682:	bf00      	nop
 800a684:	f3af 8000 	nop.w
 800a688:	60000000 	.word	0x60000000
 800a68c:	3ff71547 	.word	0x3ff71547
 800a690:	f85ddf44 	.word	0xf85ddf44
 800a694:	3e54ae0b 	.word	0x3e54ae0b
 800a698:	55555555 	.word	0x55555555
 800a69c:	3fd55555 	.word	0x3fd55555
 800a6a0:	652b82fe 	.word	0x652b82fe
 800a6a4:	3ff71547 	.word	0x3ff71547
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	bff00000 	.word	0xbff00000
 800a6b0:	8800759c 	.word	0x8800759c
 800a6b4:	7e37e43c 	.word	0x7e37e43c
 800a6b8:	3ff00000 	.word	0x3ff00000
 800a6bc:	3fd00000 	.word	0x3fd00000
 800a6c0:	3fe00000 	.word	0x3fe00000
 800a6c4:	408fffff 	.word	0x408fffff
 800a6c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a6cc:	f04f 0200 	mov.w	r2, #0
 800a6d0:	da05      	bge.n	800a6de <__ieee754_pow+0x3de>
 800a6d2:	4bd3      	ldr	r3, [pc, #844]	; (800aa20 <__ieee754_pow+0x720>)
 800a6d4:	f7f5 ff58 	bl	8000588 <__aeabi_dmul>
 800a6d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a6dc:	460c      	mov	r4, r1
 800a6de:	1523      	asrs	r3, r4, #20
 800a6e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6e4:	4413      	add	r3, r2
 800a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e8:	4bce      	ldr	r3, [pc, #824]	; (800aa24 <__ieee754_pow+0x724>)
 800a6ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a6ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a6f8:	dd08      	ble.n	800a70c <__ieee754_pow+0x40c>
 800a6fa:	4bcb      	ldr	r3, [pc, #812]	; (800aa28 <__ieee754_pow+0x728>)
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	f340 815e 	ble.w	800a9be <__ieee754_pow+0x6be>
 800a702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a704:	3301      	adds	r3, #1
 800a706:	9309      	str	r3, [sp, #36]	; 0x24
 800a708:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a70c:	f04f 0a00 	mov.w	sl, #0
 800a710:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a714:	930c      	str	r3, [sp, #48]	; 0x30
 800a716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a718:	4bc4      	ldr	r3, [pc, #784]	; (800aa2c <__ieee754_pow+0x72c>)
 800a71a:	4413      	add	r3, r2
 800a71c:	ed93 7b00 	vldr	d7, [r3]
 800a720:	4629      	mov	r1, r5
 800a722:	ec53 2b17 	vmov	r2, r3, d7
 800a726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a72a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a72e:	f7f5 fd73 	bl	8000218 <__aeabi_dsub>
 800a732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73e:	f7f5 fd6d 	bl	800021c <__adddf3>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	2000      	movs	r0, #0
 800a748:	49b9      	ldr	r1, [pc, #740]	; (800aa30 <__ieee754_pow+0x730>)
 800a74a:	f7f6 f847 	bl	80007dc <__aeabi_ddiv>
 800a74e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f5 ff15 	bl	8000588 <__aeabi_dmul>
 800a75e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a762:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a766:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a76a:	2300      	movs	r3, #0
 800a76c:	9302      	str	r3, [sp, #8]
 800a76e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a772:	106d      	asrs	r5, r5, #1
 800a774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a77c:	2200      	movs	r2, #0
 800a77e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	4614      	mov	r4, r2
 800a788:	461d      	mov	r5, r3
 800a78a:	f7f5 fefd 	bl	8000588 <__aeabi_dmul>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fd3f 	bl	8000218 <__aeabi_dsub>
 800a79a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7f5 fd37 	bl	8000218 <__aeabi_dsub>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7b2:	f7f5 fd31 	bl	8000218 <__aeabi_dsub>
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	f7f5 fee5 	bl	8000588 <__aeabi_dmul>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	f7f5 fd27 	bl	8000218 <__aeabi_dsub>
 800a7ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a7ce:	f7f5 fedb 	bl	8000588 <__aeabi_dmul>
 800a7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f7f5 fed3 	bl	8000588 <__aeabi_dmul>
 800a7e2:	a37b      	add	r3, pc, #492	; (adr r3, 800a9d0 <__ieee754_pow+0x6d0>)
 800a7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	f7f5 fecc 	bl	8000588 <__aeabi_dmul>
 800a7f0:	a379      	add	r3, pc, #484	; (adr r3, 800a9d8 <__ieee754_pow+0x6d8>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 fd11 	bl	800021c <__adddf3>
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	f7f5 fec3 	bl	8000588 <__aeabi_dmul>
 800a802:	a377      	add	r3, pc, #476	; (adr r3, 800a9e0 <__ieee754_pow+0x6e0>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fd08 	bl	800021c <__adddf3>
 800a80c:	4622      	mov	r2, r4
 800a80e:	462b      	mov	r3, r5
 800a810:	f7f5 feba 	bl	8000588 <__aeabi_dmul>
 800a814:	a374      	add	r3, pc, #464	; (adr r3, 800a9e8 <__ieee754_pow+0x6e8>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fcff 	bl	800021c <__adddf3>
 800a81e:	4622      	mov	r2, r4
 800a820:	462b      	mov	r3, r5
 800a822:	f7f5 feb1 	bl	8000588 <__aeabi_dmul>
 800a826:	a372      	add	r3, pc, #456	; (adr r3, 800a9f0 <__ieee754_pow+0x6f0>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fcf6 	bl	800021c <__adddf3>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fea8 	bl	8000588 <__aeabi_dmul>
 800a838:	a36f      	add	r3, pc, #444	; (adr r3, 800a9f8 <__ieee754_pow+0x6f8>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fced 	bl	800021c <__adddf3>
 800a842:	4622      	mov	r2, r4
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	462b      	mov	r3, r5
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f5 fe9b 	bl	8000588 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f5 fe95 	bl	8000588 <__aeabi_dmul>
 800a85e:	4642      	mov	r2, r8
 800a860:	4604      	mov	r4, r0
 800a862:	460d      	mov	r5, r1
 800a864:	464b      	mov	r3, r9
 800a866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a86a:	f7f5 fcd7 	bl	800021c <__adddf3>
 800a86e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a872:	f7f5 fe89 	bl	8000588 <__aeabi_dmul>
 800a876:	4622      	mov	r2, r4
 800a878:	462b      	mov	r3, r5
 800a87a:	f7f5 fccf 	bl	800021c <__adddf3>
 800a87e:	4642      	mov	r2, r8
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	464b      	mov	r3, r9
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f5 fe7d 	bl	8000588 <__aeabi_dmul>
 800a88e:	2200      	movs	r2, #0
 800a890:	4b68      	ldr	r3, [pc, #416]	; (800aa34 <__ieee754_pow+0x734>)
 800a892:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a896:	f7f5 fcc1 	bl	800021c <__adddf3>
 800a89a:	4632      	mov	r2, r6
 800a89c:	463b      	mov	r3, r7
 800a89e:	f7f5 fcbd 	bl	800021c <__adddf3>
 800a8a2:	9802      	ldr	r0, [sp, #8]
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	f7f5 fe6a 	bl	8000588 <__aeabi_dmul>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4680      	mov	r8, r0
 800a8b8:	4689      	mov	r9, r1
 800a8ba:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <__ieee754_pow+0x734>)
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fcaa 	bl	8000218 <__aeabi_dsub>
 800a8c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8c8:	f7f5 fca6 	bl	8000218 <__aeabi_dsub>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fca0 	bl	8000218 <__aeabi_dsub>
 800a8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8dc:	f7f5 fe54 	bl	8000588 <__aeabi_dmul>
 800a8e0:	4622      	mov	r2, r4
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ec:	f7f5 fe4c 	bl	8000588 <__aeabi_dmul>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f5 fc90 	bl	800021c <__adddf3>
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4640      	mov	r0, r8
 800a906:	4649      	mov	r1, r9
 800a908:	f7f5 fc88 	bl	800021c <__adddf3>
 800a90c:	9802      	ldr	r0, [sp, #8]
 800a90e:	a33c      	add	r3, pc, #240	; (adr r3, 800aa00 <__ieee754_pow+0x700>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	f7f5 fe36 	bl	8000588 <__aeabi_dmul>
 800a91c:	4642      	mov	r2, r8
 800a91e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a922:	464b      	mov	r3, r9
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fc76 	bl	8000218 <__aeabi_dsub>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4630      	mov	r0, r6
 800a932:	4639      	mov	r1, r7
 800a934:	f7f5 fc70 	bl	8000218 <__aeabi_dsub>
 800a938:	a333      	add	r3, pc, #204	; (adr r3, 800aa08 <__ieee754_pow+0x708>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fe23 	bl	8000588 <__aeabi_dmul>
 800a942:	a333      	add	r3, pc, #204	; (adr r3, 800aa10 <__ieee754_pow+0x710>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	4606      	mov	r6, r0
 800a94a:	460f      	mov	r7, r1
 800a94c:	4620      	mov	r0, r4
 800a94e:	4629      	mov	r1, r5
 800a950:	f7f5 fe1a 	bl	8000588 <__aeabi_dmul>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4630      	mov	r0, r6
 800a95a:	4639      	mov	r1, r7
 800a95c:	f7f5 fc5e 	bl	800021c <__adddf3>
 800a960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a962:	4b35      	ldr	r3, [pc, #212]	; (800aa38 <__ieee754_pow+0x738>)
 800a964:	4413      	add	r3, r2
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fc57 	bl	800021c <__adddf3>
 800a96e:	4604      	mov	r4, r0
 800a970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a972:	460d      	mov	r5, r1
 800a974:	f7f5 fd9e 	bl	80004b4 <__aeabi_i2d>
 800a978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a97a:	4b30      	ldr	r3, [pc, #192]	; (800aa3c <__ieee754_pow+0x73c>)
 800a97c:	4413      	add	r3, r2
 800a97e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a98e:	f7f5 fc45 	bl	800021c <__adddf3>
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	f7f5 fc41 	bl	800021c <__adddf3>
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	f7f5 fc3d 	bl	800021c <__adddf3>
 800a9a2:	9802      	ldr	r0, [sp, #8]
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	463b      	mov	r3, r7
 800a9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ac:	f7f5 fc34 	bl	8000218 <__aeabi_dsub>
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	f7f5 fc30 	bl	8000218 <__aeabi_dsub>
 800a9b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9bc:	e607      	b.n	800a5ce <__ieee754_pow+0x2ce>
 800a9be:	f04f 0a01 	mov.w	sl, #1
 800a9c2:	e6a5      	b.n	800a710 <__ieee754_pow+0x410>
 800a9c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800aa18 <__ieee754_pow+0x718>
 800a9c8:	e613      	b.n	800a5f2 <__ieee754_pow+0x2f2>
 800a9ca:	bf00      	nop
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	4a454eef 	.word	0x4a454eef
 800a9d4:	3fca7e28 	.word	0x3fca7e28
 800a9d8:	93c9db65 	.word	0x93c9db65
 800a9dc:	3fcd864a 	.word	0x3fcd864a
 800a9e0:	a91d4101 	.word	0xa91d4101
 800a9e4:	3fd17460 	.word	0x3fd17460
 800a9e8:	518f264d 	.word	0x518f264d
 800a9ec:	3fd55555 	.word	0x3fd55555
 800a9f0:	db6fabff 	.word	0xdb6fabff
 800a9f4:	3fdb6db6 	.word	0x3fdb6db6
 800a9f8:	33333303 	.word	0x33333303
 800a9fc:	3fe33333 	.word	0x3fe33333
 800aa00:	e0000000 	.word	0xe0000000
 800aa04:	3feec709 	.word	0x3feec709
 800aa08:	dc3a03fd 	.word	0xdc3a03fd
 800aa0c:	3feec709 	.word	0x3feec709
 800aa10:	145b01f5 	.word	0x145b01f5
 800aa14:	be3e2fe0 	.word	0xbe3e2fe0
 800aa18:	00000000 	.word	0x00000000
 800aa1c:	3ff00000 	.word	0x3ff00000
 800aa20:	43400000 	.word	0x43400000
 800aa24:	0003988e 	.word	0x0003988e
 800aa28:	000bb679 	.word	0x000bb679
 800aa2c:	0800b3e8 	.word	0x0800b3e8
 800aa30:	3ff00000 	.word	0x3ff00000
 800aa34:	40080000 	.word	0x40080000
 800aa38:	0800b408 	.word	0x0800b408
 800aa3c:	0800b3f8 	.word	0x0800b3f8
 800aa40:	a3b4      	add	r3, pc, #720	; (adr r3, 800ad14 <__ieee754_pow+0xa14>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	4640      	mov	r0, r8
 800aa48:	4649      	mov	r1, r9
 800aa4a:	f7f5 fbe7 	bl	800021c <__adddf3>
 800aa4e:	4622      	mov	r2, r4
 800aa50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa54:	462b      	mov	r3, r5
 800aa56:	4630      	mov	r0, r6
 800aa58:	4639      	mov	r1, r7
 800aa5a:	f7f5 fbdd 	bl	8000218 <__aeabi_dsub>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa66:	f7f6 f81f 	bl	8000aa8 <__aeabi_dcmpgt>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f47f adfe 	bne.w	800a66c <__ieee754_pow+0x36c>
 800aa70:	4aa3      	ldr	r2, [pc, #652]	; (800ad00 <__ieee754_pow+0xa00>)
 800aa72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa76:	4293      	cmp	r3, r2
 800aa78:	f340 810a 	ble.w	800ac90 <__ieee754_pow+0x990>
 800aa7c:	151b      	asrs	r3, r3, #20
 800aa7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800aa82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aa86:	fa4a f303 	asr.w	r3, sl, r3
 800aa8a:	445b      	add	r3, fp
 800aa8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800aa90:	4e9c      	ldr	r6, [pc, #624]	; (800ad04 <__ieee754_pow+0xa04>)
 800aa92:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aa96:	4116      	asrs	r6, r2
 800aa98:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	ea23 0106 	bic.w	r1, r3, r6
 800aaa2:	f1c2 0214 	rsb	r2, r2, #20
 800aaa6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800aaaa:	fa4a fa02 	asr.w	sl, sl, r2
 800aaae:	f1bb 0f00 	cmp.w	fp, #0
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	bfb8      	it	lt
 800aabc:	f1ca 0a00 	rsblt	sl, sl, #0
 800aac0:	f7f5 fbaa 	bl	8000218 <__aeabi_dsub>
 800aac4:	e9cd 0100 	strd	r0, r1, [sp]
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aad0:	f7f5 fba4 	bl	800021c <__adddf3>
 800aad4:	2000      	movs	r0, #0
 800aad6:	a378      	add	r3, pc, #480	; (adr r3, 800acb8 <__ieee754_pow+0x9b8>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	f7f5 fd52 	bl	8000588 <__aeabi_dmul>
 800aae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae8:	4606      	mov	r6, r0
 800aaea:	460f      	mov	r7, r1
 800aaec:	4620      	mov	r0, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7f5 fb92 	bl	8000218 <__aeabi_dsub>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7f5 fb8c 	bl	8000218 <__aeabi_dsub>
 800ab00:	a36f      	add	r3, pc, #444	; (adr r3, 800acc0 <__ieee754_pow+0x9c0>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fd3f 	bl	8000588 <__aeabi_dmul>
 800ab0a:	a36f      	add	r3, pc, #444	; (adr r3, 800acc8 <__ieee754_pow+0x9c8>)
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	4680      	mov	r8, r0
 800ab12:	4689      	mov	r9, r1
 800ab14:	4620      	mov	r0, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7f5 fd36 	bl	8000588 <__aeabi_dmul>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4640      	mov	r0, r8
 800ab22:	4649      	mov	r1, r9
 800ab24:	f7f5 fb7a 	bl	800021c <__adddf3>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fb72 	bl	800021c <__adddf3>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	4689      	mov	r9, r1
 800ab40:	f7f5 fb6a 	bl	8000218 <__aeabi_dsub>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb64 	bl	8000218 <__aeabi_dsub>
 800ab50:	4642      	mov	r2, r8
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	464b      	mov	r3, r9
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f5 fd14 	bl	8000588 <__aeabi_dmul>
 800ab60:	a35b      	add	r3, pc, #364	; (adr r3, 800acd0 <__ieee754_pow+0x9d0>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	4604      	mov	r4, r0
 800ab68:	460d      	mov	r5, r1
 800ab6a:	f7f5 fd0d 	bl	8000588 <__aeabi_dmul>
 800ab6e:	a35a      	add	r3, pc, #360	; (adr r3, 800acd8 <__ieee754_pow+0x9d8>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 fb50 	bl	8000218 <__aeabi_dsub>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	f7f5 fd04 	bl	8000588 <__aeabi_dmul>
 800ab80:	a357      	add	r3, pc, #348	; (adr r3, 800ace0 <__ieee754_pow+0x9e0>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 fb49 	bl	800021c <__adddf3>
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	f7f5 fcfb 	bl	8000588 <__aeabi_dmul>
 800ab92:	a355      	add	r3, pc, #340	; (adr r3, 800ace8 <__ieee754_pow+0x9e8>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb3e 	bl	8000218 <__aeabi_dsub>
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	462b      	mov	r3, r5
 800aba0:	f7f5 fcf2 	bl	8000588 <__aeabi_dmul>
 800aba4:	a352      	add	r3, pc, #328	; (adr r3, 800acf0 <__ieee754_pow+0x9f0>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f7f5 fb37 	bl	800021c <__adddf3>
 800abae:	4622      	mov	r2, r4
 800abb0:	462b      	mov	r3, r5
 800abb2:	f7f5 fce9 	bl	8000588 <__aeabi_dmul>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 fb2b 	bl	8000218 <__aeabi_dsub>
 800abc2:	4604      	mov	r4, r0
 800abc4:	460d      	mov	r5, r1
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 fcdb 	bl	8000588 <__aeabi_dmul>
 800abd2:	2200      	movs	r2, #0
 800abd4:	e9cd 0100 	strd	r0, r1, [sp]
 800abd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abdc:	4620      	mov	r0, r4
 800abde:	4629      	mov	r1, r5
 800abe0:	f7f5 fb1a 	bl	8000218 <__aeabi_dsub>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abec:	f7f5 fdf6 	bl	80007dc <__aeabi_ddiv>
 800abf0:	4632      	mov	r2, r6
 800abf2:	4604      	mov	r4, r0
 800abf4:	460d      	mov	r5, r1
 800abf6:	463b      	mov	r3, r7
 800abf8:	4640      	mov	r0, r8
 800abfa:	4649      	mov	r1, r9
 800abfc:	f7f5 fcc4 	bl	8000588 <__aeabi_dmul>
 800ac00:	4632      	mov	r2, r6
 800ac02:	463b      	mov	r3, r7
 800ac04:	f7f5 fb0a 	bl	800021c <__adddf3>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 fb02 	bl	8000218 <__aeabi_dsub>
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	f7f5 fafe 	bl	8000218 <__aeabi_dsub>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	2000      	movs	r0, #0
 800ac22:	4939      	ldr	r1, [pc, #228]	; (800ad08 <__ieee754_pow+0xa08>)
 800ac24:	f7f5 faf8 	bl	8000218 <__aeabi_dsub>
 800ac28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ac2c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	da2f      	bge.n	800ac96 <__ieee754_pow+0x996>
 800ac36:	4650      	mov	r0, sl
 800ac38:	ec43 2b10 	vmov	d0, r2, r3
 800ac3c:	f000 f9b4 	bl	800afa8 <scalbn>
 800ac40:	ec51 0b10 	vmov	r0, r1, d0
 800ac44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac48:	f7ff bbf1 	b.w	800a42e <__ieee754_pow+0x12e>
 800ac4c:	4b2f      	ldr	r3, [pc, #188]	; (800ad0c <__ieee754_pow+0xa0c>)
 800ac4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ac52:	429e      	cmp	r6, r3
 800ac54:	f77f af0c 	ble.w	800aa70 <__ieee754_pow+0x770>
 800ac58:	4b2d      	ldr	r3, [pc, #180]	; (800ad10 <__ieee754_pow+0xa10>)
 800ac5a:	440b      	add	r3, r1
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	d00b      	beq.n	800ac78 <__ieee754_pow+0x978>
 800ac60:	a325      	add	r3, pc, #148	; (adr r3, 800acf8 <__ieee754_pow+0x9f8>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6a:	f7f5 fc8d 	bl	8000588 <__aeabi_dmul>
 800ac6e:	a322      	add	r3, pc, #136	; (adr r3, 800acf8 <__ieee754_pow+0x9f8>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	f7ff bbdb 	b.w	800a42e <__ieee754_pow+0x12e>
 800ac78:	4622      	mov	r2, r4
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	f7f5 facc 	bl	8000218 <__aeabi_dsub>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	f7f5 ff06 	bl	8000a94 <__aeabi_dcmpge>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f43f aef1 	beq.w	800aa70 <__ieee754_pow+0x770>
 800ac8e:	e7e7      	b.n	800ac60 <__ieee754_pow+0x960>
 800ac90:	f04f 0a00 	mov.w	sl, #0
 800ac94:	e718      	b.n	800aac8 <__ieee754_pow+0x7c8>
 800ac96:	4621      	mov	r1, r4
 800ac98:	e7d4      	b.n	800ac44 <__ieee754_pow+0x944>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	491a      	ldr	r1, [pc, #104]	; (800ad08 <__ieee754_pow+0xa08>)
 800ac9e:	f7ff bb8f 	b.w	800a3c0 <__ieee754_pow+0xc0>
 800aca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca6:	f7ff bb8b 	b.w	800a3c0 <__ieee754_pow+0xc0>
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7ff bb87 	b.w	800a3c0 <__ieee754_pow+0xc0>
 800acb2:	4693      	mov	fp, r2
 800acb4:	f7ff bb98 	b.w	800a3e8 <__ieee754_pow+0xe8>
 800acb8:	00000000 	.word	0x00000000
 800acbc:	3fe62e43 	.word	0x3fe62e43
 800acc0:	fefa39ef 	.word	0xfefa39ef
 800acc4:	3fe62e42 	.word	0x3fe62e42
 800acc8:	0ca86c39 	.word	0x0ca86c39
 800accc:	be205c61 	.word	0xbe205c61
 800acd0:	72bea4d0 	.word	0x72bea4d0
 800acd4:	3e663769 	.word	0x3e663769
 800acd8:	c5d26bf1 	.word	0xc5d26bf1
 800acdc:	3ebbbd41 	.word	0x3ebbbd41
 800ace0:	af25de2c 	.word	0xaf25de2c
 800ace4:	3f11566a 	.word	0x3f11566a
 800ace8:	16bebd93 	.word	0x16bebd93
 800acec:	3f66c16c 	.word	0x3f66c16c
 800acf0:	5555553e 	.word	0x5555553e
 800acf4:	3fc55555 	.word	0x3fc55555
 800acf8:	c2f8f359 	.word	0xc2f8f359
 800acfc:	01a56e1f 	.word	0x01a56e1f
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	000fffff 	.word	0x000fffff
 800ad08:	3ff00000 	.word	0x3ff00000
 800ad0c:	4090cbff 	.word	0x4090cbff
 800ad10:	3f6f3400 	.word	0x3f6f3400
 800ad14:	652b82fe 	.word	0x652b82fe
 800ad18:	3c971547 	.word	0x3c971547

0800ad1c <__ieee754_sqrt>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	4955      	ldr	r1, [pc, #340]	; (800ae78 <__ieee754_sqrt+0x15c>)
 800ad22:	ec55 4b10 	vmov	r4, r5, d0
 800ad26:	43a9      	bics	r1, r5
 800ad28:	462b      	mov	r3, r5
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	d112      	bne.n	800ad54 <__ieee754_sqrt+0x38>
 800ad2e:	ee10 2a10 	vmov	r2, s0
 800ad32:	ee10 0a10 	vmov	r0, s0
 800ad36:	4629      	mov	r1, r5
 800ad38:	f7f5 fc26 	bl	8000588 <__aeabi_dmul>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4620      	mov	r0, r4
 800ad42:	4629      	mov	r1, r5
 800ad44:	f7f5 fa6a 	bl	800021c <__adddf3>
 800ad48:	4604      	mov	r4, r0
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	ec45 4b10 	vmov	d0, r4, r5
 800ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	ee10 0a10 	vmov	r0, s0
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	dc0f      	bgt.n	800ad7e <__ieee754_sqrt+0x62>
 800ad5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad62:	4330      	orrs	r0, r6
 800ad64:	d0f2      	beq.n	800ad4c <__ieee754_sqrt+0x30>
 800ad66:	b155      	cbz	r5, 800ad7e <__ieee754_sqrt+0x62>
 800ad68:	ee10 2a10 	vmov	r2, s0
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 fa52 	bl	8000218 <__aeabi_dsub>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	f7f5 fd30 	bl	80007dc <__aeabi_ddiv>
 800ad7c:	e7e4      	b.n	800ad48 <__ieee754_sqrt+0x2c>
 800ad7e:	151b      	asrs	r3, r3, #20
 800ad80:	d073      	beq.n	800ae6a <__ieee754_sqrt+0x14e>
 800ad82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad86:	07dd      	lsls	r5, r3, #31
 800ad88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ad8c:	bf48      	it	mi
 800ad8e:	0fc8      	lsrmi	r0, r1, #31
 800ad90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ad94:	bf44      	itt	mi
 800ad96:	0049      	lslmi	r1, r1, #1
 800ad98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	1058      	asrs	r0, r3, #1
 800ada0:	0fcb      	lsrs	r3, r1, #31
 800ada2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ada6:	0049      	lsls	r1, r1, #1
 800ada8:	2316      	movs	r3, #22
 800adaa:	462c      	mov	r4, r5
 800adac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800adb0:	19a7      	adds	r7, r4, r6
 800adb2:	4297      	cmp	r7, r2
 800adb4:	bfde      	ittt	le
 800adb6:	19bc      	addle	r4, r7, r6
 800adb8:	1bd2      	suble	r2, r2, r7
 800adba:	19ad      	addle	r5, r5, r6
 800adbc:	0fcf      	lsrs	r7, r1, #31
 800adbe:	3b01      	subs	r3, #1
 800adc0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800adc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800adc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800adcc:	d1f0      	bne.n	800adb0 <__ieee754_sqrt+0x94>
 800adce:	f04f 0c20 	mov.w	ip, #32
 800add2:	469e      	mov	lr, r3
 800add4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800add8:	42a2      	cmp	r2, r4
 800adda:	eb06 070e 	add.w	r7, r6, lr
 800adde:	dc02      	bgt.n	800ade6 <__ieee754_sqrt+0xca>
 800ade0:	d112      	bne.n	800ae08 <__ieee754_sqrt+0xec>
 800ade2:	428f      	cmp	r7, r1
 800ade4:	d810      	bhi.n	800ae08 <__ieee754_sqrt+0xec>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	eb07 0e06 	add.w	lr, r7, r6
 800adec:	da42      	bge.n	800ae74 <__ieee754_sqrt+0x158>
 800adee:	f1be 0f00 	cmp.w	lr, #0
 800adf2:	db3f      	blt.n	800ae74 <__ieee754_sqrt+0x158>
 800adf4:	f104 0801 	add.w	r8, r4, #1
 800adf8:	1b12      	subs	r2, r2, r4
 800adfa:	428f      	cmp	r7, r1
 800adfc:	bf88      	it	hi
 800adfe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ae02:	1bc9      	subs	r1, r1, r7
 800ae04:	4433      	add	r3, r6
 800ae06:	4644      	mov	r4, r8
 800ae08:	0052      	lsls	r2, r2, #1
 800ae0a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ae0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ae12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ae1a:	d1dd      	bne.n	800add8 <__ieee754_sqrt+0xbc>
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	d006      	beq.n	800ae2e <__ieee754_sqrt+0x112>
 800ae20:	1c5c      	adds	r4, r3, #1
 800ae22:	bf13      	iteet	ne
 800ae24:	3301      	addne	r3, #1
 800ae26:	3501      	addeq	r5, #1
 800ae28:	4663      	moveq	r3, ip
 800ae2a:	f023 0301 	bicne.w	r3, r3, #1
 800ae2e:	106a      	asrs	r2, r5, #1
 800ae30:	085b      	lsrs	r3, r3, #1
 800ae32:	07e9      	lsls	r1, r5, #31
 800ae34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ae38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ae3c:	bf48      	it	mi
 800ae3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ae42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ae46:	461c      	mov	r4, r3
 800ae48:	e780      	b.n	800ad4c <__ieee754_sqrt+0x30>
 800ae4a:	0aca      	lsrs	r2, r1, #11
 800ae4c:	3815      	subs	r0, #21
 800ae4e:	0549      	lsls	r1, r1, #21
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	d0fa      	beq.n	800ae4a <__ieee754_sqrt+0x12e>
 800ae54:	02d6      	lsls	r6, r2, #11
 800ae56:	d50a      	bpl.n	800ae6e <__ieee754_sqrt+0x152>
 800ae58:	f1c3 0420 	rsb	r4, r3, #32
 800ae5c:	fa21 f404 	lsr.w	r4, r1, r4
 800ae60:	1e5d      	subs	r5, r3, #1
 800ae62:	4099      	lsls	r1, r3
 800ae64:	4322      	orrs	r2, r4
 800ae66:	1b43      	subs	r3, r0, r5
 800ae68:	e78b      	b.n	800ad82 <__ieee754_sqrt+0x66>
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	e7f0      	b.n	800ae50 <__ieee754_sqrt+0x134>
 800ae6e:	0052      	lsls	r2, r2, #1
 800ae70:	3301      	adds	r3, #1
 800ae72:	e7ef      	b.n	800ae54 <__ieee754_sqrt+0x138>
 800ae74:	46a0      	mov	r8, r4
 800ae76:	e7bf      	b.n	800adf8 <__ieee754_sqrt+0xdc>
 800ae78:	7ff00000 	.word	0x7ff00000

0800ae7c <finite>:
 800ae7c:	ee10 3a90 	vmov	r3, s1
 800ae80:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ae84:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ae88:	0fc0      	lsrs	r0, r0, #31
 800ae8a:	4770      	bx	lr

0800ae8c <matherr>:
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	4770      	bx	lr

0800ae90 <nan>:
 800ae90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae98 <nan+0x8>
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	00000000 	.word	0x00000000
 800ae9c:	7ff80000 	.word	0x7ff80000

0800aea0 <rint>:
 800aea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aea2:	ec51 0b10 	vmov	r0, r1, d0
 800aea6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aeaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800aeae:	2e13      	cmp	r6, #19
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	ee10 4a10 	vmov	r4, s0
 800aeb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800aeba:	dc56      	bgt.n	800af6a <rint+0xca>
 800aebc:	2e00      	cmp	r6, #0
 800aebe:	da2b      	bge.n	800af18 <rint+0x78>
 800aec0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aec4:	4302      	orrs	r2, r0
 800aec6:	d023      	beq.n	800af10 <rint+0x70>
 800aec8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800aecc:	4302      	orrs	r2, r0
 800aece:	4254      	negs	r4, r2
 800aed0:	4314      	orrs	r4, r2
 800aed2:	0c4b      	lsrs	r3, r1, #17
 800aed4:	0b24      	lsrs	r4, r4, #12
 800aed6:	045b      	lsls	r3, r3, #17
 800aed8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800aedc:	ea44 0103 	orr.w	r1, r4, r3
 800aee0:	460b      	mov	r3, r1
 800aee2:	492f      	ldr	r1, [pc, #188]	; (800afa0 <rint+0x100>)
 800aee4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800aee8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800aeec:	4602      	mov	r2, r0
 800aeee:	4639      	mov	r1, r7
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7f5 f993 	bl	800021c <__adddf3>
 800aef6:	e9cd 0100 	strd	r0, r1, [sp]
 800aefa:	463b      	mov	r3, r7
 800aefc:	4632      	mov	r2, r6
 800aefe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af02:	f7f5 f989 	bl	8000218 <__aeabi_dsub>
 800af06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800af0e:	4639      	mov	r1, r7
 800af10:	ec41 0b10 	vmov	d0, r0, r1
 800af14:	b003      	add	sp, #12
 800af16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af18:	4a22      	ldr	r2, [pc, #136]	; (800afa4 <rint+0x104>)
 800af1a:	4132      	asrs	r2, r6
 800af1c:	ea01 0702 	and.w	r7, r1, r2
 800af20:	4307      	orrs	r7, r0
 800af22:	d0f5      	beq.n	800af10 <rint+0x70>
 800af24:	0852      	lsrs	r2, r2, #1
 800af26:	4011      	ands	r1, r2
 800af28:	430c      	orrs	r4, r1
 800af2a:	d00b      	beq.n	800af44 <rint+0xa4>
 800af2c:	ea23 0202 	bic.w	r2, r3, r2
 800af30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af34:	2e13      	cmp	r6, #19
 800af36:	fa43 f306 	asr.w	r3, r3, r6
 800af3a:	bf0c      	ite	eq
 800af3c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800af40:	2400      	movne	r4, #0
 800af42:	4313      	orrs	r3, r2
 800af44:	4916      	ldr	r1, [pc, #88]	; (800afa0 <rint+0x100>)
 800af46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800af4a:	4622      	mov	r2, r4
 800af4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 f962 	bl	800021c <__adddf3>
 800af58:	e9cd 0100 	strd	r0, r1, [sp]
 800af5c:	4622      	mov	r2, r4
 800af5e:	462b      	mov	r3, r5
 800af60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af64:	f7f5 f958 	bl	8000218 <__aeabi_dsub>
 800af68:	e7d2      	b.n	800af10 <rint+0x70>
 800af6a:	2e33      	cmp	r6, #51	; 0x33
 800af6c:	dd07      	ble.n	800af7e <rint+0xde>
 800af6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af72:	d1cd      	bne.n	800af10 <rint+0x70>
 800af74:	ee10 2a10 	vmov	r2, s0
 800af78:	f7f5 f950 	bl	800021c <__adddf3>
 800af7c:	e7c8      	b.n	800af10 <rint+0x70>
 800af7e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800af82:	f04f 32ff 	mov.w	r2, #4294967295
 800af86:	40f2      	lsrs	r2, r6
 800af88:	4210      	tst	r0, r2
 800af8a:	d0c1      	beq.n	800af10 <rint+0x70>
 800af8c:	0852      	lsrs	r2, r2, #1
 800af8e:	4210      	tst	r0, r2
 800af90:	bf1f      	itttt	ne
 800af92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800af96:	ea20 0202 	bicne.w	r2, r0, r2
 800af9a:	4134      	asrne	r4, r6
 800af9c:	4314      	orrne	r4, r2
 800af9e:	e7d1      	b.n	800af44 <rint+0xa4>
 800afa0:	0800b418 	.word	0x0800b418
 800afa4:	000fffff 	.word	0x000fffff

0800afa8 <scalbn>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	ec55 4b10 	vmov	r4, r5, d0
 800afae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800afb2:	4606      	mov	r6, r0
 800afb4:	462b      	mov	r3, r5
 800afb6:	b9aa      	cbnz	r2, 800afe4 <scalbn+0x3c>
 800afb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800afbc:	4323      	orrs	r3, r4
 800afbe:	d03b      	beq.n	800b038 <scalbn+0x90>
 800afc0:	4b31      	ldr	r3, [pc, #196]	; (800b088 <scalbn+0xe0>)
 800afc2:	4629      	mov	r1, r5
 800afc4:	2200      	movs	r2, #0
 800afc6:	ee10 0a10 	vmov	r0, s0
 800afca:	f7f5 fadd 	bl	8000588 <__aeabi_dmul>
 800afce:	4b2f      	ldr	r3, [pc, #188]	; (800b08c <scalbn+0xe4>)
 800afd0:	429e      	cmp	r6, r3
 800afd2:	4604      	mov	r4, r0
 800afd4:	460d      	mov	r5, r1
 800afd6:	da12      	bge.n	800affe <scalbn+0x56>
 800afd8:	a327      	add	r3, pc, #156	; (adr r3, 800b078 <scalbn+0xd0>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 fad3 	bl	8000588 <__aeabi_dmul>
 800afe2:	e009      	b.n	800aff8 <scalbn+0x50>
 800afe4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800afe8:	428a      	cmp	r2, r1
 800afea:	d10c      	bne.n	800b006 <scalbn+0x5e>
 800afec:	ee10 2a10 	vmov	r2, s0
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f7f5 f912 	bl	800021c <__adddf3>
 800aff8:	4604      	mov	r4, r0
 800affa:	460d      	mov	r5, r1
 800affc:	e01c      	b.n	800b038 <scalbn+0x90>
 800affe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b002:	460b      	mov	r3, r1
 800b004:	3a36      	subs	r2, #54	; 0x36
 800b006:	4432      	add	r2, r6
 800b008:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b00c:	428a      	cmp	r2, r1
 800b00e:	dd0b      	ble.n	800b028 <scalbn+0x80>
 800b010:	ec45 4b11 	vmov	d1, r4, r5
 800b014:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b080 <scalbn+0xd8>
 800b018:	f000 f83c 	bl	800b094 <copysign>
 800b01c:	a318      	add	r3, pc, #96	; (adr r3, 800b080 <scalbn+0xd8>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	ec51 0b10 	vmov	r0, r1, d0
 800b026:	e7da      	b.n	800afde <scalbn+0x36>
 800b028:	2a00      	cmp	r2, #0
 800b02a:	dd08      	ble.n	800b03e <scalbn+0x96>
 800b02c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b030:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b034:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b038:	ec45 4b10 	vmov	d0, r4, r5
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
 800b03e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b042:	da0d      	bge.n	800b060 <scalbn+0xb8>
 800b044:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b048:	429e      	cmp	r6, r3
 800b04a:	ec45 4b11 	vmov	d1, r4, r5
 800b04e:	dce1      	bgt.n	800b014 <scalbn+0x6c>
 800b050:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b078 <scalbn+0xd0>
 800b054:	f000 f81e 	bl	800b094 <copysign>
 800b058:	a307      	add	r3, pc, #28	; (adr r3, 800b078 <scalbn+0xd0>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	e7e0      	b.n	800b022 <scalbn+0x7a>
 800b060:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b064:	3236      	adds	r2, #54	; 0x36
 800b066:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b06a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b06e:	4620      	mov	r0, r4
 800b070:	4629      	mov	r1, r5
 800b072:	2200      	movs	r2, #0
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <scalbn+0xe8>)
 800b076:	e7b2      	b.n	800afde <scalbn+0x36>
 800b078:	c2f8f359 	.word	0xc2f8f359
 800b07c:	01a56e1f 	.word	0x01a56e1f
 800b080:	8800759c 	.word	0x8800759c
 800b084:	7e37e43c 	.word	0x7e37e43c
 800b088:	43500000 	.word	0x43500000
 800b08c:	ffff3cb0 	.word	0xffff3cb0
 800b090:	3c900000 	.word	0x3c900000

0800b094 <copysign>:
 800b094:	ec51 0b10 	vmov	r0, r1, d0
 800b098:	ee11 0a90 	vmov	r0, s3
 800b09c:	ee10 2a10 	vmov	r2, s0
 800b0a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b0a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b0a8:	ea41 0300 	orr.w	r3, r1, r0
 800b0ac:	ec43 2b10 	vmov	d0, r2, r3
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <_init>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr

0800b0c0 <_fini>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr
